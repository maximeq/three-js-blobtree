{"version":3,"file":"three-js-blobtree.js","sources":["../node_modules/three-js-checker/src/three-check.js","../src/blobtree/Types.js","../src/blobtree/Element.js","../src/blobtree/Node.js","../src/blobtree/Material.js","../src/blobtree/RicciNode.js","../src/utils/Convergence.js","../src/blobtree/RootNode.js","../src/blobtree/DifferenceNode.js","../src/blobtree/MinNode.js","../src/blobtree/TwistNode.js","../src/blobtree/Primitive.js","../src/blobtree/scalis/ScalisMath.js","../src/blobtree/scalis/ScalisPrimitive.js","../src/blobtree/scalis/ScalisVertex.js","../src/blobtree/areas/Area.js","../src/blobtree/accuracies/Accuracies.js","../src/blobtree/areas/AreaSphere.js","../src/blobtree/scalis/ScalisPoint.js","../src/blobtree/areas/AreaScalisSeg.js","../src/blobtree/scalis/ScalisSegment.js","../src/utils/TriangleUtils.js","../src/blobtree/areas/AreaScalisTri.js","../src/blobtree/scalis/ScalisTriangle.js","../src/blobtree/sdf/DistanceFunctor.js","../src/blobtree/sdf/Poly6DistanceFunctor.js","../src/blobtree/sdf/SDFNode.js","../src/blobtree/sdf/SDFPrimitive.js","../src/blobtree/sdf/SDFRootNode.js","../src/blobtree/sdf/SDFPoint.js","../src/blobtree/areas/AreaCapsule.js","../src/blobtree/sdf/SDFSegment.js","../src/blobtree/sdf/SDFSphere.js","../src/blobtree/sdf/SDFCapsule.js","../src/polygonizers/MCTables.js","../src/polygonizers/SlidingMarchingCubes.js","../src/blobtree/MaxNode.js","../src/polygonizers/SplitMaxPolygonizer.js","../src/polygonizers/SplitSMC.js","../src/export.js","../src/check-wrapper.js"],"sourcesContent":["export function checkDependancy(packageName, dependancyName, dependancy) {\n    try {\n        if (THREE[dependancyName] === undefined) {\n            THREE[dependancyName] = dependancy;\n            return;\n        }\n\n        if (THREE[dependancyName] !== dependancy) {\n            throw new Error(`${packageName}: ${dependancyName} is duplicated. Your bundle includes ${dependancyName} twice. Please repair your bundle.`);\n        }\n    } catch (error) {\n        if (!error.message.match(/is duplicated/)) {\n            console.warn(\n                `${packageName}: Duplication check unavailable. ${error}`\n            );\n        } else {\n            throw error;\n        }\n    }\n}\n\nexport function checkThreeRevision(packageName, revision) {\n    try {\n        if (THREE.REVISION != revision) {\n            throw new Error(`${packageName} depends on THREE revision ${revision}, but current revision is ${THREE.REVISION}.`)\n        }\n    } catch (error) {\n        if (!error.message.match(/depends on THREE revision/)) {\n            console.warn(\n                `${packageName}: Revision check unavailable. ${error}`\n            );\n        } else {\n            throw error;\n        }\n    }\n}\n","\"use strict\";\r\n\r\n/**\r\n *  Keep track of all Types added to the Blobtree library.\r\n *  For now just a list of strings registered by the classes.\r\n */\r\nvar Types = {\r\n    /**\r\n     * @type {Object<string,{fromJSON:Function}>}\r\n     */\r\n    types: {},\r\n    /**\r\n     *  Register a type in the list.\r\n     *  @param {string} name The name of the type.\r\n     *  @param {{fromJSON:Function}} cls The class of the registered type.\r\n     */\r\n    register(name, cls) {\r\n        if (this.types[name]) {\r\n            throw \"Error : cannot register type \" + name + \", this name is already registered.\";\r\n        }\r\n        this.types[name] = cls;\r\n    },\r\n    /**\r\n     *  Parse a JSON recursively to return a Blobtree or a blobtree element.\r\n     *  @param {Object} json A javascript Object resulting from a JSON interpretation.\r\n     *  @return {any}\r\n     */\r\n    fromJSON(json) {\r\n        var cls = this.types[json.type];\r\n        if (!cls) {\r\n            throw \"Error : type found in JSON (\" + json.type + \" is not registered in the Blobtree library.\";\r\n        }\r\n        return cls.fromJSON(json);\r\n    }\r\n}\r\n\r\nmodule.exports = Types;\r\n","'use strict';\r\n\r\nconst THREE = require(\"three\");\r\nconst Types = require(\"./Types.js\");\r\n\r\n// Types\r\n/** @typedef {import('./Material.js')} Material */\r\n/** @typedef {import('./Node.js')} Node */\r\n/** @typedef {import('./Primitive')} Primitive */\r\n/** @typedef {*} Json */\r\n/** @typedef {import('./areas/Area')} Area */\r\n\r\n/**\r\n * @typedef {{type:string}} ElementJSON\r\n */\r\n\r\n/**\r\n * @typedef {Object} ValueResultType Computed values will be stored here. Each values should exist and\r\n *                    be allocated already.\r\n * @property {number} v Value, must be defined\r\n * @property {Material=} m Material, must be allocated and defined if wanted\r\n * @property {THREE.Vector3=} g Gradient, must be allocated and defined if wanted\r\n * @property {number=} step ??? Not sure, probably a \"safe\" step for raymarching\r\n * @property {number=} stepOrtho ??? Same as step but in orthogonal direction ?\r\n */\r\n\r\nlet elementIds = 0;\r\n\r\n/**\r\n *  A superclass for Node and Primitive in the blobtree.\r\n *  @class\r\n *  @constructor\r\n */\r\nclass Element {\r\n\r\n    static type = \"Element\";\r\n\r\n    /**\r\n     * @param {ElementJSON} _json\r\n     */\r\n    static fromJSON(_json) {\r\n        throw new Error(\"Element.fromJSON should never be called as Element is abstract.\");\r\n    }\r\n\r\n    constructor() {\r\n        this.id = elementIds++;\r\n\r\n        this.aabb = new THREE.Box3();\r\n        this.valid_aabb = false;\r\n\r\n        /** @type {Node} */\r\n        this.parentNode = null;\r\n    }\r\n\r\n    /**\r\n     *  Return a Javscript Object respecting JSON convention.\r\n     *  All classes must defined it.\r\n     *  @return {ElementJSON}\r\n     */\r\n    toJSON () {\r\n        return {\r\n            type: this.getType()\r\n        };\r\n    }\r\n\r\n    /**\r\n     *  Clone the object.\r\n     * @return {Element}\r\n     */\r\n    clone() {\r\n        return Types.fromJSON(this.toJSON());\r\n    }\r\n\r\n    /**\r\n     *  @return {Node} The parent node of this primitive.\r\n     */\r\n    getParentNode () {\r\n        return this.parentNode;\r\n    }\r\n\r\n    /**\r\n     *  @return {string} Type of the element\r\n     */\r\n    getType () {\r\n        return Element.type;\r\n    }\r\n\r\n    /**\r\n     *  Perform precomputation that will help to reduce future processing time,\r\n     *  especially on calls to value.\r\n     *  @protected\r\n     */\r\n    computeHelpVariables () {\r\n        this.computeAABB();\r\n    }\r\n\r\n    /**\r\n     *  @abstract\r\n     *  Compute the Axis Aligned Bounding Box (AABB) for the current primitive.\r\n     *  By default, the AABB returned is the unionns of all vertices AABB (This is\r\n     *  good for almost all basic primitives).\r\n     */\r\n    computeAABB () {\r\n        throw \"Error : computeAABB is abstract, should have been overwritten\";\r\n    }\r\n\r\n    /**\r\n     *  @return {THREE.Box3} The AABB of this Element (primitive or node). WARNING : call\r\n     *  isValidAABB before to ensure the current AABB does correspond to the primitive\r\n     *  settings.\r\n     */\r\n    getAABB () {\r\n        return this.aabb;\r\n    }\r\n\r\n    /**\r\n     *  @return {boolean} True if the current aabb is valid, ie it does\r\n     *  correspond to the internal primitive parameters.\r\n     */\r\n    isValidAABB () {\r\n        return this.valid_aabb;\r\n    }\r\n\r\n    /**\r\n     *  Invalid the bounding boxes recursively up to the root\r\n     */\r\n    invalidAABB () {\r\n        this.valid_aabb = false;\r\n        if (this.parentNode !== null && this.parentNode.isValidAABB()) {\r\n            this.parentNode.invalidAABB();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Note : This function was made for Node to recursively invalidate\r\n     *  children AABB. Default is to invalidate only this AABB.\r\n     */\r\n    invalidAll() {\r\n        this.invalidAABB();\r\n    }\r\n\r\n    /**\r\n     *  @abstract\r\n     *  Prepare the element for a call to value.\r\n     *  Important note: For now, a primitive is considered prepared for eval if and only\r\n     *                  if its bounding box is valid (valid_aabb is true).\r\n     */\r\n    prepareForEval() {\r\n        console.error(\"Blobtree.Element: prepareForEval is a virtual function, should be re-implemented in all element(error occured in Element.js\");\r\n        // Possible improvement: return the list of deleted objects and new ares,\r\n        // for example to launch a Marching Cube in the changed area only\r\n        // @return {{del_obj:Array<Object>, new_areas:Array<Object>}}\r\n        // return {del_obj:[], new_areas:[]};\r\n    }\r\n\r\n    /**\r\n     *  @abstract\r\n     *  Compute the value and/or gradient and/or material\r\n     *  of the element at position p in space. return computations in res (see below)\r\n     *\r\n     *  @param {THREE.Vector3} _p Point where we want to evaluate the primitive field\r\n     *  @param {ValueResultType} _res\r\n     */\r\n    value(_p, _res) {\r\n        throw new Error(\"ERROR : value is an abstract function, should be re-implemented in all primitives(error occured in \" + this.getType() + \" primitive)\");\r\n    };\r\n\r\n    /**\r\n     * @param {THREE.Vector3} p The point where we want the numerical gradient\r\n     * @param {THREE.Vector3} res The resulting gradient\r\n     * @param {number} epsilon The step value for the numerical evaluation\r\n     */\r\n    numericalGradient = (function () {\r\n            let tmp = { v: 0 };\r\n            let coord = ['x', 'y', 'z'];\r\n            /**\r\n             * @param {THREE.Vector3} p\r\n             * @param {THREE.Vector3} res\r\n             * @param {number} epsilon\r\n             */\r\n            return function (p, res, epsilon) {\r\n\r\n                /** @type Element */\r\n                let self = this;\r\n\r\n                let eps = epsilon || 0.00001;\r\n\r\n                for (let i = 0; i < 3; ++i) {\r\n                    p[coord[i]] = p[coord[i]] + eps;\r\n                    self.value(p, tmp);\r\n                    res[coord[i]] = tmp.v;\r\n                    p[coord[i]] = p[coord[i]] - 2 * eps;\r\n                    self.value(p, tmp);\r\n                    res[coord[i]] = (res[coord[i]] - tmp.v) / (2 * eps);\r\n                    p[coord[i]] = p[coord[i]] + eps; // reset p\r\n                }\r\n            }\r\n        }\r\n    )()\r\n\r\n    /**\r\n     *  @abstract\r\n     *  Get the Area object.\r\n     *  Area objects do provide methods useful when rasterizing, raytracing or polygonizing\r\n     *  the area (intersections with other areas, minimum level of detail needed to\r\n     *  capture the feature nicely, etc etc...).\r\n     *  @returns {Array.<{aabb: THREE.Box3, bv:Area, obj:Primitive}>} The Areas object corresponding to the node/primitive, in an array\r\n     */\r\n    getAreas () {\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     *  @abstract\r\n     *  This function is called when a point is outside of the potential influence of a primitive/node.\r\n     *  @param {THREE.Vector3} _p\r\n     *  @return {number} The next step length to do with respect to this primitive/node\r\n     */\r\n    distanceTo (_p) {\r\n        throw new Error(\"ERROR : distanceTo is a virtual function, should be reimplemented in all classes extending Element. Concerned type: \" + this.getType() + \".\");\r\n    }\r\n\r\n    /**\r\n     *  @abstract\r\n     *  This function is called when a point is within the potential influence of a primitive/node.\r\n     *  @return {number} The next step length to do with respect to this primitive/node.\r\n     */\r\n    heuristicStepWithin () {\r\n        throw new Error(\"ERROR : heuristicStepWithin is a virtual function, should be reimplemented in all classes extending Element. Concerned type: \" + this.getType() + \".\");\r\n    };\r\n\r\n    /**\r\n     *  Trim the tree to keep only nodes influencing a given bounding box.\r\n     *  The tree must be prepared for eval for this process to be working.\r\n     *  Default behaviour is doing nothing, leaves cannot be sub-trimmed, only nodes.\r\n     *  Note : only the root can untrim\r\n     *\r\n     *  @param {THREE.Box3} _aabb\r\n     *  @param {Array.<Element>} _trimmed Array of trimmed Elements\r\n     *  @param {Array.<Node>} _parents Array of fathers from which each trimmed element has been removed.\r\n     */\r\n    trim (_aabb, _trimmed, _parents) {\r\n        // Do nothing by default\r\n    };\r\n\r\n    /**\r\n     *  count the number of elements of class cls in this node and subnodes\r\n     *  @param {Function} _cls the class of the elements we want to count\r\n     *  @return {number} The number of element of class cls\r\n     */\r\n    count (_cls) {\r\n        return 0;\r\n    }\r\n\r\n    destroy() {\r\n        console.error(\"Blobtree.Element: destroy is a virtual function, should be reimplemented in all classes extending Element.\");\r\n    }\r\n\r\n};\r\n\r\nTypes.register(Element.type, Element);\r\n\r\nmodule.exports = Element;\r\n\r\n\r\n","'use strict';\r\n\r\nconst Element = require('./Element.js');\r\nconst Types = require(\"./Types.js\");\r\n\r\n// Types\r\n/**\r\n * @typedef {import('./Element.js').Json} Json\r\n * @typedef {import('./Element.js').ElementJSON} ElementJSON\r\n * @typedef {import('./Primitive.js')} Primitive\r\n * @typedef {import('./areas/Area')} Area\r\n */\r\n\r\n/** @typedef {{children:Array<{ElementJSON}>} & ElementJSON} NodeJSON*/\r\n\r\n/**\r\n *  This class implements an abstract Node class for implicit blobtree.\r\n *  @constructor\r\n *  @extends {Element}\r\n */\r\nclass Node extends Element {\r\n\r\n    static type = \"Node\";\r\n\r\n    /**\r\n     * @param {NodeJSON} _json\r\n     */\r\n    static fromJSON(_json) {\r\n        throw new Error(\"Node.fromJSON should never be called as Node is abstract.\");\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        /** @type {Array.<!Element>} */\r\n        this.children = [];\r\n    }\r\n\r\n    getType () {\r\n        return Node.type;\r\n    }\r\n\r\n    /**\r\n     * @return {NodeJSON}\r\n     */\r\n    toJSON () {\r\n        var res = {\r\n            ...super.toJSON(),\r\n            children: []\r\n        };\r\n        for (var i = 0; i < this.children.length; ++i) {\r\n            res.children.push(this.children[i].toJSON());\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     *  Clone current node and itss hierarchy\r\n     */\r\n    clone () {\r\n        return Types.fromJSON(this.toJSON());\r\n    }\r\n\r\n    /**\r\n     *  @link Element.prepareForEval\r\n     */\r\n    prepareForEval () {\r\n        console.error(\"Blobtree.Node: prepareForEval is a pure abstract function, should be reimplemented in every node class.\");\r\n        return super.prepareForEval();\r\n    }\r\n\r\n    /**\r\n     *  Invalid the bounding boxes recursively down for all children\r\n     */\r\n    invalidAll () {\r\n        this.invalidAABB();\r\n        if (this.children) {\r\n            for (var i = 0; i < this.children.length; i++) {\r\n                this.children[i].invalidAll();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  Destroy the node and its children. The node is removed from the blobtree\r\n     *  (basically clean up the links between blobtree elements).\r\n     */\r\n    destroy () {\r\n        // need to Copy the array since indices will change.\r\n        var arr_c = this.children.slice(0, this.children.length);\r\n        for (var i = 0; i < arr_c.length; i++) {\r\n            arr_c[i].destroy();\r\n        }\r\n        if (this.children.length !== 0) {\r\n            throw \"Error : children length should be 0\";\r\n        }\r\n        if (this.parentNode !== null) {\r\n            this.parentNode.removeChild(this);\r\n        }\r\n        if (this.parentNode !== null) {\r\n            throw \"Error : parent node should be null at this point\";\r\n        }\r\n        this.children.length = 0;\r\n    };\r\n\r\n    /**\r\n     *  Only works with nary nodes, otherwise a set function would be more appropriate.\r\n     *  -> TODO : check that if we have something else than n-ary nodes one day...\r\n     *  If c already belongs to the tree, it is removed from its current parent\r\n     *  children list before anything (ie it is \"moved\").\r\n     *\r\n     *  @param {Element} c The child to add.\r\n     */\r\n    addChild (c) {\r\n        if (c.parentNode !== null) {\r\n            c.parentNode.removeChild(c);\r\n        }\r\n        // TODO should ckeck that the node does not already belong to the children list\r\n        this.children.push(c);\r\n        c.parentNode = this;\r\n\r\n        this.invalidAABB();\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     *  Only works with n-ary nodes, otherwise order matters and we therefore\r\n     *  have to set \"null\" and node cannot be evaluated.\r\n     *  -> TODO : check that if we have something else than n-ary nodes one day...\r\n     *  WARNING:\r\n     *      Should only be called when a Primitive is deleted.\r\n     *      Otherwise :\r\n     *          To move a node to another parent : use addChild.\r\n     *  @param {Element} c The child to remove.\r\n     */\r\n    removeChild (c) {\r\n        var i = 0;\r\n        var cdn = this.children; // minimize the code\r\n\r\n        // Note : if this becomes too long, sort this.children using ids\r\n        while (cdn[i] !== c && i < cdn.length) ++i;\r\n\r\n        if (i != cdn.length) {\r\n            cdn[i] = cdn[cdn.length - 1];\r\n            cdn.pop();\r\n        } else {\r\n            throw \"c does not belong to the children of this node\";\r\n        }\r\n\r\n        this.invalidAABB();\r\n\r\n        c.parentNode = null;\r\n    }\r\n\r\n    /**\r\n     * @link Element.computeAABB for a complete description\r\n     */\r\n    computeAABB () {\r\n        this.aabb.makeEmpty();\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            this.children[i].computeAABB();\r\n            this.aabb.union(this.children[i].getAABB());\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @link Element.getAreas for a complete description\r\n     *  @returns {Array.<{aabb: THREE.Box3, bv:Area, obj:Primitive}>}\r\n     */\r\n    getAreas () {\r\n        if (!this.valid_aabb) {\r\n            throw \"Error : cannot call getAreas on a not prepared for eval nod, please call PrepareForEval first. Node concerned is a \" + this.getType();\r\n        }\r\n        var res = [];\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            res.push.apply(res, this.children[i].getAreas());\r\n        }\r\n        return res;\r\n    };\r\n\r\n    /**\r\n     * @link Element.distanceTo for a complete description\r\n     * @param {THREE.Vector3} p\r\n     * @returns {number}\r\n     */\r\n    distanceTo(p) {\r\n        var res = 10000000;\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            res = Math.min(res, this.children[i].distanceTo(p));\r\n        }\r\n        return res;\r\n    };\r\n\r\n    /**\r\n     * @returns\r\n     */\r\n    heuristicStepWithin() {\r\n        var res = 10000000;\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            res = Math.min(res, this.children[i].heuristicStepWithin());\r\n        }\r\n        return res;\r\n    };\r\n\r\n    /**\r\n     *  @link Element.trim for a complete description.\r\n     *\r\n     *  @param {THREE.Box3} aabb\r\n     *  @param {Array.<Element>} trimmed\r\n     *  @param {Array.<Node>} parents\r\n     */\r\n    trim(aabb, trimmed, parents) {\r\n        let idx = trimmed.length;\r\n        for (let i = 0; i < this.children.length; i++) {\r\n            if (!this.children[i].getAABB().intersectsBox(aabb)) {\r\n                // trim the node\r\n                trimmed.push(this.children[i]);\r\n                parents.push(this);\r\n            }\r\n        }\r\n        for (let i = idx; i < trimmed.length; ++i) {\r\n            this.removeChild(trimmed[i]);\r\n        }\r\n        // Trim remaining nodes\r\n        for (let i = 0; i < this.children.length; i++) {\r\n            this.children[i].trim(aabb, trimmed, parents);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @link Element.count for a complete description.\r\n     *\r\n     *  @param {Function} cls\r\n     *  @return {number}\r\n     */\r\n    count(cls) {\r\n        var count = 0;\r\n\r\n        if (this instanceof cls) {\r\n            count++;\r\n        }\r\n\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            count += this.children[i].count(cls);\r\n        }\r\n\r\n        return count;\r\n    };\r\n\r\n};\r\n\r\nTypes.register(Node.type, Node);\r\n\r\nmodule.exports = Node;\r\n\r\n\r\n","'use strict';\r\n\r\nconst THREE = require(\"three\");\r\n\r\n/**\r\n * @typedef {Object} MaterialJSON\r\n * @property {string} color\r\n * @property {number} roughness\r\n * @property {number} metalness\r\n * @property {string} emissive\r\n */\r\n\r\n/**\r\n *  Material object for blobtree. It is an internal material, that should especially\r\n *  be used in implicit elements. It is the internal representation of the material,\r\n *  not the openGL material that will be used for display.\r\n *  @constructor\r\n *\r\n *  @param {!Object} params Parameters for the material. As a dictionary to be easily extended later.\r\n *\r\n *  @param {THREE.Color?}   params.color        Base diffuse color for the material.\r\n *                                              Defaults to #aaaaaa\r\n *\r\n *  @param {number?}        params.roughness    Roughness for the material.\r\n *                                              Defaults to 0.\r\n *\r\n *  @param {number?}        params.metalness    Metalness aspect of the material, 1 for metalness, 0 for dielectric.\r\n *                                              Defaults to 0.\r\n *\r\n *  @param {THREE.Color?} params.emissive       Emissive color for the material.\r\n *                                              Defaults to pitch black. (no light emission)\r\n */\r\nclass Material {\r\n\r\n    static defaultMaterial = new Material();\r\n\r\n    // Other static functions\r\n    /**\r\n     *  Compare arrays of materials.\r\n     *\r\n     *  @deprecated\r\n     *\r\n     *  @param {Array.<Material>} arr1\r\n     *  @param {Array.<Material>} arr2\r\n     *  @param {Array.<Material>=} arr3\r\n     *  @param {Array.<Material>=} arr4\r\n     *  @param {Array.<Material>=} arr5\r\n     *\r\n     *  @return {boolean} true if and only if all arguments are arrays of the same length and containing the same material values.\r\n     */\r\n    static areEqualsArrays (arr1) {\r\n\r\n        console.warn(\"Material.areEqualsArrays is deprecated, please use your own comparison function using Material.equals.\");\r\n\r\n        let  res = true;\r\n        // check for nullity\r\n        for (let i = 1; i < arguments.length; i++) {\r\n            res = res && ((arr1 === null && arguments[i] === null) || (arr1 !== null && arguments[i] !== null));\r\n        }\r\n        if (!res) { return res; } // Case : at least one arr is null but not all\r\n\r\n        if (arr1 === null) { return true; } // case all null\r\n\r\n        for (let i = 1; i < arguments.length; i++) {\r\n            let  equals = true;\r\n            if (arguments[i].length !== arr1.length) {\r\n                return false;\r\n            }\r\n            for (let k = 0; k < arr1.length; ++k) {\r\n                equals = equals && arr1[k].equals(arguments[i][k]);\r\n            }\r\n            res = res && equals;\r\n        }\r\n        return res;\r\n    };\r\n\r\n    static fromJSON(json) {\r\n        return new Material({\r\n            color: new THREE.Color(json.color),\r\n            roughness: json.roughness,\r\n            metalness: json.metalness,\r\n            emissive: json.emissive, // If undefined, will default to pitch black. If not, will load the hex string.\r\n        });\r\n    }\r\n\r\n    /**\r\n    *  @constructor\r\n    *\r\n    *  @param { !Object } params Parameters for the material.As a dictionary to be easily extended later.\r\n    *\r\n    *  @param { THREE.Color ?} params.color Base diffuse color for the material. Defaults to #aaaaaa\r\n    *\r\n    *  @param { number ?} params.roughness Roughness for the material. Defaults to 0.\r\n    *\r\n    *  @param { number ?} params.metalness Metalness aspect of the material, 1 for metalness, 0 for dielectric. Defaults to 0.\r\n    *\r\n    *  @param { THREE.Color ?} params.emissive Emissive color for the material. Defaults to pitch black. (no light emission)\r\n    */\r\n    constructor(params) {\r\n        params = params || {};\r\n\r\n        if (arguments[1] !== undefined) {\r\n            throw \"Error : Blobtree Material now takes only 1 argument.\";\r\n        }\r\n\r\n        this.color = new THREE.Color(params.color !== undefined ? params.color : 0xaaaaaa);\r\n        this.roughness = params.roughness !== undefined ? params.roughness : 0;\r\n        this.metalness = params.metalness !== undefined ? params.metalness : 0;\r\n        this.emissive = new THREE.Color(params.emissive !== undefined ? params.emissive : 0x000000);\r\n    }\r\n\r\n    toJSON () {\r\n        return {\r\n            color: \"#\" + this.color.getHexString(),\r\n            roughness: this.roughness,\r\n            metalness: this.metalness,\r\n            emissive: `#${this.emissive.getHexString()}`\r\n        };\r\n    }\r\n\r\n    /**\r\n     *  Return a clone of the material\r\n     *  @return {!Material} The new material\r\n     */\r\n    clone () {\r\n        return new Material({\r\n            color: this.color,\r\n            roughness: this.roughness,\r\n            metalness: this.metalness,\r\n            emissive: this.emissive,\r\n        });\r\n    }\r\n\r\n    /**\r\n     *  Copy the given material parameters\r\n     *  @param {!Material} mat Material to be copied\r\n     */\r\n    copy (mat) {\r\n        this.color.copy(mat.color);\r\n        this.roughness = mat.roughness;\r\n        this.metalness = mat.metalness;\r\n        this.emissive.copy(mat.emissive);\r\n    }\r\n\r\n    /**\r\n     *  @deprecated Use setParams instead\r\n     *  Set Material parameters at once. DEPRECATED. Use setParams\r\n     *  @param {THREE.Color!} c Color\r\n     *  @param {number!} r roughness\r\n     *  @param {number!} m Metalness\r\n     */\r\n    set (c, r, m) {\r\n        this.color.copy(c);\r\n        this.roughness = r;\r\n        this.metalness = m;\r\n    }\r\n\r\n    /**\r\n     *  Set Material parameters (all or just some)\r\n     *\r\n     *  @param {Object} params Parameters for the material. As a dictionary to be easily extended later.\r\n     *  @param {THREE.Color?}   params.color        Base diffuse color for the material.\r\n     *  @param {number?}        params.roughness    Roughness for the material.\r\n     *  @param {number?}        params.metalness    Metalness aspect of the material, 1 for metalness, 0 for dielectric.\r\n     *  @param {THREE.Color?} params.emissive       Emissive color for the material.\r\n     */\r\n    setParams (params) {\r\n        this.color.copy(params.color ? params.color : this.color);\r\n        this.roughness = params.roughness !== undefined ? params.roughness : this.roughness;\r\n        this.metalness = params.metalness !== undefined ? params.metalness : this.metalness;\r\n        this.emissive.copy(params.emissive !== undefined ? params.emissive : this.emissive);\r\n    }\r\n\r\n    /** @return {THREE.Color} */\r\n    getColor () { return this.color; };\r\n\r\n    /** @return {number} */\r\n    getRoughness () { return this.roughness; };\r\n\r\n    /** @return {number} */\r\n    getMetalness = function () { return this.metalness; };\r\n\r\n    /** @return {THREE.Color} */\r\n    getEmissive () { return this.emissive; }\r\n\r\n\r\n    equals (m) {\r\n        return this.color.equals(m.color) &&\r\n            this.metalness === m.metalness &&\r\n            this.roughness === m.roughness &&\r\n            this.emissive.equals(m.emissive);\r\n    }\r\n\r\n    /**\r\n     *  Perform a linear interpolation between this material and a given other.\r\n     * (1-s)*this + s*m = this +(m1-this)*s\r\n     *  @param {!Material} m The material to interpolate with this\r\n     *  @param {number} s the interpolation coefficient\r\n     */\r\n    lerp (m, s) {\r\n        this.color.lerp(m.color, s);\r\n        this.roughness = (1 - s) * this.roughness + s * m.roughness;\r\n        this.metalness = (1 - s) * this.metalness + s * m.metalness;\r\n        this.emissive.lerp(m.emissive, s);\r\n    };\r\n    /**\r\n     *  Used in triangles (ok it's specific, still we need it :)\r\n     *  Linear interpolation over a triangle? Store the result in this\r\n     *  @param {!Material} m1 The material of first corner\r\n     *  @param {!Material} m2 The material of second corner\r\n     *  @param {!Material} m3 The material of third corner\r\n     *  @param {number} a1 the interpolation coefficient 1\r\n     *  @param {number} a2 the interpolation coefficient 2\r\n     *  @param {number} a3 the interpolation coefficient 3\r\n     *  @param {number} denum Normalizing the result (division)\r\n     *  @return {Material} this\r\n     */\r\n    triMean (m1, m2, m3, a1, a2, a3, denum) {\r\n        this.color.r = (a1 * m1.color.r + a2 * m2.color.r + a3 * m3.color.r) / denum;\r\n        this.color.g = (a1 * m1.color.g + a2 * m2.color.g + a3 * m3.color.g) / denum;\r\n        this.color.b = (a1 * m1.color.b + a2 * m2.color.b + a3 * m3.color.b) / denum;\r\n\r\n        this.roughness = (a1 * m1.roughness + a2 * m2.roughness + a3 * m3.roughness) / denum;\r\n\r\n        this.metalness = (a1 * m1.metalness + a2 * m2.metalness + a3 * m3.metalness) / denum;\r\n\r\n        this.emissive.r = (a1 * m1.emissive.r + a2 * m2.emissive.r + a3 * m3.emissive.r) / denum;\r\n        this.emissive.g = (a1 * m1.emissive.g + a2 * m2.emissive.g + a3 * m3.emissive.g) / denum;\r\n        this.emissive.b = (a1 * m1.emissive.b + a2 * m2.emissive.b + a3 * m3.emissive.b) / denum;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *  Perform a weighted mean over several materials and set to this.\r\n     *  Note that m_arr.length must equals v_arr.length\r\n     *  @param {Array.<!Material>} m_arr Array of materials\r\n     *  @param {Array.<number>|Float32Array} v_arr Array of values being the corresponding weights\r\n     *  @param {number=} n Can be set if you want to mean only the n first element of the arrays\r\n     */\r\n    weightedMean (m_arr, v_arr, n) {\r\n        this.color.setRGB(0, 0, 0);\r\n        this.roughness = 0;\r\n        this.metalness = 0;\r\n        this.emissive.setScalar(0);\r\n        const l = (n === undefined) ? m_arr.length : n;\r\n        let sum_v = 0.0;\r\n\r\n        for (let i = 0; i < l; ++i) {\r\n\r\n            this.color.r += v_arr[i] * m_arr[i].color.r;\r\n            this.color.g += v_arr[i] * m_arr[i].color.g;\r\n            this.color.b += v_arr[i] * m_arr[i].color.b;\r\n            this.roughness += v_arr[i] * m_arr[i].roughness;\r\n            this.metalness += v_arr[i] * m_arr[i].metalness;\r\n            this.emissive.r += v_arr[i] * m_arr[i].emissive.r;\r\n            this.emissive.g += v_arr[i] * m_arr[i].emissive.g;\r\n            this.emissive.b += v_arr[i] * m_arr[i].emissive.b;\r\n            sum_v += v_arr[i];\r\n\r\n        }\r\n\r\n        if (sum_v !== 0) {\r\n            this.color.r /= sum_v;\r\n            this.color.g /= sum_v;\r\n            this.color.b /= sum_v;\r\n            this.roughness /= sum_v;\r\n            this.metalness /= sum_v;\r\n            this.emissive.r /= sum_v;\r\n            this.emissive.g /= sum_v;\r\n            this.emissive.b /= sum_v;\r\n        } else {\r\n            this.color.setScalar(0);\r\n            this.roughness = 0;\r\n            this.metalness = 0;\r\n            this.emissive.setScalar(0);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Material;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\"use strict\";\r\n\r\nconst THREE = require(\"three\");\r\nconst Types = require(\"./Types.js\");\r\nconst Node = require(\"./Node.js\");\r\nconst Material = require(\"./Material.js\");\r\n\r\n/** @typedef {import('./Element.js').Json} Json */\r\n/** @typedef {import('./Element.js').ValueResultType} ValueResultType */\r\n/** @typedef {import('./Node.js').NodeJSON} NodeJSON */\r\n\r\n/**\r\n * @typedef {{ricci_n:number} & NodeJSON} RicciNodeJSON\r\n */\r\n\r\n/**\r\n *  This class implement a n-ary blend node which use a Ricci Blend.\r\n *  Ricci blend is : v = k-root( Sum(c.value^k) ) for all c in node children.\r\n *  Return 0 in regioin were no primitive is present.\r\n *  @constructor\r\n *  @extends Node\r\n */\r\nclass RicciNode extends Node {\r\n\r\n    static type = \"RicciNode\";\r\n\r\n    /**\r\n     *  @param {number} ricci_n The value for ricci\r\n     *  @param {Array<Node>=} children The children to add to this node. Just a convenient parameter, you can do it manually using addChild\r\n     */\r\n    constructor(ricci_n, children) {\r\n        super();\r\n\r\n        /** @type {number} */\r\n        this.ricci_n = ricci_n;\r\n\r\n        if (children) {\r\n            let self = this;\r\n            children.forEach(function (c) {\r\n                self.addChild(c);\r\n            });\r\n        }\r\n\r\n        // Tmp vars to speed up computation (no reallocations)\r\n        /** @type {Float32Array} */\r\n        this.tmp_v_arr = new Float32Array(0);\r\n        /** @type {Array<Material>} */\r\n        this.tmp_m_arr = [];\r\n\r\n        // temp vars to speed up evaluation by avoiding allocations\r\n        /** @type {{v:number, g: THREE.Vector3, m:Material}} */\r\n        this.tmp_res = { v: 0, g: null, m: null };\r\n        /** @type {THREE.Vector3} */\r\n        this.tmp_g = new THREE.Vector3();\r\n        /** @type {Material} */\r\n        this.tmp_m = new Material();\r\n    }\r\n\r\n    /**\r\n     * @link Node.getType\r\n     * @returns {string}\r\n     */\r\n    getType() {\r\n        return RicciNode.type;\r\n    };\r\n\r\n    /**\r\n     * @link Node.toJSON\r\n     * @returns {RicciNodeJSON}\r\n     */\r\n    toJSON() {\r\n        let res = {\r\n            ...super.toJSON(),\r\n            ricci_n: this.ricci_n\r\n        };\r\n\r\n        return res;\r\n    };\r\n\r\n    /**\r\n     * @link Node.fromJSON\r\n     * @param {Json} json\r\n     * @returns\r\n     */\r\n    static fromJSON(json) {\r\n        let res = new RicciNode(json.ricci);\r\n        for (let i = 0; i < json.children.length; ++i) {\r\n            res.addChild(Types.fromJSON(json.children[i]));\r\n        }\r\n        return res;\r\n    };\r\n\r\n    /**\r\n     * @link Node.prepareForEval\r\n     */\r\n    prepareForEval() {\r\n        if (!this.valid_aabb) {\r\n            this.aabb = new THREE.Box3();  // Create empty BBox\r\n            for (let i = 0; i < this.children.length; ++i) {\r\n                let c = this.children[i];\r\n                c.prepareForEval();\r\n                this.aabb.union(c.getAABB());     // new aabb is computed according to remaining children aabb\r\n            }\r\n\r\n            this.valid_aabb = true;\r\n\r\n            // Prepare tmp arrays\r\n            if (this.tmp_v_arr.length < this.children.length) {\r\n                this.tmp_v_arr = new Float32Array(this.children.length * 2);\r\n                this.tmp_m_arr.length = this.children.length * 2;\r\n                for (let i = 0; i < this.tmp_m_arr.length; ++i) {\r\n                    this.tmp_m_arr[i] = new Material({ roughness: 0, metalness: 0 });\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @link Element.value for a complete description\r\n     *\r\n     *  @param {THREE.Vector3} p\r\n     *  @param {ValueResultType} res\r\n     */\r\n    value(p, res) {\r\n        // TODO : check that all bounding box of all children and subchildrens are valid\r\n        //        This enable not to do it in prim and limit the number of assert call (and string built)\r\n        let l = this.children.length;\r\n        let tmp = this.tmp_res;\r\n        tmp.g = res.g ? this.tmp_g : null;\r\n        tmp.m = res.m ? this.tmp_m : null;\r\n\r\n        // Init res\r\n        res.v = 0;\r\n        if (res.m) {\r\n            res.m.copy(Material.defaultMaterial);\r\n        } if (res.g) {\r\n            res.g.set(0, 0, 0);\r\n        } else if (res.step !== undefined) {\r\n            // that, is the max distance\r\n            // we want a value that loose any 'min'\r\n            res.step = 1000000000;\r\n        }\r\n\r\n        if (this.aabb.containsPoint(p) && l !== 0) {\r\n            // arrays used for material mean\r\n            let v_arr = this.tmp_v_arr;\r\n            let m_arr = this.tmp_m_arr;\r\n            let mv_arr_n = 0;\r\n\r\n            // tmp let to compute the powered sum before the n-root\r\n            // Kept for gradient computation\r\n            let res_vv = 0;\r\n            for (let i = 0; i < l; ++i) {\r\n                if (this.children[i].aabb.containsPoint(p)) {\r\n\r\n                    this.children[i].value(p, tmp);\r\n                    if (tmp.v > 0) // actually just !=0 should be enough but for stability reason...\r\n                    {\r\n                        let v_pow = Math.pow(tmp.v, this.ricci_n - 1.0);\r\n                        res_vv += tmp.v * v_pow;\r\n\r\n                        // gradient if needed\r\n                        if (res.g) {\r\n                            tmp.g.multiplyScalar(v_pow);\r\n                            res.g.add(tmp.g);\r\n                        }\r\n                        // material if needed\r\n                        if (res.m) {\r\n                            v_arr[mv_arr_n] = tmp.v * v_pow;\r\n                            m_arr[mv_arr_n].copy(tmp.m);\r\n                            mv_arr_n++;\r\n                        }\r\n                        // within primitive potential\r\n                        if (res.step || res.stepOrtho) {\r\n                            // we have to compute next step or nextStep z\r\n                            res.step = Math.min(res.step, this.children[i].heuristicStepWithin());\r\n                        }\r\n\r\n                    }\r\n                    // outside of the potential for this box, but within the box\r\n                    else {\r\n                        if (res.step !== undefined) {\r\n                            res.step = Math.min(res.step,\r\n                                this.children[i].distanceTo(p));\r\n                        }\r\n\r\n                    }\r\n                }\r\n                else if (res.step || res.stepOrtho) {\r\n                    res.step = Math.min(res.step,\r\n                        this.children[i].distanceTo(p));\r\n                }\r\n            }\r\n\r\n            // compute final result using ricci power function\r\n            res.v = Math.pow(res_vv, 1 / this.ricci_n);\r\n\r\n            if (res.v !== 0) {\r\n                if (res.g) {\r\n                    res.g.multiplyScalar(res.v / res_vv);\r\n                }\r\n                if (res.m) {\r\n                    res.m.weightedMean(m_arr, v_arr, mv_arr_n);\r\n                }\r\n            }\r\n            // else the default values should be OK.\r\n        } else if (res.step !== undefined) {\r\n            if (this.children.length !== 0) {\r\n                let add = this.children[0].heuristicStepWithin();\r\n                for (let i = 1; i < this.children.length; ++i) {\r\n                    add = Math.min(add, this.children[i].heuristicStepWithin());\r\n                }\r\n                // return distance to aabb such that next time we'll hit from within the aabbb\r\n                res.step = this.aabb.distanceToPoint(p) + add;\r\n            }\r\n        }\r\n\r\n        if (res.stepOrtho !== undefined) {\r\n            res.stepOrtho = res.step;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {number} n\r\n     */\r\n    setRicciN (n) {\r\n        if (this.ricci_n != n) {\r\n            this.ricci_n = n;\r\n            this.invalidAABB();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    getRicciN = function () {\r\n        return this.ricci_n;\r\n    };\r\n\r\n};\r\n\r\nTypes.register(RicciNode.type, RicciNode);\r\n\r\nmodule.exports = RicciNode;\r\n","/**\r\n * @author Maxime Quiblier\r\n *\r\n */\r\n\r\n'use strict';\r\n\r\nconst THREE = require(\"three\");\r\n\r\n// Types\r\n// eslint-disable-next-line\r\nconst BlobtreeElement = require(\"../blobtree/Element.js\");\r\n// eslint-disable-next-line\r\nconst Material = require(\"../blobtree/Material.js\");\r\n\r\nconst Convergence = {};\r\n\r\n// Limitations: 3D only, but can easily be rewritten for nD\r\n// The algorithm stops when :\r\n// - 2 consecutive steps are smaller than epsilon\r\n// - OR n_max_step is reached\r\n// Optimization roads :\r\n//      - 2 small steps may be too much, only 1 could be enough in most cases isn't it?\r\n// @todo write documentation to talk about failure cases.\r\n//\r\n// Variable used in function. This avoid reallocation.\r\n    Convergence.last_mov_pt = new THREE.Vector3();\r\n    Convergence.grad = new THREE.Vector3();\r\n    Convergence.eval_res_g = new THREE.Vector3(0, 0, 0);\r\n    /** @type {{v:number, m:Material, g:THREE.Vector3}} */\r\n    Convergence.eval_res = {v:0, m:null, g:null};\r\n    Convergence.vec = new THREE.Vector3();\r\n\r\n/**\r\n * @param {BlobtreeElement} pot\r\n * @param {THREE.Vector3} starting_point\r\n * @param {number} value\r\n * @param {number} epsilon\r\n * @param {number} n_max_step\r\n * @param {number} r_max\r\n * @param {THREE.Vector3} res\r\n * @returns\r\n */\r\nConvergence.safeNewton3D = function(    pot,              // Scalar Field to eval\r\n                                        starting_point,   // 3D point where we start, must comply to THREE.Vector3 API\r\n                                        value,            // iso value we are looking for\r\n                                        epsilon,          // Geometrical limit to stop\r\n                                        n_max_step,       // limit of number of step\r\n                                        r_max,            // max distance where we look for the iso\r\n                                        //bounding_v,       // Bounding volume inside which we look for the iso, getting out will make the process stop.\r\n                                        res               // the resulting point\r\n                                        )\r\n{\r\n        res.copy(starting_point);\r\n\r\n        var i = 1;\r\n        var consecutive_small_steps = 0;\r\n        var broken = false;\r\n        while( consecutive_small_steps != 2 && i<=n_max_step && !broken)\r\n        {\r\n            this.last_mov_pt.copy(res);\r\n\r\n            this.eval_res.g = this.eval_res_g; // active gradient computation\r\n            pot.value(res,this.eval_res) ;\r\n\r\n            this.grad.copy(this.eval_res.g);\r\n            if(this.grad.x !== 0.0 || this.grad.y !== 0.0 || this.grad.z !== 0.0 )\r\n            {\r\n                var g_l = this.grad.length();\r\n                var step = (value-this.eval_res.v)/g_l;\r\n                if(step < epsilon && step > -epsilon)\r\n                {\r\n                    if(step>0.0)\r\n                    {\r\n                        step = epsilon/g_l;\r\n                    }\r\n                    else\r\n                    {\r\n                        step = -epsilon/g_l;\r\n                    }\r\n                    consecutive_small_steps++;\r\n                }\r\n                else\r\n                {\r\n                    consecutive_small_steps = 0;\r\n                }\r\n                this.grad.normalize().multiplyScalar(step);\r\n                res.add(this.grad);\r\n\r\n                // If the newton step took us out of the bounding volume, we have to stop\r\n                //if(!bounding_v.containsPoint(res))\r\n                if( this.vec.subVectors(res,starting_point).lengthSq() > r_max*r_max)\r\n                {\r\n                    res.copy(starting_point);\r\n                    return;\r\n                }\r\n\r\n                /*\r\n                if( this.vec.subVectors(res,starting_point).lengthSq() > r_max*r_max)\r\n                {\r\n                    this.eval_res.g = null; // deactive gradient computation\r\n                    var current_val = this.eval_res.v;\r\n                    pot.value(res,this.eval_res);\r\n                    if( (this.eval_res.v-value)*(current_val-value) < 0.0)   // can only use dichotomy if one point is inside and one outside among (res and last_mov_pt)\r\n                    {\r\n                        res.add(this.last_mov_pt);\r\n                        res.multiplyScalar(0.5);\r\n                    }\r\n                    else\r\n                    {\r\n                        // In this case we have no clue what to do, so just break...\r\n                        broken = true;\r\n                    }\r\n                }\r\n                */\r\n            }\r\n            else\r\n            {\r\n                broken = true;\r\n            }\r\n\r\n            ++i;\r\n        }\r\n\r\n        if(broken){\r\n            // return strating_point\r\n            res.copy(starting_point);\r\n            return;\r\n        }\r\n\r\n        /*\r\n        if(broken){\r\n\r\n            this.eval_res.g = null; // deactive gradient computation\r\n\r\n            // Check the point between last_moving_point and starting_point which is closest to the surface and return it.\r\n            pot.value(this.last_mov_pt,this.eval_res);\r\n            var ev_last_mov_pt = this.eval_res.v;\r\n            pot.value(starting_point,this.eval_res);\r\n            var ev_st_pt = this.eval_res.v;\r\n            if( Math.abs(ev_last_mov_pt-value) > Math.abs(starting_point-value) )\r\n            {\r\n                res.copy(starting_point);\r\n                return;\r\n            }\r\n            else\r\n            {\r\n                res.copy(this.last_mov_pt);\r\n                return;\r\n            }\r\n        }\r\n        */\r\n};\r\n\r\n/**\r\n *\r\n * @typedef {Object} safeNewton1DResult\r\n * @property {THREE.Vector3} p\r\n * @property {THREE.Vector3} g\r\n * @property {number} p_absc\r\n *\r\n */\r\n\r\n/** This algorithm uses Newton convergence to find a point epsilon close to\r\n*        a point \"p\" such that the given potential \"pot\" evaluated at \"p\" is \"value\".\r\n*        The search is constrained on line defined by (origin, search_dir), and between bounds\r\n*        defined by min_absc and max_absc which are the abscissae on the line with respect\r\n*        to origin and search_dir. search_dir should be normalized.\r\n*        The starting point is given with an abscissa : origin + starting_point_absc*search_dir\r\n*\r\n*   @param {BlobtreeElement} pot\r\n*   @param {THREE.Vector3} origin Point choosen as origin in the search line frame.\r\n*   @param {THREE.Vector3} search_dir_unit unit vector that, together with origin, defines the searching line. Should be normalized\r\n*   @param {number} min_absc_inside Minimum abscissa on the line : the algorithm will not search for a point below this abscissa.\r\n*   @param {number} max_absc_outside Maximum abscissa on the line : the algorithm will not search for a point above this abscissa.\r\n*   @param {number} starting_point_absc Abscissa of the starting point, with respect to the search dir.\r\n*   @param {number} value The potential value we are looking for on the line with respect to pot.Eval(..)\r\n*   @param {number} epsilon We want the result to be at least epsilon close to the surface with respect to the\r\n*                   distance Vector.norm(), we suppose this norm to be the one associated with the dot product Vector.operator |\r\n*   @param {number} n_max_step Maximum of newton step before giving up.\r\n*\r\n*   @param {safeNewton1DResult} res\r\n*\r\n*\r\n*   @todo write documentation to talk about failure cases.\r\n*   @todo Should not normalise search_dir. Change that here and in all part of code where this is used.\r\n*/\r\nConvergence.safeNewton1D = function(\r\n                                        pot,\r\n                                        origin,\r\n                                        search_dir_unit,\r\n                                        min_absc_inside,\r\n                                        max_absc_outside,\r\n                                        starting_point_absc,\r\n                                        value,\r\n                                        epsilon,\r\n                                        n_max_step,\r\n                                        res // resulting point res.p and gradient res.g (if res.g defined) resulting absc in res.p_absc\r\n                                        )\r\n{\r\n    this.eval_res.g = this.eval_res_g; // active gradient computation\r\n\r\n    if( !(search_dir_unit.x !== 0.0 || search_dir_unit.y !== 0.0 || search_dir_unit.z !== 0.0) ){\r\n        throw \"Error : search direction is null\";\r\n    }\r\n    if(epsilon<=0){\r\n        throw \"Error: epsilon <= 0, convergence will nuke your face or loop\";\r\n    }\r\n    if(starting_point_absc<min_absc_inside || starting_point_absc>max_absc_outside){\r\n        throw \"Error : starting absc is not in boundaries\";\r\n    }\r\n\r\n    var curr_point_absc = starting_point_absc;\r\n    var eval_pt = new THREE.Vector3();\r\n\r\n    // Newton step until we overpass the surface\r\n    // the minimum step is set to epsilon, that ensure we will cross the surface.\r\n    var grad = 0;\r\n    var step = 0;\r\n    var i = 0;\r\n    while( max_absc_outside - min_absc_inside > epsilon && i < n_max_step)\r\n    {\r\n        // curr_point_absc is guaranteed inside [min_absc_inside,max_absc_outside]\r\n        pot.value(  eval_pt.copy(search_dir_unit).multiplyScalar(curr_point_absc).add(origin),\r\n                    this.eval_res) ;\r\n        // update bounding absc\r\n        if(this.eval_res.v > value)\r\n        {\r\n            min_absc_inside = curr_point_absc;\r\n        }\r\n        else\r\n        {\r\n            max_absc_outside = curr_point_absc;\r\n        }\r\n\r\n        // Analytical gradient evaluation + dot product should be less than 2 evaluations in cost.\r\n        grad = this.eval_res.g.dot(search_dir_unit);\r\n        if(grad !== 0.0)\r\n        {\r\n            step = (value-this.eval_res.v)/grad;\r\n            curr_point_absc += step;\r\n\r\n            // Dichotomy step\r\n            if(curr_point_absc >= max_absc_outside || curr_point_absc <= min_absc_inside)\r\n            {\r\n                curr_point_absc = (max_absc_outside+min_absc_inside)*0.5;\r\n            }\r\n\r\n        }\r\n        else\r\n        {\r\n            // Dichotomy step\r\n            curr_point_absc = (max_absc_outside+min_absc_inside)*0.5;\r\n        }\r\n\r\n        ++i;\r\n    }\r\n\r\n    res.p_absc = (max_absc_outside+min_absc_inside)*0.5; // approximate\r\n    res.p.copy(search_dir_unit).multiplyScalar(curr_point_absc).add(origin);\r\n    if(res.g !== undefined){\r\n        if(i===0){\r\n            pot.value(  res.p,\r\n                        this.eval_res) ;\r\n        }\r\n        res.g.copy(this.eval_res.g);\r\n    }\r\n};\r\n\r\nConvergence.dichotomy1D = function(\r\n                                        pot,\r\n                                        origin,\r\n                                        search_dir_unit,\r\n                                        startStepLength,\r\n                                        value,\r\n                                        epsilon,\r\n                                        n_max_step, // TODO : Useless, since dichotomia is absolutely determinist, n step is startStepLength/(2^n) accuracy...\r\n                                                    //        OR epsilon is the one useless...\r\n                                        res // resulting point res.p and gradient res.g (if res.g defined) resulting absc in res.p_absc\r\n                                        )\r\n{\r\n\r\n    this.eval_res.g = null; // deactive gradient computation\r\n\r\n    var previousPos = new THREE.Vector3().copy(origin);\r\n    var currentStep = new THREE.Vector3();\r\n    // intersection\r\n    // dichotomia: first step is going back half of the previous distance\r\n    startStepLength /= 2;\r\n    var dist = -startStepLength;\r\n    var previousDist = dist;\r\n    origin.sub(\r\n        currentStep.copy(search_dir_unit)\r\n            .multiplyScalar(startStepLength));\r\n    var nstep = 0;\r\n    while((startStepLength > epsilon) && (nstep < n_max_step))\r\n    {\r\n        nstep++;\r\n        previousPos.copy(origin);\r\n        previousDist=dist;\r\n\r\n        startStepLength/=2;\r\n        // not asking for the next step, which is always half of previous\r\n        pot.value(\r\n            origin,\r\n            this.eval_res);\r\n\r\n        if (this.eval_res.v < value)\r\n        {\r\n            // before the surface: go forward\r\n            origin.add(\r\n                currentStep.copy(search_dir_unit)\r\n                    .multiplyScalar(startStepLength));\r\n            dist+=startStepLength;\r\n        }\r\n        else\r\n        {\r\n            // after the surface: go backward\r\n            origin.sub(\r\n                currentStep.copy(search_dir_unit)\r\n                    .multiplyScalar(startStepLength));\r\n            dist-=startStepLength;\r\n        }\r\n    }\r\n    // linear interpolation with previous pos\r\n    res.p.copy(origin.add(previousPos).divideScalar(2));\r\n    res.p_absc = (previousDist + dist)/2;\r\n\r\n    // linear interpolation with previous pos\r\n    res.p.copy(origin);\r\n    res.p_absc = dist;\r\n\r\n    // test wether the caller wanted to compute the gradient\r\n    // (we assume that if res.g is defined, it's a request)\r\n    if (res.g)\r\n    {\r\n        this.eval_res.g = this.eval_res_g; // active gradient computation\r\n        pot.value(\r\n            res.p,\r\n            this.eval_res);\r\n        res.g.copy(this.eval_res.g);\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Convergence;\r\n","\"use strict\";\r\n\r\nconst THREE = require(\"three\");\r\nconst Types = require(\"./Types.js\");\r\nconst RicciNode = require(\"./RicciNode.js\");\r\n\r\nconst Convergence = require(\"../utils/Convergence\");\r\n\r\n/** @typedef {import('./Element')} Element */\r\n/** @typedef {import('./Node')} Node */\r\n/** @typedef {import('./Material')} Material */\r\n/** @typedef {import('./Element.js').Json} Json */\r\n/** @typedef {import('./Element.js').ValueResultType} ValueResultType */\r\n/** @typedef {import('./RicciNode').RicciNodeJSON} RicciNodeJSON */\r\n\r\n/**\r\n * @typedef {{iso:number} & RicciNodeJSON} RootNodeJSON\r\n */\r\n\r\n\r\n/**\r\n * @typedef {Object} IntersectionResult The result of the intersection\r\n * @property {number=} distance distance from ray.origin to intersection point,\r\n * @property {THREE.Vector3} point: intersection point,\r\n * @property {THREE.Vector3} g: gradient at intersection, if required.\r\n */\r\n\r\n/**\r\n *  The root of any implicit blobtree. Does behave computationaly like a RicciNode with n = 64.\r\n *  The RootNode is the only node to be its own parent.\r\n *  @constructor\r\n *  @extends RicciNode\r\n */\r\nclass RootNode extends RicciNode {\r\n\r\n    static type = \"RootNode\";\r\n\r\n    /**\r\n     * @param {RootNodeJSON} json\r\n     * @returns {RootNode}\r\n     */\r\n    static fromJSON(json) {\r\n        var res = new RootNode();\r\n        for (var i = 0; i < json.children.length; ++i) {\r\n            res.addChild(Types.fromJSON(json.children[i]));\r\n        }\r\n        return res;\r\n    };\r\n\r\n    constructor() {\r\n        // Default RootNode is a riccinode with ricci_n = 64 (almost a max)\r\n        super(64);\r\n\r\n        this.valid_aabb = true;\r\n\r\n        // Default iso value, value where the surface is present\r\n        /** @type {number} */\r\n        this.iso_value = 1.0;\r\n\r\n        // Set some nodes as \"trimmed\", so they are not evaluated.\r\n        /** @type {Array<Element>} */\r\n        this.trimmed = [];\r\n        /** @type {Array<Node>} */\r\n        this.trim_parents = [];\r\n    }\r\n\r\n    /**\r\n     * @link Node.getType\r\n     * @returns {string}\r\n     */\r\n    getType() {\r\n        return RootNode.type;\r\n    };\r\n\r\n    /**\r\n     * @link RicciNode.toJSON\r\n     * @returns {RootNodeJSON}\r\n     */\r\n    toJSON() {\r\n        var res = {\r\n            ...super.toJSON(),\r\n            iso: this.iso_value\r\n        };\r\n        return res;\r\n    };\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    getIsoValue() {\r\n        return this.iso_value;\r\n    };\r\n    /**\r\n     * @param {number} v\r\n     */\r\n    setIsoValue(v) {\r\n        this.iso_value = v;\r\n    };\r\n\r\n    /**\r\n     *  @return {number} The neutral value of this tree, ie the value of the field in empty region of space.\r\n     *                   This is an API for external use and future development. For now it is hard set to 0.\r\n     */\r\n    getNeutralValue() {\r\n        return 0;\r\n    };\r\n\r\n    /**\r\n     * @link Node.invalidAABB for a complete description\r\n     */\r\n    invalidAABB() {\r\n        this.valid_aabb = false;\r\n    };\r\n\r\n    /**\r\n     *  Basically perform a trim but keep track of trimmed elements.\r\n     *  This is usefull if you want to trim, then untrim, then trim, etc...\r\n     *  For example, this is very useful for evaluation optim\r\n     *  @param {THREE.Box3} aabb\r\n     */\r\n    internalTrim(aabb) {\r\n        if (!(this.trimmed.length === 0 && this.trim_parents.length === 0)) {\r\n            throw \"Error : you should not call internal trim if you have not untrimmed before. Call untrim or use externalTrim\";\r\n        }\r\n        this.trim(aabb, this.trimmed, this.trim_parents);\r\n    };\r\n\r\n    /**\r\n     *  Wrapper for trim, will help programmers to make the difference between\r\n     *  internal and external trim.\r\n     *  @param {THREE.Box3} aabb\r\n     *  @param {Array.<Element>} trimmed Array of trimmed Elements\r\n     *  @param {Array.<Node>} parents Array of fathers from which each trimmed element has been removed.\r\n     */\r\n    externalTrim(aabb, trimmed, parents) {\r\n        this.trim(aabb, trimmed, parents);\r\n    };\r\n\r\n    /**\r\n     *  Reset the full blobtree\r\n     */\r\n    internalUntrim() {\r\n        this.untrim(this.trimmed, this.trim_parents);\r\n        this.trimmed.length = 0;\r\n        this.trim_parents.length = 0;\r\n    };\r\n\r\n    /**\r\n     *  Reset the full blobtree given previous trimming data.\r\n     *  Note : don't forget to recall prepareForEval if you want to perform evaluation.\r\n     *  @param {Array.<Element>} trimmed Array of trimmed Elements\r\n     *  @param {Array.<Node>} parents Array of fathers from which each trimmed element has been removed.\r\n     */\r\n    untrim(trimmed, parents) {\r\n        if (!(trimmed.length === parents.length)) {\r\n            throw \"Error : trimmed and parents arrays should have the same length\";\r\n        }\r\n        for (var i = 0; i < trimmed.length; ++i) {\r\n            parents[i].addChild(trimmed[i]);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  Tell if the blobtree is empty\r\n     *  @return true if blobtree is empty\r\n     */\r\n    isEmpty = function () {\r\n        return this.children.length == 0;\r\n    };\r\n\r\n\r\n    intersectRayBlob = function () {\r\n        var curPos = new THREE.Vector3();\r\n        var marchingVector = new THREE.Vector3();\r\n        var currentStep = new THREE.Vector3();\r\n\r\n        /** @type {ValueResultType} */\r\n        var tmp_res = {\r\n            v: 0,\r\n            g: new THREE.Vector3(),\r\n            step: 0\r\n        };\r\n        var conv_res = {\r\n            p: new THREE.Vector3(),\r\n            g: new THREE.Vector3(),\r\n            p_absc: 0.0\r\n        };\r\n        var previousStepLength = 0;\r\n        var previousValue = 0; // used for linear interp for a better guess\r\n        var dist = 0;\r\n        /**\r\n         * @this RootNode\r\n         *  @param {!THREE.Ray} ray Ray to cast for which intersection is seeked.\r\n         *\r\n         *  @param {IntersectionResult} res\r\n         *  @param {number} maxDistance If the intersection is not located at a distance\r\n         *                              lower than maxDistance, it will not be considered.\r\n         *                              The smaller this is, the faster the casting will be.\r\n         *  @param {number} _precision Distance to the intersection under which we will\r\n         *                            consider to be on the intersection point.\r\n         *\r\n         *  @return {boolean} True if an intersection has been found.\r\n         */\r\n        return function (ray, res, maxDistance, _precision) {\r\n            curPos.copy(ray.origin);\r\n            marchingVector.copy(ray.direction);\r\n\r\n            marchingVector.normalize();\r\n            dist = 0;\r\n            // compute first value to have next step length\r\n            tmp_res.g = null;\r\n            this.value(curPos, tmp_res);\r\n\r\n            // march\r\n            while ((tmp_res.v < this.iso_value) && (dist < maxDistance)) {\r\n                curPos.add(\r\n                    currentStep.copy(marchingVector).multiplyScalar(tmp_res.step)\r\n                );\r\n                dist += tmp_res.step;\r\n\r\n                previousStepLength = tmp_res.step;\r\n                previousValue = tmp_res.v;\r\n\r\n                this.value(\r\n                    curPos,\r\n                    tmp_res);\r\n            }\r\n            if (tmp_res.v >= this.iso_value) {\r\n                // Convergence.dichotomy1D(\r\n                // this,\r\n                // curPos,\r\n                // marchingVector,\r\n                // previousStepLength,\r\n                // iso_value,\r\n                // previousStepLength/512.0,\r\n                // 10,\r\n                // conv_res\r\n                // );\r\n                // res.distance = dist + conv_res.absc;\r\n\r\n                Convergence.safeNewton1D(\r\n                    this,\r\n                    curPos,\r\n                    marchingVector.multiplyScalar(-1.0),\r\n                    0.0,\r\n                    previousStepLength,\r\n                    previousStepLength * (this.iso_value - tmp_res.v) / (previousValue - tmp_res.v), // linear approx of the first position\r\n                    this.iso_value,\r\n                    previousStepLength / 512.0, //deltaPix*(dist-previousStepLength), // should be the size of a pixel at the previous curPos BROKEN?\r\n                    10,\r\n                    conv_res\r\n                );\r\n                res.distance = dist - conv_res.p_absc;\r\n\r\n                res.point = conv_res.p.clone();\r\n\r\n                // test wether the caller wanted to compute the gradient\r\n                // (we assume that if res.g is defined, it's a request)\r\n                if (res.g) {\r\n                    res.g.copy(conv_res.g);\r\n                }\r\n\r\n                return true;\r\n            }\r\n            else {\r\n                // no intersection\r\n                return false;\r\n            }\r\n        };\r\n    }();\r\n\r\n\r\n    /**\r\n     *  Kaiser function for some intersection and raycasting...\r\n     *  Undocumented.\r\n     *  TODO : check, it is probably an optimized intersection for blob intersection\r\n     *         in X, Y or Z directions.\r\n     */\r\n    intersectOrthoRayBlob = function () {\r\n        // curpos and marching vector are only instanciated once,\r\n        // we are using closure method\r\n        var curPos = new THREE.Vector3();\r\n        var resumePos = new THREE.Vector3();\r\n        /** @type {ValueResultType} */\r\n        var tmp_res = {\r\n            v: 0,\r\n            step: 0\r\n        };\r\n        var g = new THREE.Vector3();\r\n        /** @type {ValueResultType} */\r\n        var dicho_res = {\r\n            v: 0\r\n        };\r\n        var previousStepLength = 0;\r\n        var previousDist = 0;\r\n        // to ensure that we're within the aabb\r\n        var epsilon = 0.0000001;\r\n        var within = -1;\r\n        /**\r\n         * @this {RootNode}\r\n         * @param {number} wOffset\r\n         * @param {number} hOffset\r\n         * @param {Array<IntersectionResult>} res\r\n         * @param {Object} dim ???\r\n         */\r\n        return function (wOffset, hOffset, res, dim) {\r\n\r\n            if (dim.axis.x) {\r\n                curPos.set(this.aabb.min.x + wOffset,\r\n                    this.aabb.min.y + hOffset,\r\n                    this.aabb.min.z + epsilon);\r\n            } else if (dim.axis.y) {\r\n                curPos.set(this.aabb.min.x + wOffset,\r\n                    this.aabb.min.y + epsilon,\r\n                    this.aabb.min.z + hOffset);\r\n            } else if (dim.axis.z) {\r\n                curPos.set(this.aabb.min.x + epsilon,\r\n                    this.aabb.min.y + wOffset,\r\n                    this.aabb.min.z + hOffset);\r\n            }\r\n\r\n            // max depth step we can do (has to be set)\r\n            tmp_res.step = dim.get(this.aabb.max) - dim.get(this.aabb.min);\r\n\r\n            this.value(curPos, tmp_res);\r\n\r\n            previousStepLength = epsilon;\r\n\r\n            within = -1;\r\n\r\n            // we're looking for all intersection, we won't stop before that\r\n            while (dim.get(curPos) < dim.get(this.aabb.max)) {\r\n                // march\r\n                // the '=0' case is important, otherwise there's an infinite loop\r\n                while (((tmp_res.v - 1) * within >= 0) && (dim.get(curPos) < dim.get(this.aabb.max))) {\r\n                    // orthographic march\r\n                    // our tmp_res.step is valid as we know it's within the aabb\r\n                    dim.add(curPos, tmp_res.step);\r\n\r\n                    previousStepLength = tmp_res.step;\r\n\r\n                    // max depth step we can do (has to be set)\r\n                    tmp_res.step = dim.get(this.aabb.max) - dim.get(curPos);\r\n                    this.value(\r\n                        curPos,\r\n                        tmp_res);\r\n                }\r\n                // either a sign difference or we're out\r\n                if (dim.get(curPos) < dim.get(this.aabb.max)) {\r\n                    // we ain't out, so it was a sign difference\r\n                    within *= -1;\r\n                    // keep track of our current position in order to resume marching later\r\n                    resumePos.copy(curPos);\r\n                    previousDist = dim.get(curPos);\r\n\r\n                    // compute intersection\r\n                    // dichotomia: first step is going back half of the previous distance\r\n                    previousStepLength /= 2;\r\n\r\n                    dim.add(curPos, -previousStepLength);\r\n\r\n                    // we use dicho_res instead of tmp_res because we need\r\n                    // to keep track of previous results in order to resume later\r\n\r\n                    // dynamic number of dichotomia step\r\n                    dicho_res.g = null;\r\n                    while (previousStepLength > 0.1) {\r\n                        previousDist = dim.get(curPos);\r\n                        previousStepLength /= 2;\r\n                        // not asking for the next step, which is always half of previous\r\n                        this.value(curPos, dicho_res);\r\n\r\n                        if ((dicho_res.v - 1) * within < 0)\r\n                            // forward\r\n                            dim.add(curPos, previousStepLength);\r\n                        else\r\n                            // backward\r\n                            dim.add(curPos, -previousStepLength);\r\n                    }\r\n                    // linear interpolation with previous dist\r\n                    dim.add(curPos, previousDist);\r\n                    dim.divide(curPos, 2);\r\n                    // get the gradient\r\n                    dicho_res.g = g;\r\n                    this.value(curPos, dicho_res);\r\n                    res.push({\r\n                        point: curPos.clone(),\r\n                        g: dicho_res.g.clone()\r\n                    });\r\n                    // set variable in order to resume to where we were\r\n                    curPos.copy(resumePos);\r\n                }\r\n            }\r\n        };\r\n    }();\r\n\r\n};\r\n\r\nTypes.register(RootNode.type, RootNode);\r\n\r\nmodule.exports = RootNode;\r\n","\"use strict\";\r\n\r\nconst THREE = require(\"three\");\r\nconst Types = require(\"./Types.js\");\r\nconst Node = require(\"./Node.js\");\r\nconst Material = require(\"./Material.js\");\r\n\r\n/**\r\n * @typedef {import('./Element.js')} Element\r\n * @typedef {import('./Element.js').Json} Json\r\n * @typedef {import('./Node.js').NodeJSON} NodeJSON\r\n */\r\n\r\n/**\r\n * @typedef {{alpha:number} & NodeJSON} DifferenceNodeJSON\r\n */\r\n\r\n\r\n/**\r\n *  This class implement a difference blending node.\r\n *  The scalar field of the second child of this node will be substracted to the first node field.\r\n *  The result is clamped to 0 to always keep a positive field value.\r\n *  @constructor\r\n *  @extends Node\r\n */\r\nclass DifferenceNode extends Node {\r\n\r\n    static type = \"DifferenceNode\";\r\n\r\n    /**\r\n     * @param {DifferenceNodeJSON} json\r\n     * @returns {DifferenceNode}\r\n     */\r\n    static fromJSON(json) {\r\n        return new DifferenceNode(Types.fromJSON(json.children[0]), Types.fromJSON(json.children[1]), json.alpha);\r\n    };\r\n\r\n    /**\r\n     *\r\n     *  @param {!Node} node0 The first node\r\n     *  @param {!Node} node1 The second node, its value will be substracted to the node 0 value.\r\n     *  @param {number} alpha Power of the second field : the greater alpha the sharper the difference. Default is 1, must be > 1.\r\n     */\r\n    constructor(node0, node1, alpha){\r\n        super();\r\n        this.addChild(node0);\r\n        this.addChild(node1)\r\n\r\n        /** @type {number} */\r\n        this.alpha = alpha || 1;\r\n\r\n        /**\r\n         * For now, this field value is clamped to 0\r\n         * @type {number}\r\n         */\r\n        this.clamped = 0.0;\r\n\r\n        // Tmp vars to speed up computation (no reallocations)\r\n        /** @type {{v:number, g:THREE.Vector3, m:Material}} */\r\n        this.tmp_res0 = { v: 0, g: new THREE.Vector3(0, 0, 0), m: new Material() };\r\n\r\n        /** @type {{v:number, g:THREE.Vector3, m:Material}} */\r\n        this.tmp_res1 = { v: 0, g: new THREE.Vector3(0, 0, 0), m: new Material() };\r\n\r\n        /** @type {THREE.Vector3} */\r\n        this.g0 = new THREE.Vector3();\r\n        /** @type {Material} */\r\n        this.m0 = new Material();\r\n        /** @type {THREE.Vector3} */\r\n        this.g1 = new THREE.Vector3();\r\n        /** @type {Material} */\r\n        this.m1 = new Material();\r\n\r\n        /** @type {Float32Array} */\r\n        this.tmp_v_arr = new Float32Array(2);\r\n        /** @type {Array<Material|null>} */\r\n        this.tmp_m_arr = [\r\n            null,\r\n            null\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * @returns {number}\r\n     */\r\n    getAlpha() {\r\n        return this.alpha;\r\n    };\r\n\r\n    /**\r\n     * @param {number} alpha\r\n     */\r\n    setAlpha(alpha) {\r\n        if (this.alpha != alpha) {\r\n            this.alpha = alpha;\r\n            this.invalidAABB();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @returns {DifferenceNodeJSON}\r\n     */\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            alpha: this.alpha\r\n        };\r\n    };\r\n\r\n    /**\r\n     * @link Node.prepareForEval for a complete description\r\n     **/\r\n    prepareForEval() {\r\n        if (!this.valid_aabb) {\r\n            this.children[0].prepareForEval();\r\n            this.children[1].prepareForEval();\r\n            // Bounding box of this node is the same as the one of the positive children,\r\n            // Since negative values will be clamped to 0.\r\n            this.aabb.copy(this.children[0].getAABB());\r\n\r\n            this.valid_aabb = true;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  Compute the value and/or gradient and/or material\r\n     *  of the element at position p in space. return computations in res (see below)\r\n     *\r\n     *  @param {THREE.Vector3} p Point where we want to evaluate the primitive field\r\n     *  @param {Object} res Computed values will be stored here. Each values should exist and\r\n     *                       be allocated already.\r\n     *  @param {number} res.v Value, must be defined\r\n     *  @param {Material} res.m Material, must be allocated and defined if wanted\r\n     *  @param {THREE.Vector3} res.g Gradient, must be allocated and defined if wanted\r\n     *  @param {number=} res.step The next step we can safely walk without missing the iso (0). Mostly used for convergence function or ray marching.\r\n     *  @param {number=} res.stepOrtho\r\n     */\r\n    value(p, res) {\r\n        var v_arr = this.tmp_v_arr;\r\n        var m_arr = this.tmp_m_arr;\r\n\r\n        var tmp0 = this.tmp_res0;\r\n        var tmp1 = this.tmp_res1;\r\n\r\n        tmp0.g = res.g ? this.g0 : null;\r\n        tmp0.m = res.m ? this.m0 : null;\r\n        tmp1.g = res.g ? this.g1 : null;\r\n        tmp1.m = res.m ? this.m1 : null;\r\n\r\n        // Init res\r\n        res.v = 0;\r\n        tmp1.v = 0;\r\n        tmp0.v = 0;\r\n        if (res.m) {\r\n            res.m.copy(Material.defaultMaterial);\r\n            tmp1.m.copy(Material.defaultMaterial);\r\n            tmp0.m.copy(Material.defaultMaterial);\r\n        } if (res.g) {\r\n            res.g.set(0, 0, 0);\r\n            tmp1.g.set(0, 0, 0);\r\n            tmp0.g.set(0, 0, 0);\r\n        } else if (res.step !== undefined) {\r\n            // that, is the max distance\r\n            // we want a value that loose any 'min'\r\n            res.step = 1000000000;\r\n        }\r\n\r\n        if (this.aabb.containsPoint(p)) {\r\n            if (this.children[0].aabb.containsPoint(p)) {\r\n                this.children[0].value(p, tmp0);\r\n                if (this.children[1].aabb.containsPoint(p)) {\r\n                    this.children[1].value(p, tmp1);\r\n                }\r\n                if (tmp1.v === 0) {\r\n                    res.v = tmp0.v;\r\n                    if (res.g) {\r\n                        res.g.copy(tmp0.g);\r\n                    }\r\n                    if (res.m) {\r\n                        res.m.copy(tmp0.m);\r\n                    }\r\n                } else {\r\n                    var v_pow = Math.pow(tmp1.v, this.alpha);\r\n                    res.v = Math.max(this.clamped, tmp0.v - tmp1.v * Math.pow(tmp1.v, this.alpha - 1.0));\r\n                    if (res.g) {\r\n                        if (res.v === this.clamped) {\r\n                            res.g.set(0, 0, 0);\r\n                        } else {\r\n                            tmp1.g.multiplyScalar(v_pow);\r\n                            res.g.subVectors(tmp0.g, tmp1.g);\r\n                        }\r\n                    }\r\n                    if (res.m) {\r\n                        v_arr[0] = tmp0.v;\r\n                        v_arr[1] = tmp1.v;\r\n                        m_arr[0] = tmp0.m;\r\n                        m_arr[1] = tmp1.m;\r\n                        res.m.weightedMean(m_arr, v_arr, 2);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else if (res.step !== undefined) {\r\n            // return distance to aabb such that next time we'll hit from within the aabbb\r\n            res.step = this.aabb.distanceToPoint(p) + 0.3;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @link Element.trim for a complete description.\r\n     *\r\n     *  Trim must be redefined for DifferenceNode since in this node we cannot trim one of the 2 nodes without trimming the other.\r\n     *\r\n     *  @param {THREE.Box3} aabb\r\n     *  @param {Array.<Element>} trimmed\r\n     *  @param {Array.<Node>} parents\r\n     */\r\n    trim(aabb, trimmed, parents) {\r\n        // Trim remaining nodes\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            this.children[i].trim(aabb, trimmed, parents);\r\n        }\r\n    };\r\n};\r\n\r\nTypes.register(DifferenceNode.type, DifferenceNode);\r\n\r\nmodule.exports = DifferenceNode;\r\n","\"use strict\";\r\n\r\nconst THREE = require(\"three\");\r\nconst Types = require(\"./Types.js\");\r\nconst Node = require(\"./Node.js\");\r\nconst Material = require(\"./Material.js\");\r\n\r\n/** @typedef {import('./Element.js')} Element */\r\n/** @typedef {import('./Element.js').Json} Json */\r\n/** @typedef {import('./Element.js').ValueResultType} ValueResultType */\r\n/** @typedef {import('./Node.js').NodeJSON} NodeJSON */\r\n\r\n/**\r\n * @typedef {NodeJSON} MinNodeJSON\r\n */\r\n\r\n/**\r\n *  This class implement a Min node.\r\n *  It will return the minimum value of the field of each primitive.\r\n *  Return 0 in regioin were no primitive is present.\r\n *  @constructor\r\n *  @extends Node\r\n */\r\nclass MinNode extends Node {\r\n\r\n    static type = \"MinNode\";\r\n\r\n    /**\r\n     *\r\n     * @param {MinNodeJSON} json\r\n     * @returns {MinNode}\r\n     */\r\n    static fromJSON(json) {\r\n        var res = new MinNode();\r\n        for (var i = 0; i < json.children.length; ++i) {\r\n            res.addChild(Types.fromJSON(json.children[i]));\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n    *  @param {Array.<Node>=} children The children to add to this node.Just a convenient parameter, you can do it manually using addChild.\r\n    */\r\n    constructor(children) {\r\n\r\n        super();\r\n\r\n        if (children) {\r\n            var self = this;\r\n            children.forEach(function (c) {\r\n                self.addChild(c);\r\n            });\r\n        }\r\n\r\n        // temp vars to speed up evaluation by avoiding allocations\r\n        /** @type {{v:number, g:THREE.Vector3, m:Material}} */\r\n        this.tmp_res = { v: 0, g: null, m: null };\r\n        /** @type {THREE.Vector3} */\r\n        this.tmp_g = new THREE.Vector3();\r\n        /** @type {Material} */\r\n        this.tmp_m = new Material();\r\n\r\n    }\r\n\r\n    getType () {\r\n        return MinNode.type;\r\n    }\r\n\r\n    /**\r\n     *  @link Element.prepareForEval for a complete description\r\n     */\r\n    prepareForEval () {\r\n        if (!this.valid_aabb) {\r\n            this.aabb = new THREE.Box3();  // Create empty BBox\r\n            for (var i = 0; i < this.children.length; ++i) {\r\n                var c = this.children[i];\r\n                c.prepareForEval();\r\n                this.aabb.union(c.getAABB());     // new aabb is computed according to remaining children aabb\r\n            }\r\n\r\n            this.valid_aabb = true;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @link Element.value for a complete description\r\n     *\r\n     *  @param {THREE.Vector3} p\r\n     *  @param {ValueResultType} res\r\n     */\r\n    value (p, res) {\r\n        // TODO : check that all bounding box of all children and subchildrens are valid\r\n        //        This enable not to do it in prim and limit the number of assert call (and string built)\r\n\r\n        var l = this.children.length;\r\n        var tmp = this.tmp_res;\r\n        tmp.g = res.g ? this.tmp_g : null;\r\n        tmp.m = res.m ? this.tmp_m : null;\r\n\r\n        // Init res\r\n        res.v = 0;\r\n        if (res.m) {\r\n            res.m.copy(Material.defaultMaterial);\r\n        } if (res.g) {\r\n            res.g.set(0, 0, 0);\r\n        } else if (res.step !== undefined) {\r\n            // that, is the max distance\r\n            // we want a value that loose any 'min'\r\n            res.step = 1000000000;\r\n        }\r\n\r\n        if (this.aabb.containsPoint(p) && l !== 0) {\r\n            res.v = Number.MAX_VALUE;\r\n            for (var i = 0; i < l; ++i) {\r\n                this.children[i].value(p, tmp);\r\n                if (tmp.v < res.v) {\r\n                    res.v = tmp.v;\r\n                    if (res.g) {\r\n                        res.g.copy(tmp.g);\r\n                    }\r\n                    if (res.m) {\r\n                        res.m.copy(tmp.m);\r\n                    }\r\n                    // within primitive potential\r\n                    if (res.step || res.stepOrtho) {\r\n                        throw \"Not implemented\";\r\n                    }\r\n                }\r\n                res.v = Math.min(res.v, tmp.v);\r\n            }\r\n        }\r\n        else if (res.step || res.stepOrtho) {\r\n            throw \"Not implemented\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @link Element.trim for a complete description.\r\n     *\r\n     *  @param {THREE.Box3} aabb\r\n     *  @param {Array<Element>} trimmed\r\n     *  @param {Array<Node>} parents\r\n     */\r\n    trim(aabb, trimmed, parents) {\r\n        // Trim remaining nodes\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            this.children[i].trim(aabb, trimmed, parents);\r\n        }\r\n    };\r\n}\r\n\r\nTypes.register(MinNode.type, MinNode);\r\n\r\nmodule.exports = MinNode;\r\n","\"use strict\";\r\n\r\nconst THREE = require(\"three\");\r\nconst Types = require(\"./Types.js\");\r\nconst Node = require(\"./Node.js\");\r\nconst Material = require(\"./Material.js\");\r\n\r\n/** @typedef {import('./Element.js')} Element */\r\n/** @typedef {import('./Element.js').Json} Json */\r\n/** @typedef {import('./Element.js').ValueResultType} ValueResultType */\r\n/** @typedef {import('./Node.js').NodeJSON} NodeJSON */\r\n\r\n/**\r\n * @typedef {NodeJSON} TwistNodeJSON\r\n */\r\n\r\n/**\r\n *  This class implement a TwistNode node.\r\n *  It will return the minimum value of the field of each primitive.\r\n *  Return 0 in regioin were no primitive is present.\r\n *  @constructor\r\n *  @extends Node\r\n */\r\nclass TwistNode extends Node {\r\n\r\n    static type = \"TwistNode\";\r\n\r\n    /**\r\n     *\r\n     * @param {TwistNodeJSON} json\r\n     * @returns {TwistNode}\r\n     */\r\n    static fromJSON(json) {\r\n        var res = new TwistNode();\r\n        for (var i = 0; i < json.children.length; ++i) {\r\n            res.addChild(Types.fromJSON(json.children[i]));\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n    *  @param {Array.<Node>=} children The children to add to this node.Just a convenient parameter, you can do it manually using addChild.\r\n    */\r\n    constructor(children) {\r\n\r\n        super();\r\n\r\n        if (children) {\r\n            var self = this;\r\n            children.forEach(function (c) {\r\n                self.addChild(c);\r\n            });\r\n        }\r\n\r\n        // temp vars to speed up evaluation by avoiding allocations\r\n        /** @type {{v:number, g:THREE.Vector3, m:Material}} */\r\n        this.tmp_res = { v: 0, g: null, m: null };\r\n        /** @type {THREE.Vector3} */\r\n        this.tmp_g = new THREE.Vector3();\r\n        /** @type {Material} */\r\n        this.tmp_m = new Material();\r\n\r\n        this.twist_ampl = 1.0;\r\n        this.twist_axis = new THREE.Vector3(0.0,1.0,0.0); \r\n\r\n    }\r\n\r\n    getType () {\r\n        return TwistNode.type;\r\n    }\r\n\r\n    /**\r\n     *  @link Element.prepareForEval for a complete description\r\n     */\r\n    prepareForEval () {\r\n        if (!this.valid_aabb) {\r\n            this.aabb = new THREE.Box3();  // Create empty BBox\r\n            for (var i = 0; i < this.children.length; ++i) {\r\n                var c = this.children[i];\r\n                c.prepareForEval();\r\n                this.aabb.union(c.getAABB());     // new aabb is computed according to remaining children aabb\r\n            }\r\n\r\n            this.valid_aabb = true;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @link Element.value for a complete description\r\n     *\r\n     *  @param {THREE.Vector3} p\r\n     *  @param {ValueResultType} res\r\n     */\r\n    value (p, res) {\r\n        // TODO : check that all bounding box of all children and subchildrens are valid\r\n        //        This enable not to do it in prim and limit the number of assert call (and string built)\r\n\r\n        var l = this.children.length;\r\n        var tmp = this.tmp_res;\r\n        tmp.g = res.g ? this.tmp_g : null;\r\n        tmp.m = res.m ? this.tmp_m : null;\r\n\r\n        // Init res\r\n        res.v = 0;\r\n        if (res.m) {\r\n            res.m.copy(Material.defaultMaterial);\r\n        } if (res.g) {\r\n            res.g.set(0, 0, 0);\r\n        } else if (res.step !== undefined) {\r\n            // that, is the max distance\r\n            // we want a value that loose any 'min'\r\n            res.step = 1000000000;\r\n        }\r\n\r\n\r\n\r\n        if (this.aabb.containsPoint(p) && l !== 0) {\r\n         \r\n\r\n            let center = new THREE.Vector3();\r\n            this.aabb.getCenter(center);\r\n            let tr_mat = new THREE.Matrix4();\r\n            let r_angle = Math.acos(this.twist_axis.dot(new THREE.Vector3(0,1,0)));\r\n            if(Math.abs(r_angle) > 0.0001)\r\n            {   \r\n                let t_axis = this.twist_axis.clone();\r\n                let rot_axis = t_axis.cross(new THREE.Vector3(0,1,0));\r\n                rot_axis.normalize();            \r\n                tr_mat.makeRotationAxis(rot_axis,r_angle);\r\n            }\r\n          \r\n            let t_p =  new THREE.Vector3(p.x - center.x\r\n                                        ,p.y - center.y\r\n                                        ,p.z - center.z);\r\n\r\n            t_p.applyMatrix4(tr_mat);\r\n\r\n                      \r\n            let c_twist = Math.cos(this.twist_ampl*t_p.y);\r\n            let s_twist = Math.sin(this.twist_ampl*t_p.y);\r\n        \r\n            let q = new THREE.Vector3(c_twist*t_p.x - s_twist*t_p.z,\r\n                                     t_p.y,\r\n                                     s_twist*t_p.x + c_twist*t_p.z) ;\r\n\r\n  \r\n            \r\n            q.applyMatrix4(tr_mat.invert());\r\n\r\n            let t_q = new THREE.Vector3(q.x + center.x\r\n                ,q.y + center.y\r\n                ,q.z + center.z);\r\n                                \r\n            res.v = Number.MAX_VALUE;\r\n            for (var i = 0; i < l; ++i) {\r\n                this.children[i].value(t_q, tmp);\r\n                res.v = tmp.v;\r\n              /*  this.children[i].value(p, tmp);\r\n                res.v += tmp.v;*/\r\n                if (res.g) {\r\n                    res.g.copy(tmp.g);\r\n                }\r\n                if (res.m) {\r\n                    res.m.copy(tmp.m);\r\n                }\r\n                // within primitive potential\r\n                if (res.step || res.stepOrtho) {\r\n                    throw \"Not implemented\";\r\n                }\r\n            }\r\n        }\r\n        else if (res.step || res.stepOrtho) {\r\n            throw \"Not implemented\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @link Element.trim for a complete description.\r\n     *\r\n     *  @param {THREE.Box3} aabb\r\n     *  @param {Array<Element>} trimmed\r\n     *  @param {Array<Node>} parents\r\n     */\r\n    trim(aabb, trimmed, parents) {\r\n        // Trim remaining nodes\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            this.children[i].trim(aabb, trimmed, parents);\r\n        }\r\n    };\r\n}\r\n\r\nTypes.register(TwistNode.type, TwistNode);\r\n\r\nmodule.exports = TwistNode;\r\n","'use strict';\r\n\r\nconst Element = require(\"./Element.js\");\r\nconst Types = require(\"./Types.js\");\r\n\r\n/**\r\n * @typedef {import('./Material.js')} Material\r\n * @typedef {import('./Material.js').MaterialJSON} MaterialJSON\r\n * @typedef {import('./Element.js').ElementJSON} ElementJSON\r\n * @typedef {import('./Element.js').Json} Json\r\n *\r\n * @typedef {import('./areas/Area.js')} Area\r\n */\r\n\r\n/**\r\n * @typedef {{materials:Array<MaterialJSON>} & ElementJSON} PrimitiveJSON\r\n */\r\n\r\n/**\r\n *  Represent a blobtree primitive.\r\n *\r\n *  @constructor\r\n *  @extends {Element}\r\n */\r\nclass Primitive extends Element {\r\n\r\n    static type = \"Primitive\";\r\n\r\n    /**\r\n     * @param {PrimitiveJSON} _json\r\n     */\r\n    static fromJSON(_json) {\r\n        throw new Error(\"Primitibe.fromJSON should never be called as Primitibe is abstract.\");\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        /** @type {!Array.<!Material>} */\r\n        this.materials = [];\r\n    }\r\n\r\n    /**\r\n     * @returns {PrimitiveJSON}\r\n     */\r\n    toJSON() {\r\n        var res = { ...super.toJSON(), materials: [] };\r\n        res.materials = [];\r\n        for (var i = 0; i < this.materials.length; ++i) {\r\n            res.materials.push(this.materials[i].toJSON());\r\n        }\r\n        return res;\r\n    };\r\n\r\n    /**\r\n     *  @param {Array.<!Material>} mats Array of materials to set. they will be copied to the primitive materials\r\n     */\r\n    setMaterials(mats) {\r\n        if (mats.length !== this.materials.length) {\r\n            throw \"Error : trying to set \" + mats.length + \" materials on a primitive with only \" + this.materials.length;\r\n        }\r\n        for (var i = 0; i < mats.length; ++i) {\r\n            if (!mats[i].equals(this.materials[i])) {\r\n                this.materials[i].copy(mats[i]);\r\n                this.invalidAABB();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @return {Array.<!Material>} Current primitive materials\r\n     */\r\n    getMaterials = function () {\r\n        return this.materials;\r\n    };\r\n\r\n    /**\r\n     * @link Element.computeAABB for a complete description\r\n     */\r\n    computeAABB() {\r\n        throw \"Primitive.computeAABB  Must be reimplemented in all inherited class.\";\r\n    };\r\n\r\n    /**\r\n     *  @abstract\r\n     *  Destroy the current primitive and remove it from the blobtree (basically\r\n     *  clean up the links between blobtree elements).\r\n     */\r\n    destroy() {\r\n        if (this.parentNode !== null) {\r\n            this.parentNode.removeChild(this);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @abstract\r\n     * @returns {Array.<{aabb: THREE.Box3, bv:Area, obj:Primitive}>}\r\n     */\r\n    getAreas () {\r\n        console.error(\"ERROR : getAreas is an abstract function, should be re-implemented in all primitives(error occured in \" + this.getType() + \" primitive)\");\r\n        return [];\r\n    };\r\n\r\n    /**\r\n     * @abstract\r\n     * Compute variables to help with value computation.\r\n     */\r\n    computeHelpVariables() {\r\n        throw \"ERROR : computeHelpVariables is a virtual function, should be re-implemented in all primitives(error occured in \" + this.getType() + \" primitive)\";\r\n    };\r\n\r\n    /**\r\n     * @abstract\r\n     * Compute variables to help with value computation.\r\n     * @param {*} cls The class to count. Primitives have no children so no complexty here.\r\n     */\r\n    count(cls) {\r\n        return this instanceof cls ? 1 : 0;\r\n    };\r\n\r\n};\r\n\r\nTypes.register(Primitive.type, Primitive);\r\n\r\nmodule.exports = Primitive;\r\n\r\n\r\n","'use strict';\r\n\r\nlet KS = 2.0;\r\nlet KIS = 1 / KS;\r\nlet KS2 = 4.0;\r\nlet KIS2 = 1 / (KS * KS);\r\n\r\n/**\r\n *  Compute the iso value at a given distance for a given polynomial degree\r\n *  and scale in 0 dimension (point)\r\n *\r\n *  @param {number} degree  Polynomial degree of the kernel\r\n *  @param {number} scale   Kernel scale\r\n *  @param {number} dist    Distance\r\n *  @return {number} The iso value at a given distance for a given polynomial degree and scale\r\n */\r\nlet GetIsoValueAtDistanceGeom0D = function (degree, scale, dist) {\r\n    if (degree % 2 !== 0) {\r\n        throw \"degree should be even\";\r\n    }\r\n\r\n    if (dist < scale) {\r\n        var func_dist_scale = 1.0 - (dist * dist) / (scale * scale);\r\n        return Math.pow(func_dist_scale, degree / 2.0);\r\n    }\r\n    else {\r\n        return 0.0;\r\n    }\r\n}\r\n\r\n/**\r\n *  Compute the iso value at a given distance for a given polynomial degree\r\n *  and scale in 1 dimension\r\n *\r\n *  @param {number} degree  Polynomial degree of the kernel\r\n *  @param {number} scale   Kernel scale\r\n *  @param {number} dist    Distance\r\n *  @return {number} The iso value at a given distance for a given polynomial degree and scale\r\n */\r\nlet GetIsoValueAtDistanceGeom1D = function (degree, scale, dist) {\r\n    if (degree % 2 !== 0) {\r\n        throw \"degree should be even\";\r\n    }\r\n\r\n    if (dist < scale) {\r\n        var func_dist_scale = 1.0 - (dist * dist) / (scale * scale);\r\n        var iso_for_dist = 2.0 * scale * Math.sqrt(func_dist_scale);\r\n        var k = 0;\r\n        while (k != degree) {\r\n            k += 2;\r\n            iso_for_dist *= k / (1.0 + k) * func_dist_scale;\r\n        }\r\n        return iso_for_dist;\r\n    }\r\n    else {\r\n        return 0.0;\r\n    }\r\n};\r\n\r\n/**\r\n *  Compute the iso value at a given distance for a given polynomial degree\r\n *  and scale in 2 dimensions\r\n *\r\n *  @param {number} degree  Polynomial degree of the kernel\r\n *  @param {number} scale   Kernel scale\r\n *  @param {number} dist    Distance\r\n *  @return {number} The iso value at a given distance for a given polynomial degree and scale\r\n */\r\nlet GetIsoValueAtDistanceGeom2D = function (degree, scale, dist) {\r\n    if (dist < scale) {\r\n        var i_p_2 = degree + 2;\r\n        var func_dist_scale = 1.0 - (dist * dist) / (scale * scale);\r\n        return (2.0 * Math.PI / i_p_2) * scale * scale * Math.pow(func_dist_scale, i_p_2 * 0.5);\r\n    }\r\n    else {\r\n        return 0.0;\r\n    }\r\n};\r\n\r\nvar ScalisMath = {\r\n    KS: KS,\r\n    KIS: KIS,\r\n    KS2: KS2,\r\n    KIS2: KIS2,\r\n    /**\r\n     *  Compact Polynomial of degree 6 evaluation function\r\n     *  @param {number} r Radius (ie distance)\r\n     */\r\n    Poly6Eval: function (r) {\r\n        var aux = 1.0 - KIS2 * r * r;\r\n\r\n        if (aux > 0.0) {\r\n            return aux * aux * aux;\r\n        } else {\r\n            return 0.0;\r\n        }\r\n    },\r\n    /**\r\n     *  Compact Polynomial of degree 6 evaluation function from a squared radius.\r\n     *  (avoid square roots in some cases)\r\n     *  @param {number} r2 Radius squared (ie distance squared)\r\n     */\r\n    Poly6EvalSq: function (r2) {\r\n        var aux = 1.0 - KIS2 * r2;\r\n\r\n        if (aux > 0.0) {\r\n            return aux * aux * aux;\r\n        } else {\r\n            return 0.0;\r\n        }\r\n    },\r\n    /**\r\n     *  Compute the iso value at a given distance for a given polynomial degree\r\n     *  and scale in 0 dimension (point)\r\n     *\r\n     *  @param {number} degree  Polynomial degree of the kernel\r\n     *  @param {number} scale   Kernel scale\r\n     *  @param {number} dist    Distance\r\n     *  @return {number} The iso value at a given distance for a given polynomial degree and scale\r\n     */\r\n    GetIsoValueAtDistanceGeom0D: GetIsoValueAtDistanceGeom0D,\r\n    /**\r\n     * @type {number} Normalization Factor for polynomial 4 in 0 dimension\r\n     * @const\r\n     */\r\n    Poly4NF0D: 1.0 / GetIsoValueAtDistanceGeom0D(4, KS, 1.0),\r\n    /**\r\n     * @type {number} Normalization Factor for polynomial 6 in 0 dimension\r\n     * @const\r\n     */\r\n    Poly6NF0D: 1.0 / GetIsoValueAtDistanceGeom0D(6, KS, 1.0),\r\n    /**\r\n     *  Compute the iso value at a given distance for a given polynomial degree\r\n     *  and scale in 1 dimension\r\n     *\r\n     *  @param {number} degree  Polynomial degree of the kernel\r\n     *  @param {number} scale   Kernel scale\r\n     *  @param {number} dist    Distance\r\n     *  @return {number} The iso value at a given distance for a given polynomial degree and scale\r\n     */\r\n    GetIsoValueAtDistanceGeom1D: GetIsoValueAtDistanceGeom1D,\r\n    /**\r\n     * @type {number} Normalization Factor for polynomial 4 in 1 dimension\r\n     * @const\r\n     */\r\n    Poly4NF1D: 1.0 / GetIsoValueAtDistanceGeom1D(4, KS, 1.0),\r\n    /**\r\n     * @type {number} Normalization Factor for polynomial 6 in 1 dimension\r\n     * @const\r\n     */\r\n    Poly6NF1D: 1.0 / GetIsoValueAtDistanceGeom1D(6, KS, 1.0),\r\n    /**\r\n     *  Compute the iso value at a given distance for a given polynomial degree\r\n     *  and scale in 2 dimensions\r\n     *\r\n     *  @param {number} degree  Polynomial degree of the kernel\r\n     *  @param {number} scale   Kernel scale\r\n     *  @param {number} dist    Distance\r\n     *  @return {number} The iso value at a given distance for a given polynomial degree and scale\r\n     */\r\n    GetIsoValueAtDistanceGeom2D: GetIsoValueAtDistanceGeom2D,\r\n    /**\r\n     * @type {number} Normalization Factor for polynomial 4 in 2 dimension\r\n     * @const\r\n     */\r\n    Poly4NF2D: 1.0 / GetIsoValueAtDistanceGeom2D(4, KS, 1.0),\r\n    /**\r\n     * @type {number} Normalization Factor for polynomial 6 in 2 dimension\r\n     * @const\r\n     */\r\n    Poly6NF2D: 1.0 / GetIsoValueAtDistanceGeom2D(6, KS, 1.0)\r\n};\r\n\r\nmodule.exports = ScalisMath;\r\n\r\n\r\n\r\n\r\n","'use strict';\r\n\r\nconst Types = require(\"../Types.js\");\r\nconst Primitive = require(\"../Primitive.js\");\r\n\r\n/** @typedef {import('../Element.js')} Element */\r\n/** @typedef {import('../Element.js').Json} Json */\r\n/** @typedef {import('../Element.js').ElementJSON} ElementJSON */\r\n/** @typedef {import('../Primitive.js').PrimitiveJSON} PrimitiveJSON */\r\n/** @typedef {import('./ScalisVertex')} ScalisVertex */\r\n/** @typedef {import('./ScalisVertex').ScalisVertexJSON} ScalisVertexJSON */\r\n\r\n/**\r\n * @typedef {{v:Array<ScalisVertexJSON>, volType:string} & PrimitiveJSON} ScalisPrimitiveJSON\r\n */\r\n\r\n/**\r\n *  Represent an implicit primitive respecting the SCALIS model developped by Cedrric Zanni\r\n *\r\n *  @constructor\r\n *  @extends {Primitive}\r\n */\r\nclass ScalisPrimitive extends Primitive {\r\n\r\n    static type = \"ScalisPrimitive\"\r\n\r\n    static DIST = \"dist\";\r\n    static CONVOL = \"convol\";\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        // Type of volume (convolution or distance funtion)\r\n        this.volType = ScalisPrimitive.DIST;\r\n\r\n        /**\r\n         * @type {!Array.<!ScalisVertex>}\r\n         */\r\n        this.v = []; // vertex array\r\n    }\r\n\r\n    /**\r\n     *  @return {string} Type of the element\r\n     */\r\n    getType() {\r\n        return ScalisPrimitive.type;\r\n    }\r\n\r\n    /**\r\n     *  @return {ScalisPrimitiveJSON}\r\n     */\r\n    toJSON() {\r\n        var res = {\r\n            ...super.toJSON(),\r\n            v: [],\r\n            volType: this.volType\r\n        };\r\n        res.v = [];\r\n        res.volType = this.volType;\r\n        for (var i = 0; i < this.v.length; ++i) {\r\n            res.v.push(this.v[i].toJSON());\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     *  @abstract Specify if the voltype can be changed\r\n     *  @return {boolean} True if and only if the VolType can be changed.\r\n     */\r\n    mutableVolType() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     *  @param {string} vt New VolType to set (Only for SCALIS primitives)\r\n     */\r\n    setVolType(vt) {\r\n        if (vt !== this.volType) {\r\n            this.volType = vt;\r\n            this.invalidAABB();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @return {string} Current volType\r\n     */\r\n    getVolType() {\r\n        return this.volType;\r\n    }\r\n\r\n    /**\r\n     * @link Element.computeAABB for a complete description\r\n     */\r\n    computeAABB() {\r\n        this.aabb.makeEmpty();\r\n        for (var i = 0; i < this.v.length; i++) {\r\n            this.aabb.union(this.v[i].getAABB());\r\n        }\r\n    }\r\n};\r\n\r\nTypes.register(ScalisPrimitive.type, ScalisPrimitive);\r\n\r\nmodule.exports = ScalisPrimitive;\r\n\r\n\r\n\r\n\r\n","\"use strict\";\r\n\r\nconst THREE = require(\"three\");\r\n\r\nconst ScalisMath = require(\"./ScalisMath.js\");\r\n\r\n/** @typedef {import('./ScalisPrimitive')} ScalisPrimitive */\r\n/** @typedef {import('../Element.js').Json} Json */\r\n\r\n/**\r\n * @typedef {Object} ScalisVertexJSON\r\n * @property {Object} position\r\n * @property {number} position.x\r\n * @property {number} position.y\r\n * @property {number} position.z\r\n * @property {number} thickness\r\n */\r\n\r\nvar verticesIds = 0;\r\n\r\n/**\r\n *  A scalis ScalisVertex. Basically a point and a wanted thickness.\r\n */\r\nclass ScalisVertex {\r\n\r\n    static fromJSON(json) {\r\n        return new ScalisVertex(new THREE.Vector3(json.position.x, json.position.y, json.position.z), json.thickness);\r\n    }\r\n\r\n    /**\r\n     *  @param {!THREE.Vector3} pos A position in space, as a THREE.Vector3\r\n     *  @param {number} thickness Wanted thickness at this point. Misnamed parameter : this is actually half the thickness.\r\n     */\r\n    constructor(pos, thickness) {\r\n        this.pos = pos.clone();\r\n        this.thickness = thickness;\r\n\r\n        // Only used for quick fix Zanni Correction. Should be removed as soon as it's not useful anymore.\r\n        this.id = verticesIds++;\r\n\r\n        // The primitive using this vertex\r\n        this.prim = null;\r\n\r\n        this.aabb = new THREE.Box3();\r\n        this.valid_aabb = false;\r\n    };\r\n\r\n    /**\r\n     *  Set an internal pointer to the primitive using this vertex.\r\n     *  Should be called from primitive constructor.\r\n     * @param {ScalisPrimitive} prim\r\n     */\r\n    setPrimitive(prim) {\r\n        if (this.prim === null) {\r\n            this.prim = prim;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {ScalisVertexJSON}\r\n     */\r\n    toJSON() {\r\n        return {\r\n            position: {\r\n                x: this.pos.x,\r\n                y: this.pos.y,\r\n                z: this.pos.z\r\n            },\r\n            thickness: this.thickness\r\n        };\r\n    }\r\n\r\n    /**\r\n     *  Set a new position.\r\n     *  @param {!THREE.Vector3} pos A position in space, as a THREE.Vector3\r\n     */\r\n    setPos(pos) {\r\n        this.valid_aabb = false;\r\n        this.pos.copy(pos);\r\n        this.prim.invalidAABB();\r\n    }\r\n\r\n    /**\r\n     *  Set a new thickness\r\n     *  @param {number} thickness The new thickness\r\n     */\r\n    setThickness(thickness) {\r\n        this.valid_aabb = false;\r\n        this.thickness = thickness;\r\n        this.prim.invalidAABB();\r\n    }\r\n\r\n    /**\r\n     *  Set a both position and thickness\r\n     *  @param {number} thickness The new thickness\r\n     *  @param {!THREE.Vector3} pos A position in space, as a THREE.Vector3\r\n     */\r\n    setAll(pos, thickness) {\r\n        this.valid_aabb = false;\r\n        this.pos = pos;\r\n        this.thickness = thickness;\r\n        this.prim.invalidAABB();\r\n    }\r\n\r\n    /**\r\n     *  Get the current position\r\n     *  @return {!THREE.Vector3} Current position, as a THREE.Vector3\r\n     */\r\n    getPos() {\r\n        return this.pos;\r\n    }\r\n\r\n    /**\r\n     *  Get the current Thickness\r\n     *  @return {number} Current Thickness\r\n     */\r\n    getThickness() {\r\n        return this.thickness;\r\n    };\r\n\r\n    /**\r\n     *  Get the current AxisAlignedBoundingBox\r\n     *  @return {THREE.Box3} The AABB of this vertex.\r\n     */\r\n    getAABB() {\r\n        if (!this.valid_aabb) {\r\n            this.computeAABB();\r\n            this.valid_aabb = true;\r\n        }\r\n        return this.aabb;\r\n    };\r\n\r\n    /**\r\n     *  Compute the current AABB.\r\n     *  @protected\r\n     */\r\n    computeAABB() {\r\n        var pos = this.getPos();\r\n        var boundSupport = this.getThickness() * ScalisMath.KS;\r\n        this.aabb.set(new THREE.Vector3(\r\n            pos.x - boundSupport,\r\n            pos.y - boundSupport,\r\n            pos.z - boundSupport\r\n        ),\r\n            new THREE.Vector3(\r\n                pos.x + boundSupport,\r\n                pos.y + boundSupport,\r\n                pos.z + boundSupport\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     *  Check equality between 2 vertices\r\n     *  @param {ScalisVertex} other\r\n     *  @return {boolean}\r\n     */\r\n    equals(other) {\r\n        return this.pos.equals(other.pos) && this.thickness === other.thickness;\r\n    }\r\n}\r\n\r\n\r\n\r\nmodule.exports = ScalisVertex;\r\n\r\n","'use strict';\r\n\r\n// eslint-disable-next-line\r\nconst THREE = require('three');\r\n\r\n/**\r\n * @typedef {Object} AreaSphereParam\r\n * @property {number} radius\r\n * @property {THREE.Vector3} center\r\n */\r\n\r\n/**\r\n *  Bounding area for a primitive\r\n *  It is the same for DIST and CONVOL primitives since the support of the convolution\r\n *  kernel is the same as the support for the distance field.\r\n *\r\n *  The Area must be able to return accuracy needed in a given zone (Sphere for now,\r\n *  since box intersections with such a complex shape are not trivial), and also\r\n *  propose an intersection test.\r\n *\r\n */\r\nclass Area {\r\n\r\n    /**\r\n     *  @abstract\r\n     *  Test intersection of the shape with a sphere\r\n     *  @param {AreaSphereParam} _sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @return {boolean} true if the sphere and the area intersect\r\n     */\r\n    sphereIntersect(_sphere) {\r\n        throw \"Error : sphereIntersect is abstract, should have been overwritten\";\r\n    }\r\n\r\n    /**\r\n     * @abstract\r\n     * Test if p is in the area.\r\n     * @param {!THREE.Vector3} _p A point in space\r\n     * @return {boolean} true if p is in the area, false otherwise.\r\n     */\r\n    contains(_p) {\r\n        throw \"Error : contains is abstract, should have been overwritten\";\r\n    }\r\n\r\n    /**\r\n     *  @abstract\r\n     *  Return the minimum accuracy needed in the intersection of the sphere and the area.\r\n     *  This function is a generic function used in both getNiceAcc and getRawAcc.\r\n     *\r\n     *  @param {AreaSphereParam}  _sphere  A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @param {number}  _factor  the ratio to determine the wanted accuracy.\r\n     *                   Example : for an AreaScalisSeg, if thick0 is 1 and thick1 is 2, a sphere\r\n     *                      centered at (p0+p1)/2 and of radius 0.2\r\n     *                      will show its minimum accuracy at p0+0.3*unit_dir.\r\n     *                      The linear interpolation of weights at this position\r\n     *                      will give a wanted radius of 1.3\r\n     *                      This function will return factor*1.3\r\n     *  @return {number} the accuracy needed in the intersection zone, as a ratio of the linear variation\r\n     *         of the radius along (this.p0,this.p1)\r\n     */\r\n    getAcc(_sphere, _factor) {\r\n        throw \"Error : getAcc is abstract, should have been overwritten\";\r\n    }\r\n\r\n    /**\r\n     *  @abstract\r\n     *  Convenience function, just call getAcc with Nice Accuracy parameters.\r\n     *  @param {AreaSphereParam} _sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @return {number} The Nice accuracy needed in the intersection zone\r\n     */\r\n    getNiceAcc(_sphere) {\r\n        throw \"Error : getNiceAcc is abstract, should have been overwritten\";\r\n    }\r\n\r\n    /**\r\n     *  @abstract\r\n     *  Convenience function, just call getAcc with Current Accuracy parameters.\r\n     *  @param {AreaSphereParam} _sphere A sphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @return {number} The Current accuracy needed in the intersection zone\r\n     */\r\n    getCurrAcc(_sphere) {\r\n        throw \"Error : getCurrAcc is abstract, should have been overwritten\";\r\n    }\r\n\r\n    /**\r\n     *  @abstract\r\n     *  Convenience function, just call getAcc with Raw Accuracy parameters.\r\n     *  @param {AreaSphereParam} _sphere A sphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @return {number} The raw accuracy needed in the intersection zone\r\n     */\r\n    getRawAcc (_sphere) {\r\n        throw \"Error : getRawAcc is abstract, should have been overwritten\";\r\n    }\r\n\r\n    /**\r\n     *  @abstract\r\n     *  @return {number} the minimum accuracy needed in the whole area\r\n     */\r\n    getMinAcc() {\r\n        throw \"Error : getRawAcc is abstract, should have been overwritten\";\r\n    }\r\n\r\n    /**\r\n     *  @abstract\r\n     *  @return {number} the minimum raw accuracy needed in the whole area\r\n     */\r\n    getMinRawAcc() {\r\n        throw \"Error : getRawAcc is abstract, should have been overwritten\";\r\n    }\r\n\r\n    /**\r\n     *  @abstract\r\n     *  Return the minimum accuracy required at some point on the given axis, according to Accuracies.curr\r\n     *  The returned accuracy is the one you would need when stepping in the axis\r\n     *  direction when you are on the axis at coordinate t.\r\n     *  @param {string} _axis x, y or z\r\n     *  @param {number} _t Coordinate on the axis\r\n     *  @return {number} The step you can safely do in axis direction\r\n     */\r\n    getAxisProjectionMinStep(_axis, _t) {\r\n        console.error(\"Area.getAxisProjectionMinStep is a pure virtual function, please reimplement\");\r\n        return 1;\r\n    }\r\n};\r\n\r\nmodule.exports = Area;\r\n","\"use strict\";\r\n\r\n/**\r\n * Accuracies Contains the accuracies needed in Areas. Can be changed when importing blobtree.js.\r\n * For classic segments and sphere, we setteled for a raw accuracy being proportional to\r\n * the radii. 1/3 of the radius is considered nice, 1 radius is considered raw.\r\n * For new primitives, feel free to create your own accuracies factors depending on the features.\r\n */\r\nvar Accuracies = {\r\n    /**\r\n     * Factor for the nice accuracy needed to represent the features nicely\r\n     * @type {number}\r\n     */\r\n    nice: 0.3,\r\n    /**\r\n     * Factor for the raw accuracy needed to represent the features roughly\r\n     * @type {number}\r\n     */\r\n    raw: 1.0,\r\n    /**\r\n     * Current accuracy factor, should be between Accuracies.nice and Accuracies.raw.\r\n     * It will be the one used by rendering algorithms to decide to stop even if nice accuracy has not been reached.\r\n     * @type {number}\r\n     *\r\n     */\r\n    curr: 0.3\r\n};\r\n\r\nmodule.exports = Accuracies;\r\n","\"use strict\";\r\n\r\nconst THREE = require(\"three\");\r\nconst Area = require(\"./Area.js\");\r\nconst Accuracies = require(\"../accuracies/Accuracies.js\");\r\n\r\n/** @typedef {import('./Area.js').AreaSphereParam} AreaSphereParam */\r\n\r\n/**\r\n *  AreaSphere is a general representation of a spherical area.\r\n *  See Primitive.getArea for more details.\r\n *\r\n *  @extends {Area}\r\n */\r\nclass AreaSphere extends Area {\r\n    /**\r\n     *  @param {!THREE.Vector3} p Point to locate the area\r\n     *  @param {number} r Radius of the area\r\n     *  @param {number=} accFactor Accuracy factor. By default SphereArea will use global Accuracies parameters. However, you can setup a accFactor.\r\n     *                            to change that. You will usually want to have accFactor between 0 (excluded) and 1. Default to 1.0.\r\n     *                            Be careful not to set it too small as it can increase the complexity of some algorithms up to the crashing point.\r\n     */\r\n    constructor(p, r, accFactor) {\r\n        super();\r\n\r\n        this.p = new THREE.Vector3(p.x, p.y, p.z);\r\n        this.r = r;\r\n\r\n        this.accFactor = accFactor || 1.0;\r\n    }\r\n\r\n    /**\r\n     *  Test intersection of the shape with a sphere\r\n     *  @return {boolean} true if the sphere and the area intersect\r\n     *\r\n     *  @param {!{r:number,c:!THREE.Vector3}} sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     */\r\n    sphereIntersect = (function () {\r\n        var v = new THREE.Vector3();\r\n        return (sphere) => {\r\n            /** @type {AreaSphere} */\r\n            let self = this;\r\n\r\n            v.subVectors(sphere.center, self.p);\r\n            var tmp = sphere.radius + self.r;\r\n            return v.lengthSq() < tmp * tmp;\r\n        };\r\n    })();\r\n\r\n    /**\r\n     * @link Area.contains for a complete description\r\n     * @param {THREE.Vector3} p\r\n     * @return {boolean}\r\n     */\r\n    contains = (function () {\r\n        var v = new THREE.Vector3();\r\n        /**\r\n         *  @param {!THREE.Vector3} p A point in space, must comply to THREE.Vector3 API.\r\n         *\r\n         */\r\n        return (p) => {\r\n            /** @type {AreaSphere} */\r\n            let self = this;\r\n\r\n            v.subVectors(p, self.p);\r\n            return v.lengthSq() < self.r * self.r;\r\n        };\r\n    })();\r\n\r\n    /**\r\n     *  @link Area.getAcc for a complete description\r\n     *\r\n     *  @return {number} the accuracy needed in the intersection zone\r\n     *\r\n     *  @param {AreaSphereParam} _sphere  A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @param {number}  factor  the ratio to determine the wanted accuracy.\r\n     *\r\n     */\r\n    getAcc(_sphere, factor) {\r\n        return this.r * factor;\r\n    }\r\n\r\n    /**\r\n     *  @link Area.getNiceAcc for a complete description\r\n     *  @param {AreaSphereParam}  sphere A sphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @return {number} The Nice accuracy needed in the intersection zone\r\n     */\r\n    getNiceAcc(sphere) {\r\n        return this.getAcc(sphere, Accuracies.nice * this.accFactor);\r\n    }\r\n\r\n    /**\r\n     *  @link Area.getNiceAcc for a complete description\r\n     *  @param {AreaSphereParam}  sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @return {number} The Curr accuracy needed in the intersection zone\r\n     */\r\n    getCurrAcc(sphere) {\r\n        return this.getAcc(sphere, Accuracies.curr * this.accFactor);\r\n    }\r\n\r\n    /**\r\n     *  @link Area.getRawAcc for a complete description\r\n     *  @param {AreaSphereParam}  sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @return {number} The raw accuracy needed in the intersection zone\r\n     */\r\n    getRawAcc(sphere) {\r\n        return this.getAcc(sphere, Accuracies.raw * this.accFactor);\r\n    }\r\n\r\n    /**\r\n     * @link Area.getMinAcc\r\n     * @return {number}\r\n     */\r\n    getMinAcc() {\r\n        return Accuracies.curr * this.r * this.accFactor;\r\n    }\r\n\r\n    /**\r\n     * @link Area.getMinRawAcc\r\n     * @return {number}\r\n     */\r\n    getMinRawAcc() {\r\n        return Accuracies.raw * this.r * this.accFactor;\r\n    }\r\n\r\n    /**\r\n     *  Return the minimum accuracy required at some point on the given axis, according to Accuracies.curr\r\n     *  The returned accuracy is the one you would need when stepping in the axis\r\n     *  direction when you are on the axis at coordinate t.\r\n     *  @param {string} axis x, y or z\r\n     *  @param {number} t Coordinate on the axis\r\n     *  @return {number} The step you can safely do in axis direction\r\n     */\r\n    getAxisProjectionMinStep(axis, t) {\r\n        var step = 100000000;\r\n        var diff = t - this.p[axis];\r\n        if (diff < -2 * this.r) {\r\n            step = Math.min(\r\n                step,\r\n                Math.max(\r\n                    Math.abs(diff + this.r),\r\n                    Accuracies.curr * this.r * this.accFactor\r\n                )\r\n            );\r\n        } else if (diff < 2 * this.r) {\r\n            step = Math.min(\r\n                step,\r\n                Accuracies.curr * this.r * this.accFactor\r\n            );\r\n        }// else the area is behind us\r\n        return step;\r\n    };\r\n}\r\n\r\nmodule.exports = AreaSphere;\r\n\r\n","\"use strict\";\r\n\r\nconst THREE = require(\"three\");\r\nconst Types = require(\"../Types.js\");\r\nconst Material = require(\"../Material.js\");\r\nconst ScalisPrimitive = require(\"./ScalisPrimitive.js\");\r\nconst ScalisVertex = require(\"./ScalisVertex.js\");\r\nconst ScalisMath = require(\"./ScalisMath.js\");\r\nconst AreaSphere = require(\"../areas/AreaSphere.js\");\r\n\r\n// AreaScalisPoint is deprecated since the more genreal AreaSphere is now supposed to do the job.\r\n// Uncomment if you see any difference.\r\n// const AreaScalisPoint = require(\"../areas/deprecated/AreaScalisPoint.js\");\r\n\r\n/** @typedef {import('../Element.js')} Element */\r\n/** @typedef {import('../Element.js').Json} Json */\r\n/** @typedef {import('../Element.js').ValueResultType} ValueResultType */\r\n/** @typedef {import('./ScalisVertex').ScalisVertexJSON} ScalisVertexJSON */\r\n/** @typedef {import('./ScalisPrimitive').ScalisPrimitiveJSON} ScalisPrimitiveJSON */\r\n\r\n/**\r\n * @typedef {{density:number} & ScalisPrimitiveJSON} ScalisPointJSON\r\n */\r\n\r\nclass ScalisPoint extends ScalisPrimitive  {\r\n\r\n    static type = \"ScalisPoint\";\r\n\r\n    /**\r\n     * @param {ScalisPointJSON} json\r\n     * @returns\r\n     */\r\n    static fromJSON(json) {\r\n        var v = ScalisVertex.fromJSON(json.v[0]);\r\n        var m = Material.fromJSON(json.materials[0]);\r\n        return new ScalisPoint(v, json.volType, json.density, m);\r\n    };\r\n\r\n    /**\r\n     *  @param {!ScalisVertex} vertex The vertex with point parameters.\r\n     *  @param {string} volType The volume type wanted for this primitive.\r\n     *                          Note : \"convolution\" does not make sens for a point, so technically,\r\n     *                                 ScalisPrimitive.DIST or ScalisPrimitive.CONVOL will give the same results.\r\n     *                                 However, since this may be a simple way of sorting for later blending,\r\n     *                                 you can still choose between the 2 options.\r\n     *  @param {number} density Implicit field density.\r\n     *                          Gives afiner control of the created implicit field.\r\n     *  @param {!Material} mat Material for the point\r\n     */\r\n    constructor(vertex, volType, density, mat) {\r\n        super();\r\n\r\n        this.v.push(vertex);\r\n        this.v[0].setPrimitive(this);\r\n\r\n        this.volType = volType;\r\n        this.density = density;\r\n        this.materials.push(mat);\r\n\r\n        // Temporary for eval\r\n        // TODO : should be wrapped in the eval function scope if possible (ie not precomputed)\r\n        this.v_to_p = new THREE.Vector3();\r\n    }\r\n\r\n    getType() {\r\n        return ScalisPoint.type;\r\n    };\r\n\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            density: this.density\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @param {number} d New density to set\r\n     */\r\n    setDensity(d) {\r\n        this.density = d;\r\n        this.invalidAABB();\r\n    }\r\n\r\n    /**\r\n     *  @return {number} Current density\r\n     */\r\n    getDensity() {\r\n        return this.density;\r\n    }\r\n\r\n    /**\r\n     *  Set material for this point\r\n     *  @param {!Material} m\r\n     */\r\n    setMaterial(m) {\r\n        this.materials[0].copy(m);\r\n        this.invalidAABB();\r\n    }\r\n\r\n    /**\r\n     * @link Primitive.computeHelpVariables\r\n     */\r\n    computeHelpVariables() {\r\n        this.computeAABB();\r\n    }\r\n\r\n    /**\r\n     * @link Element.prepareForEval\r\n     */\r\n    prepareForEval() {\r\n        if (!this.valid_aabb) {\r\n            this.computeHelpVariables();\r\n            this.valid_aabb = true;\r\n        }\r\n    };\r\n\r\n    getAreas() {\r\n        if (!this.valid_aabb) {\r\n            console.error(\"ERROR : Cannot get area of invalid primitive\");\r\n            return [];\r\n        } else {\r\n            return [{\r\n                aabb: this.aabb,\r\n                bv: new AreaSphere(this.v[0].getPos(), ScalisMath.KS * this.v[0].getThickness(), ScalisMath.KIS),\r\n                // AreaScalisPoint is deprecated and AreaSphere should be used instead. Uncomment if you notice accuracy issues.\r\n                // bv: new AreaScalisPoint(this.v[0].getPos(),this.v[0].getThickness()),\r\n                obj: this\r\n            }];\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @link Element.heuristicStepWithin\r\n     * @return {number} The next step length to do with respect to this primitive/node.\r\n     */\r\n    heuristicStepWithin() {\r\n        return this.v[0].getThickness() / 3;\r\n    }\r\n\r\n    /**\r\n     *  @link Element.value\r\n     *\r\n     *  @param {THREE.Vector3} p Point where we want to evaluate the primitive field\r\n     *  @param {ValueResultType} res\r\n     */\r\n    value(p, res) {\r\n        if (!this.valid_aabb) {\r\n            throw \"Error : PrepareForEval should have been called\";\r\n        }\r\n\r\n        var thickness = this.v[0].getThickness();\r\n\r\n        // Eval itself\r\n        this.v_to_p.subVectors(p, this.v[0].getPos());\r\n        var r2 = this.v_to_p.lengthSq() / (thickness * thickness);\r\n        var tmp = 1.0 - ScalisMath.KIS2 * r2;\r\n        if (tmp > 0.0) {\r\n            res.v = this.density * tmp * tmp * tmp * ScalisMath.Poly6NF0D;\r\n\r\n            if (res.g) {\r\n                // Gradient computation is easy since the\r\n                // gradient is radial. We use the analitical solution\r\n                // to directionnal gradient (differential in this.v_to_p length)\r\n                var tmp2 = -this.density * ScalisMath.KIS2 * 6.0 * this.v_to_p.length() * tmp * tmp * ScalisMath.Poly6NF0D / (thickness * thickness);\r\n                res.g.copy(this.v_to_p).normalize().multiplyScalar(tmp2);\r\n            }\r\n            if (res.m) { res.m.copy(this.materials[0]); }\r\n        }\r\n        else {\r\n            res.v = 0.0;\r\n            if (res.g) { res.g.set(0, 0, 0); }\r\n            if (res.m) { res.m.copy(Material.defaultMaterial); }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     *  @param {THREE.Vector3} p\r\n     *  @return {number}\r\n     */\r\n    distanceTo(p) {\r\n        // return distance point/segment\r\n        // don't take thickness into account\r\n        return p.distanceTo(this.v[0].getPos());\r\n        // return p.distanceTo(this.v[0].getPos()) - this.v[0].getThickness();\r\n    }\r\n}\r\n\r\nTypes.register(ScalisPoint.type, ScalisPoint);\r\n\r\n\r\nmodule.exports = ScalisPoint;\r\n","\"use strict\";\r\n\r\nconst THREE = require(\"three\");\r\nconst ScalisMath = require(\"../scalis/ScalisMath.js\");\r\nconst Area = require(\"./Area.js\");\r\nconst Accuracies = require(\"../accuracies/Accuracies.js\");\r\n\r\n/** @typedef {import('./Area.js').AreaSphereParam} AreaSphereParam */\r\n\r\n/**\r\n *  Bounding area for the segment.\r\n *  It is the same for DIST and CONVOL primitives since the support of the convolution\r\n *  kernel is the same as the support for the distance field.\r\n *  The resulting volume is a clipped cone with spherical extremities, wich is\r\n *  actually the support of the primitive.\r\n *\r\n *  The Area must be able to return accuracy needed in a given zone (Sphere fr now,\r\n *  since box intersections with such a complex shape are not trivial), and also\r\n *  propose an intersection test.\r\n *\r\n *  @extends {Area}\r\n *  @todo should be possible to replace with an AreaCapsule\r\n *\r\n */\r\nclass AreaScalisSeg extends Area {\r\n\r\n    /**\r\n     * @param {!THREE.Vector3} p0 first point of the shape\r\n     * @param {!THREE.Vector3} p1 second point of the shape\r\n     * @param {number} thick0 radius at p0\r\n     * @param {number} thick1 radius at p1\r\n     */\r\n    constructor(p0, p1, thick0, thick1) {\r\n        super();\r\n\r\n        this.p0 = new THREE.Vector3(p0.x, p0.y, p0.z);\r\n        this.p1 = new THREE.Vector3(p1.x, p1.y, p1.z);\r\n        this.thick0 = thick0;\r\n        this.thick1 = thick1;\r\n\r\n        this.unit_dir = new THREE.Vector3().subVectors(p1, p0);\r\n        this.length = this.unit_dir.length();\r\n        this.unit_dir.normalize();\r\n\r\n        // tmp var for functions below\r\n        this.vector = new THREE.Vector3();\r\n        this.p0_to_p = this.vector; // basically the same as above + smart name\r\n        this.p0_to_p_sqrnorm = 0;\r\n        this.x_p_2D = 0;\r\n        this.y_p_2D = 0;\r\n        this.y_p_2DSq = 0;\r\n        this.ortho_vec_x = this.thick0 - this.thick1; // direction orthogonal to the \"line\" getting from one weight to the other. Precomputed\r\n        this.ortho_vec_y = this.length;\r\n        this.p_proj_x = 0;\r\n        this.p_proj_y = 0;\r\n\r\n        this.abs_diff_thick = Math.abs(this.ortho_vec_x);\r\n    }\r\n\r\n    /**\r\n    * Compute some of the tmp variables.Used to factorized other functions code.\r\n    * @param { !THREE.Vector3 } p A point as a THREE.Vector3\r\n    *\r\n    * @protected\r\n    */\r\n    proj_computation(p) {\r\n        this.p0_to_p = this.vector;\r\n        this.p0_to_p.subVectors(p, this.p0);\r\n        this.p0_to_p_sqrnorm = this.p0_to_p.lengthSq();\r\n        this.x_p_2D = this.p0_to_p.dot(this.unit_dir);\r\n        // pythagore inc.\r\n        this.y_p_2DSq = this.p0_to_p_sqrnorm - this.x_p_2D * this.x_p_2D;\r\n        this.y_p_2D = this.y_p_2DSq > 0 ? Math.sqrt(this.y_p_2DSq) : 0; // because of rounded errors tmp can be <0 and this causes the next sqrt to return NaN...\r\n\r\n        var t = -this.y_p_2D / this.ortho_vec_y;\r\n        // P proj is the point at the intersection of:\r\n        //              - the local X axis (computation in the unit_dir basis)\r\n        //                  and\r\n        //              - the line defined by P and the vector orthogonal to the weight line\r\n        this.p_proj_x = this.x_p_2D + t * this.ortho_vec_x;\r\n        this.p_proj_y = 0.0;\r\n    }\r\n\r\n    /**\r\n     * @link Area.sphereIntersect for a complete description\r\n     * @todo Check the Maths (Ask Cedric Zanni?)\r\n     * @param {AreaSphereParam} sphere\r\n     * @return {boolean} true if the sphere and the area intersect\r\n     */\r\n    sphereIntersect(sphere) {\r\n        this.proj_computation(sphere.center);\r\n\r\n        if (this.p_proj_x < 0.0) {\r\n            return (Math.sqrt(this.p0_to_p_sqrnorm) - sphere.radius < this.thick0 * ScalisMath.KS);\r\n        } else {\r\n            if (this.p_proj_x > this.length) {\r\n                this.vector.subVectors(sphere.center, this.p1);\r\n                return (Math.sqrt(this.vector.lengthSq()) - sphere.radius < this.thick1 * ScalisMath.KS);\r\n            } else {\r\n                var sub1 = this.x_p_2D - this.p_proj_x;\r\n                //var sub2 = this.y_p_2D-this.p_proj_y; //this.p_proj_y is set at 0 by definition\r\n                //var dist = Math.sqrt(sub1*sub1 +this.y_p_2DSq);//sub2*sub2);\r\n                var dist = sub1 * sub1 + this.y_p_2DSq;//sub2*sub2);\r\n                var tt = this.p_proj_x / this.length;\r\n                var inter_w = this.thick0 * (1.0 - tt) + tt * this.thick1;\r\n                var tmp = sphere.radius + inter_w * ScalisMath.KS;\r\n                //return (dist-sphere.radius < inter_w*ScalisMath.KS);\r\n                return (dist < tmp * tmp);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @link Area.contains for a complete description\r\n     * @param {THREE.Vector3} p\r\n     */\r\n    contains(p) {\r\n        this.proj_computation(p);\r\n        // P proj is the point at the intersection of:\r\n        //              - the X axis\r\n        //                  and\r\n        //              - the line defined by P and the vector orthogonal to the weight line\r\n        if (this.p_proj_x < 0.0) {\r\n            // Proj is before the line segment beginning defined by P0: spherical containment\r\n            return this.p0_to_p_sqrnorm < this.thick0 * this.thick0 * ScalisMath.KS2;\r\n        } else {\r\n            if (this.p_proj_x > this.length) {\r\n                // Proj is after the line segment beginning defined by P1: spherical containment\r\n                this.vector.subVectors(p, this.p1);\r\n                return this.vector.lengthSq() < this.thick1 * this.thick1 * ScalisMath.KS2;\r\n            } else {\r\n                // Proj is in between the line segment P1-P0: Linear kind of containment\r\n                var sub1 = this.x_p_2D - this.p_proj_x;\r\n                var sub2 = this.y_p_2D - this.p_proj_y;\r\n                var dist2 = sub1 * sub1 + sub2 * sub2;\r\n                var tt = this.p_proj_x / this.length;\r\n                var inter_w = this.thick0 * (1.0 - tt) + tt * this.thick1;\r\n                return dist2 < inter_w * inter_w * ScalisMath.KS2;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @link Area.getAcc for a complete description\r\n     *\r\n     *  @return {number} the accuracy needed in the intersection zone\r\n     *\r\n     *  @param {AreaSphereParam} sphere  A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @param {number}  factor  the ratio to determine the wanted accuracy.\r\n     *\r\n     *  @todo Check the Maths\r\n     */\r\n    getAcc(sphere, factor) {\r\n        this.proj_computation(sphere.center);\r\n        /*\r\n            // Following is a modified bit that improves acc computation outside of segments.\r\n            // However, it appears that we are losing some quality in the models\r\n            // (as the other computation gives a lower min acc bound by design)\r\n            // TODO: decide if we uncomment or delete this\r\n\r\n            // Get the point at the intersection of the line defined by the center of the sphere and of vector dir orthovec\r\n            // and the weight line going through (0,thick0)  and orthogonal to orthovec\r\n            var t = (thick0*this.ortho_vec_y - this.p_proj_x*this.ortho_vec_x)/(this.ortho_vec_x*this.ortho_vec_x+this.ortho_vec_y*this.ortho_vec_y);\r\n            var inter_proj_x = this.p_proj_x +t*this.ortho_vec_x;\r\n            var inter_proj_y = t*this.ortho_vec_y;\r\n            // If inside the min acc is found according to the sphere normal radius\r\n            var newR = sphere.radius;\r\n            if (this.y_p_2D > inter_proj_y){\r\n                // If we are outside the segment, the sphere intersection with the weight line is computed\r\n                var sub1 = this.x_p_2D-inter_proj_x;\r\n                var sub2 = this.y_p_2D-inter_proj_y;\r\n                var dist = Math.sqrt(sub1*sub1 +sub2*sub2);\r\n                // Pythagore this\r\n                newR = Math.sqrt(sphere.radius*sphere.radius-dist*dist);\r\n            }\r\n            var tmp = this.abs_diff_thick/this.length;\r\n            var half_delta = newR*Math.sqrt(1+tmp*tmp)*0.5;\r\n        */\r\n        // Thales between two triangles that have the same angles gives us the dist of:\r\n        // side A = sphere.radius*this.abs_diff_thick/this.length;\r\n        // Then pythagore this shit up as A² + sphere.radius² = delta²\r\n        // i.e delta² = (sphere.radius*this.abs_diff_thick/this.length)² + sphere.radius²\r\n        // <=> delta = sphere.radius*Math.sqrt(1+(this.abs_diff_thick/this.length)²);\r\n\r\n        var tmp = this.abs_diff_thick / this.length;\r\n        var half_delta = sphere.radius * Math.sqrt(1 + tmp * tmp) * 0.5;\r\n\r\n        // we check only the direction where the weight is minimum since\r\n        // we will return minimum accuracy needed in the area.\r\n        var absc = this.p_proj_x;\r\n        absc += this.thick0 > this.thick1 ? half_delta : -half_delta;\r\n\r\n        if (absc < 0.0) {\r\n            return this.thick0 * factor;\r\n        } else if (absc > this.length) {\r\n            return this.thick1 * factor;\r\n        } else {\r\n\r\n            var tt = absc / this.length;\r\n            var inter_w = this.thick0 * (1.0 - tt) + tt * this.thick1;\r\n            return inter_w * factor;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @link Area.getNiceAcc for a complete description\r\n     *  @param {AreaSphereParam}  sphere A sphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @return {number} The Nice accuracy needed in the intersection zone\r\n     */\r\n    getNiceAcc(sphere) {\r\n        return this.getAcc(sphere, Accuracies.nice);\r\n    }\r\n\r\n    /**\r\n     *  @link Area.getNiceAcc for a complete description\r\n     *  @param {AreaSphereParam}  sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @return {number} The Curr accuracy needed in the intersection zone\r\n     */\r\n    getCurrAcc = function (sphere) {\r\n        return this.getAcc(sphere, Accuracies.curr);\r\n    }\r\n\r\n    /**\r\n     *  @link Area.getRawAcc for a complete description\r\n     *  @param {AreaSphereParam}  sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @return {number} The raw accuracy needed in the intersection zone\r\n     */\r\n    getRawAcc(sphere) {\r\n        return this.getAcc(sphere, Accuracies.raw);\r\n    }\r\n\r\n    /**\r\n     * @link Area.getMinAcc\r\n     * @return {number}\r\n     */\r\n    getMinAcc() {\r\n        return Accuracies.curr * Math.min(this.thick0, this.thick1);\r\n    }\r\n\r\n    /**\r\n     * @link Area.getMinRawAcc\r\n     * @return {number}\r\n     */\r\n    getMinRawAcc() {\r\n        return Accuracies.raw * Math.min(this.thick0, this.thick1);\r\n    }\r\n\r\n    /**\r\n     *  Return the minimum accuracy required at some point on the given axis, according to Accuracies.curr\r\n     *  The returned accuracy is the one you would need when stepping in the axis\r\n     *  direction when you are on the axis at coordinate t.\r\n     *  @param {string} axis x, y or z\r\n     *  @param {number} t Coordinate on the axis\r\n     *  @return {number} The step you can safely do in axis direction\r\n     */\r\n    getAxisProjectionMinStep(axis, t) {\r\n        var step = Number.MAX_VALUE;\r\n        var p0 = this.p0[axis] < this.p1[axis] ? this.p0 : this.p1;\r\n        var p1, thick0, thick1;\r\n        if (p0 === this.p0) {\r\n            p1 = this.p1;\r\n            thick0 = this.thick0;\r\n            thick1 = this.thick1;\r\n        } else {\r\n            p1 = this.p0;\r\n            thick0 = this.thick1;\r\n            thick1 = this.thick0;\r\n        }\r\n\r\n        var diff = t - p0[axis];\r\n        if (diff < -2 * thick0) {\r\n            step = Math.min(step, Math.max(Math.abs(diff + 2 * thick0), Accuracies.curr * thick0));\r\n        } else if (diff < 2 * thick0) {\r\n            step = Math.min(step, Accuracies.curr * thick0);\r\n        }// else the vertex is behind us\r\n        diff = t - p1[axis];\r\n        if (diff < -2 * thick1) {\r\n            step = Math.min(step, Math.max(Math.abs(diff + 2 * thick1), Accuracies.curr * thick1));\r\n        } else if (diff < 2 * thick1) {\r\n            step = Math.min(step, Accuracies.curr * thick1);\r\n        }// else the vertex is behind us\r\n\r\n        var tbis = t - p0[axis];\r\n        var axis_l = p1[axis] - p0[axis];\r\n        if (tbis > 0 && tbis < axis_l && axis_l !== 0) {\r\n            // t is in p0p1\r\n            step = Math.min(step, Accuracies.curr * (thick0 + (tbis / axis_l) * (thick1 - thick0)));\r\n        }\r\n\r\n        return step;\r\n    }\r\n}\r\n\r\n\r\n\r\nmodule.exports = AreaScalisSeg;\r\n\r\n\r\n","\"use strict\";\r\n\r\nconst THREE = require(\"three\");\r\nconst Types = require(\"../Types.js\");\r\nconst Material = require(\"../Material.js\");\r\nconst ScalisPrimitive = require(\"./ScalisPrimitive.js\");\r\nconst ScalisVertex = require(\"./ScalisVertex.js\");\r\nconst ScalisMath = require(\"./ScalisMath.js\");\r\nconst AreaScalisSeg = require(\"../areas/AreaScalisSeg.js\");\r\n\r\n/** @typedef {import('./ScalisPrimitive').ScalisPrimitiveJSON} ScalisPrimitiveJSON */\r\n\r\n/**\r\n * @typedef {{density:number} & ScalisPrimitiveJSON} ScalisSegmentJSON\r\n */\r\n\r\n/**\r\n *  Implicit segment class in the blobtree.\r\n *\r\n *  @constructor\r\n *  @extends ScalisPrimitive\r\n */\r\nclass ScalisSegment extends ScalisPrimitive {\r\n\r\n    static type = \"ScalisSegment\";\r\n\r\n    /**\r\n     * @param {ScalisSegmentJSON} json\r\n     * @returns {ScalisSegment}\r\n     */\r\n    static fromJSON(json) {\r\n        var v0 = ScalisVertex.fromJSON(json.v[0]);\r\n        var v1 = ScalisVertex.fromJSON(json.v[1]);\r\n        var m = [\r\n            Material.fromJSON(json.materials[0]),\r\n            Material.fromJSON(json.materials[1])\r\n        ];\r\n        return new ScalisSegment(v0, v1, json.volType, json.density, m);\r\n    };\r\n\r\n    /**\r\n     *  @param {!ScalisVertex} v0 First vertex for the segment\r\n     *  @param {!ScalisVertex} v1 Second vertex for the segment\r\n     *  @param {!string} volType Volume type, can be ScalisPrimitive.CONVOL\r\n     *                 (homothetic convolution surfaces, Zanni and al), or\r\n     *                 ScalisPrimitive.DIST (classic weighted distance field)\r\n     *  @param {number} density Density is another constant to modulate the implicit\r\n     *                  field. Used only for DIST voltype.\r\n     *  @param {!Array.<Material>} mats Material for this primitive.\r\n     *                                  Use [Material.defaultMaterial.clone(), Material.defaultMaterial.clone()] by default.\r\n     *\r\n     */\r\n    constructor(v0, v1, volType, density, mats) {\r\n        super();\r\n\r\n        this.v.length = 2;\r\n        this.v[0] = v0;\r\n        this.v[1] = v1;\r\n        v0.setPrimitive(this);\r\n        v1.setPrimitive(this);\r\n\r\n        this.volType = volType;\r\n        this.density = density;\r\n        this.materials = mats;\r\n\r\n        // Temporary for eval\r\n        // TODO : should be wrapped in the eval function scope if possible (ie not precomputed)\r\n        // CONVOL\r\n        this.clipped_l1 = 1.0;\r\n        this.clipped_l2 = 0.0;\r\n        this.vector = new THREE.Vector3();\r\n        this.cycle = new THREE.Vector3();\r\n        this.proj = new THREE.Vector3();\r\n        // helper attributes\r\n        this.v0_p = this.v[0].getPos();\r\n        this.v1_p = this.v[1].getPos(); // this one is probably useless to be kept for eval since not used....\r\n        this.dir = new THREE.Vector3();\r\n        this.lengthSq = 0;\r\n        this.length = 0;\r\n        this.unit_dir = new THREE.Vector3();\r\n        // weight_p1 is convol's weight_p2 ( >_< )\r\n        this.weight_p1 = 0;\r\n        // c0 and c1 are convol's weight_coeff\r\n        this.c0 = 0;\r\n        this.c1 = 0;\r\n\r\n        this.increase_unit_dir = new THREE.Vector3();\r\n        this.p_min = new THREE.Vector3();\r\n        this.weight_min = 0;\r\n        this.inv_weight_min = 0;\r\n        this.unit_delta_weight = 0;\r\n\r\n        this.maxbound = 0;\r\n        this.maxboundSq = 0;\r\n        this.cyl_bd0 = 0;\r\n        this.cyl_bd1 = 0;\r\n        this.f0f1f2 = new THREE.Vector3();\r\n\r\n        this.tmpVec1 = new THREE.Vector3();\r\n        this.tmpVec2 = new THREE.Vector3();\r\n\r\n        this.computeHelpVariables();\r\n    }\r\n\r\n    getType() {\r\n        return ScalisSegment.type;\r\n    };\r\n\r\n    /**\r\n     * @returns {ScalisSegmentJSON}\r\n     */\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            density: this.density\r\n        };\r\n    };\r\n\r\n    mutableVolType() {\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     *  @param {number} d The new density\r\n     */\r\n    setDensity(d) {\r\n        this.density = d;\r\n        this.invalidAABB();\r\n    };\r\n\r\n    /**\r\n     *  @return {number} The current density\r\n     */\r\n    getDensity() {\r\n        return this.density;\r\n    };\r\n\r\n    // [Abstract] See Primitive.setVolType for more details\r\n    setVolType(vt) {\r\n        if (!(vt == ScalisPrimitive.CONVOL || vt == ScalisPrimitive.DIST)) {\r\n            throw \"ERROR : volType must be set to ScalisPrimitive.CONVOL or ScalisPrimitive.DIST\";\r\n        }\r\n\r\n        if (this.volType != vt) {\r\n            this.volType = vt;\r\n            this.invalidAABB();\r\n        }\r\n    };\r\n\r\n    // [Abstract] See Primitive.getVolType for more details\r\n    getVolType() {\r\n        return this.volType;\r\n    };\r\n\r\n    // [Abstract] See Primitive.prepareForEval for more details\r\n    prepareForEval() {\r\n        if (!this.valid_aabb) {\r\n            this.computeHelpVariables();\r\n            this.valid_aabb = true;\r\n        }\r\n    };\r\n\r\n    // [Abstract] See Primtive.getArea for more details\r\n    getAreas() {\r\n        if (!this.valid_aabb) {\r\n            console.error(\"ERROR : Cannot get area of invalid primitive\");\r\n            return [];\r\n        } else {\r\n            return [{\r\n                aabb: this.aabb,\r\n                //new THREE.Box3(-256, -256, -256, 256,256,256),\r\n                //new THREE.Box3(this.aabb.min_x-min_thick,this.aabb.min_y-min_thick,this.aabb.min_z-min_thick,\r\n                //this.aabb.max_x+min_thick,this.aabb.max_y+min_thick,this.aabb.max_z+min_thick),\r\n                bv: new AreaScalisSeg(\r\n                    this.v[0].getPos(),\r\n                    this.v[1].getPos(),\r\n                    this.v[0].getThickness(),\r\n                    this.v[1].getThickness()\r\n                ),\r\n                obj: this\r\n            }];\r\n        }\r\n    };\r\n\r\n    // [Abstract] See Primitive.computeHelpVariables for more details\r\n    computeHelpVariables() {\r\n        this.v0_p = this.v[0].getPos();\r\n        this.v1_p = this.v[1].getPos(); // this one is probably useless to be kept for eval since not used....\r\n\r\n        this.dir.subVectors(this.v1_p, this.v0_p);\r\n        this.lengthSq = this.dir.lengthSq();\r\n        this.length = Math.sqrt(this.lengthSq);\r\n        this.unit_dir.copy(this.dir).normalize();\r\n\r\n        this.weight_p1 = this.v[1].getThickness();\r\n        this.c0 = this.v[0].getThickness();\r\n        this.c1 = this.v[1].getThickness() - this.v[0].getThickness();\r\n\r\n        // Bounding property\r\n        // bounding box is axis aligned so the bounding is not very tight.\r\n        var bound_supp0 = this.v[0].getThickness() * ScalisMath.KS;\r\n        var bound_supp1 = this.v[1].getThickness() * ScalisMath.KS;\r\n\r\n        this.maxbound = Math.max(bound_supp0, bound_supp1);\r\n        this.maxboundSq = this.maxbound * this.maxbound;\r\n\r\n        // Speed up var for cylinder bounding\r\n        // Used only in evalConvol\r\n        this.cyl_bd0 = Math.min(-bound_supp0, this.length - bound_supp1);\r\n        this.cyl_bd1 = Math.max(this.length + bound_supp1, bound_supp0);\r\n\r\n        this.increase_unit_dir.copy(this.unit_dir);\r\n        // weight help variables\r\n        if (this.c1 < 0) {\r\n            this.p_min.copy(this.v1_p);\r\n            this.weight_min = this.weight_p1;\r\n            this.inv_weight_min = 1 / this.weight_p1;\r\n            this.increase_unit_dir.negate();\r\n            this.unit_delta_weight = -this.c1 / this.length;\r\n        }\r\n        else {\r\n            this.p_min.copy(this.v0_p);\r\n            // weight_p0 is c0\r\n            this.weight_min = this.c0;\r\n            this.inv_weight_min = 1 / this.c0;\r\n            this.unit_delta_weight = this.c1 / this.length;\r\n        }\r\n\r\n        this.computeAABB();\r\n    };\r\n\r\n    // [Abstract] See Primitive.value for more details\r\n    value(p, res) {\r\n        switch (this.volType) {\r\n            case ScalisPrimitive.DIST:\r\n                this.evalDist(p, res);\r\n                break;\r\n            case ScalisPrimitive.CONVOL:\r\n                this.evalConvol(p, res);\r\n                break;\r\n            default:\r\n                throw \"Unknown volType, cannot evaluate.\";\r\n        }\r\n    };\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // Distance Evaluation functions and auxiliaary functions\r\n    // Note : for the mech primitive we use a CompactPolynomial6 kernel.\r\n    //        TODO : the orga should use the same for better smoothness\r\n\r\n    /**\r\n     *  value function for Distance volume type (distance field).\r\n     */\r\n    evalDist = (function () {\r\n        var ev_eps = { v: 0 };\r\n        var p_eps = new THREE.Vector3();\r\n        return function (p, res) {\r\n\r\n            var p0_to_p = this.vector;\r\n            p0_to_p.subVectors(p, this.v[0].getPos());\r\n\r\n            // Documentation : see DistanceHomothetic.pdf in convol/Documentation/Convol-Core/\r\n            var orig_p_scal_dir = p0_to_p.dot(this.dir);\r\n            var orig_p_sqr = p0_to_p.lengthSq();\r\n\r\n            var denum = this.lengthSq * this.c0 + orig_p_scal_dir * this.c1;\r\n            var t = (this.c1 < 0) ? 0 : 1;\r\n            if (denum > 0.0) {\r\n                t = orig_p_scal_dir * this.c0 + orig_p_sqr * this.c1;\r\n                t = (t < 0.0) ? 0.0 : ((t > denum) ? 1.0 : t / denum); // clipping (nearest point on segment not line)\r\n            }\r\n\r\n            // Optim the below code... But keep the old code it's more understandable\r\n            var proj_p_l = Math.sqrt(t * (t * this.lengthSq - 2 * orig_p_scal_dir) + orig_p_sqr);\r\n            //var proj_to_point = this.proj;\r\n            //proj_to_point.set(\r\n            //    t*this.dir.x - p0_to_p.x,\r\n            //    t*this.dir.y - p0_to_p.y,\r\n            //    t*this.dir.z - p0_to_p.z\r\n            //);\r\n            //var proj_p_l = proj_to_point.length();\r\n\r\n            var weight_proj = this.c0 + t * this.c1;\r\n            res.v = this.density * ScalisMath.Poly6Eval(proj_p_l / weight_proj) * ScalisMath.Poly6NF0D;\r\n\r\n            ///////////////////////////////////////////////////////////////////////\r\n            // Material computation : by orthogonal projection\r\n            if (res.m) {\r\n                this.evalMat(p, res);\r\n            }\r\n\r\n            // IMPORTANT NOTE :\r\n            // We should use an analytical gradient here. It should be possible to\r\n            // compute.\r\n            if (res.g) {\r\n                var epsilon = 0.00001;\r\n                var d_over_eps = this.density / epsilon;\r\n                p_eps.copy(p);\r\n                p_eps.x += epsilon;\r\n                this.evalDist(p_eps, ev_eps);\r\n                res.g.x = d_over_eps * (ev_eps.v - res.v);\r\n                p_eps.x -= epsilon;\r\n\r\n                p_eps.y += epsilon;\r\n                this.evalDist(p_eps, ev_eps);\r\n                res.g.y = d_over_eps * (ev_eps.v - res.v);\r\n                p_eps.y -= epsilon;\r\n\r\n                p_eps.z += epsilon;\r\n                this.evalDist(p_eps, ev_eps);\r\n                res.g.z = d_over_eps * (ev_eps.v - res.v);\r\n            }\r\n        };\r\n    })();\r\n\r\n/**\r\n *\r\n * @param {THREE.Vector3} p Evaluation point\r\n * @param {Object} res Resulting material will be in res.m\r\n */\r\n    evalMat(p, res) {\r\n        var p0_to_p = this.vector;\r\n        p0_to_p.subVectors(p, this.v[0].getPos());\r\n        var udir_dot = this.unit_dir.dot(p0_to_p);\r\n        var s = (udir_dot / this.length);\r\n\r\n        // Material interpolation\r\n        if (s > 1.0) {\r\n            res.m.copy(this.materials[1]);\r\n        }\r\n        else {\r\n            if (s <= 0.0) {\r\n                res.m.copy(this.materials[0]);\r\n            }\r\n            else {\r\n                // (1-s)*m0 + s*m1\r\n                res.m.copy(this.materials[0]);\r\n                res.m.lerp(this.materials[1], s);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n *  @param {!THREE.Vector3} w special_coeff\r\n *  @return {boolean}\r\n */\r\n    HomotheticClippingSpecial(w) {\r\n        // we search solution t \\in [0,1] such that at^2-2bt+c<=0\r\n        var a = -w.z;\r\n        var b = -w.y;\r\n        var c = -w.x;\r\n\r\n        var delta = b * b - a * c;\r\n        if (delta >= 0.0) {\r\n            var b_p_sqrt_delta = b + Math.sqrt(delta);\r\n            if ((b_p_sqrt_delta < 0.0) || (this.length * b_p_sqrt_delta < c)) {\r\n                return false;\r\n            }\r\n            else {\r\n                var main_root = c / b_p_sqrt_delta;\r\n                this.clipped_l1 = (main_root < 0.0) ? 0.0 : main_root;\r\n                var a_r = a * main_root;\r\n                this.clipped_l2 = (2.0 * b < a_r + a * this.length) ? c / (a_r) : this.length;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n// [Abstract] see ScalisPrimitive.heuristicStepWithin\r\n    heuristicStepWithin() {\r\n        return this.weight_min / 3;\r\n    };\r\n\r\n///////////////////////////////////////////////////////////////////////////\r\n// Convolution Evaluation functions and auxiliaary functions\r\n/**\r\n *  value function for Convol volume type (Homothetic convolution).\r\n */\r\n    evalConvol(p, res) {\r\n        if (!this.valid_aabb) {\r\n            throw \"Error : prepareForEval should have been called\";\r\n        }\r\n        // init\r\n        if (res.g)\r\n            res.g.set(0, 0, 0);\r\n        res.v = 0;\r\n\r\n        var p_min_to_point = this.tmpVec1;\r\n        p_min_to_point.subVectors(p, this.p_min);\r\n\r\n        var uv = this.increase_unit_dir.dot(p_min_to_point);\r\n        var d2 = p_min_to_point.lengthSq();\r\n\r\n        var special_coeff = this.tmpVec2;\r\n        special_coeff.set(\r\n            this.weight_min * this.weight_min - ScalisMath.KIS2 * d2,\r\n            -this.unit_delta_weight * this.weight_min - ScalisMath.KIS2 * uv,\r\n            this.unit_delta_weight * this.unit_delta_weight - ScalisMath.KIS2);\r\n\r\n        // clipped_l1, clipped_l2 are members of segment\r\n        if (this.HomotheticClippingSpecial(special_coeff)) {\r\n            var inv_local_min_weight = 1.0 / (this.weight_min + this.clipped_l1 * this.unit_delta_weight);\r\n            special_coeff.x = 1.0 - ScalisMath.KIS2 * (this.clipped_l1 * (this.clipped_l1 - 2.0 * uv) + d2) * inv_local_min_weight * inv_local_min_weight;\r\n            special_coeff.y = - this.unit_delta_weight - ScalisMath.KIS2 * (uv - this.clipped_l1) * inv_local_min_weight;\r\n\r\n            if (res.g) //both grad and value\r\n            {\r\n                if (this.unit_delta_weight >= 0.06) { // ensure a maximum relative error of ??? (for degree i up to 8)\r\n                    this.HomotheticCompactPolynomial_segment_FGradF_i6((this.clipped_l2 - this.clipped_l1) *\r\n                        inv_local_min_weight,\r\n                        this.unit_delta_weight,\r\n                        special_coeff);\r\n                } else {\r\n                    this.HomotheticCompactPolynomial_approx_segment_FGradF_i6((this.clipped_l2 - this.clipped_l1) *\r\n                        inv_local_min_weight,\r\n                        this.unit_delta_weight,\r\n                        this.inv_weight_min,\r\n                        special_coeff);\r\n                }\r\n\r\n\r\n                res.v = ScalisMath.Poly6NF1D * this.f0f1f2.x;\r\n                this.f0f1f2.y *= inv_local_min_weight;\r\n                res.g\r\n                    .copy(this.increase_unit_dir)\r\n                    .multiplyScalar(this.f0f1f2.z + this.clipped_l1 * this.f0f1f2.y)\r\n                    .sub(p_min_to_point.multiplyScalar(this.f0f1f2.y))\r\n                    .multiplyScalar(ScalisMath.Poly6NF1D * 6.0 * ScalisMath.KIS2 * inv_local_min_weight);\r\n            }\r\n            else //value only\r\n            {\r\n                if (this.unit_delta_weight >= 0.06) { // ensure a maximum relative error of ??? (for degree i up to 8)\r\n                    res.v = ScalisMath.Poly6NF1D *\r\n                        this.HomotheticCompactPolynomial_segment_F_i6((this.clipped_l2 - this.clipped_l1) *\r\n                            inv_local_min_weight,\r\n                            this.unit_delta_weight,\r\n                            special_coeff);\r\n                } else {\r\n                    res.v = ScalisMath.Poly6NF1D *\r\n                        this.HomotheticCompactPolynomial_approx_segment_F_i6((this.clipped_l2 - this.clipped_l1) *\r\n                            inv_local_min_weight,\r\n                            this.unit_delta_weight,\r\n                            inv_local_min_weight,\r\n                            special_coeff);\r\n                }\r\n            }\r\n\r\n            if (res.m) {\r\n                this.evalMat(p, res);\r\n            }\r\n        }\r\n    };\r\n\r\n/**\r\n *  Clamps a number. Based on Zevan's idea: http://actionsnippet.com/?p=475\r\n *  @param {number} a\r\n *  @param {number} b\r\n *  @param {number} c\r\n *  @return {number} Clamped value\r\n *  Author: Jakub Korzeniowski\r\n *  Agency: Softhis\r\n *  http://www.softhis.com\r\n */\r\n    clamp(a, b, c) { return Math.max(b, Math.min(c, a)); };\r\n\r\n// [Abstract] see ScalisPrimitive.distanceTo\r\n    distanceTo = (function() {\r\n        var tmpVector = new THREE.Vector3();\r\n        var tmpVectorProj = new THREE.Vector3();\r\n        return function (p) {\r\n            /** @type {ScalisSegment} */\r\n            let self = this;\r\n            // var thickness = Math.min(this.c0,this.c0+this.c1);\r\n\r\n            // return distance point/segment\r\n            // don't take thickness into account\r\n            var t = tmpVector.subVectors(p, self.v[0].getPos())\r\n                .dot(self.dir) / self.lengthSq;\r\n\r\n            // clamp is our own function declared there\r\n            t = self.clamp(t, 0, 1);\r\n            tmpVectorProj.copy(self.dir)\r\n                .multiplyScalar(t)\r\n                .add(self.v[0].getPos());\r\n            return p.distanceTo(tmpVectorProj);\r\n        };\r\n    })();\r\n\r\n/**\r\n *  Sub-function for optimized convolution value computation (Homothetic Compact Polynomial).*\r\n *  Function designed by Cedric Zanni, optimized for C++ using matlab.\r\n *  @param {number} l\r\n *  @param {number} d\r\n *  @param {!Object} w\r\n *  @return {number} the value\r\n */\r\n    HomotheticCompactPolynomial_segment_F_i6(l, d, w) {\r\n        var t6247 = d * l + 0.1e1;\r\n        var t6241 = 0.1e1 / t6247;\r\n        var t6263 = t6247 * t6247;\r\n        var t2 = t6263 * t6263;\r\n        var t6244 = 0.1e1 / t2;\r\n        var t6252 = w.y;\r\n        var t6249 = t6252 * t6252;\r\n        var t6273 = 0.12e2 * t6249;\r\n        var t6258 = 0.1e1 / d;\r\n        var t6271 = t6252 * t6258;\r\n        var t6264 = t6247 * t6263;\r\n        var t6257 = l * l;\r\n        var t6260 = t6257 * t6257;\r\n        var t6259 = l * t6257;\r\n        var t6254 = l * t6260;\r\n        var t6253 = w.x;\r\n        var t6251 = w.z;\r\n        var t6250 = t6253 * t6253;\r\n        var t6248 = t6251 * t6251;\r\n        var t3 = t6264 * t6264;\r\n        var t6246 = 0.1e1 / t3;\r\n        var t6245 = t6241 * t6244;\r\n        var t6243 = 0.1e1 / t6264;\r\n        var t6242 = 0.1e1 / t6263;\r\n        var t71 = Math.log(t6247);\r\n        var t93 = t6259 * t6259;\r\n        return -t6248 * (((((-(t6241 - 0.1e1) * t6258 - l * t6242) * t6258 - t6257 * t6243) * t6258 - t6259 * t6244) * t6258 - t6260 * t6245) * t6258 - t6254 * t6246) * t6271 + (-t6253 * (t6246 - 0.1e1) * t6258 / 0.6e1 - (-(t6245 - 0.1e1) * t6258 / 0.5e1 - l * t6246) * t6271) * t6250 + ((t6253 * t6273 + 0.3e1 * t6251 * t6250) * (0.2e1 / 0.5e1 * (-(t6244 - 0.1e1) * t6258 / 0.4e1 - l * t6245) * t6258 - t6257 * t6246) + (0.3e1 * t6248 * t6253 + t6251 * t6273) * (0.4e1 / 0.5e1 * (0.3e1 / 0.4e1 * (0.2e1 / 0.3e1 * (-(t6242 - 0.1e1) * t6258 / 0.2e1 - l * t6243) * t6258 - t6257 * t6244) * t6258 - t6259 * t6245) * t6258 - t6260 * t6246) + t6251 * t6248 * (0.6e1 / 0.5e1 * (0.5e1 / 0.4e1 * (0.4e1 / 0.3e1 * (0.3e1 / 0.2e1 * (0.2e1 * (t71 * t6258 - l * t6241) * t6258 - t6257 * t6242) * t6258 - t6259 * t6243) * t6258 - t6260 * t6244) * t6258 - t6254 * t6245) * t6258 - t93 * t6246) + (-0.12e2 * t6251 * t6253 - 0.8e1 * t6249) * (0.3e1 / 0.5e1 * ((-(t6243 - 0.1e1) * t6258 / 0.3e1 - l * t6244) * t6258 / 0.2e1 - t6257 * t6245) * t6258 - t6259 * t6246) * t6252) * t6258 / 0.6e1;\r\n    };\r\n\r\n/**\r\n *  Sub-function for optimized convolution value computation (Homothetic Compact Polynomial).\r\n *  (Approximation? Faster?).\r\n *  Function designed by Cedric Zanni, optimized for C++ using matlab.\r\n *  @param {number} l\r\n *  @param {number} d\r\n *  @param {number} q\r\n *  @param {!Object} w\r\n */\r\n    HomotheticCompactPolynomial_approx_segment_F_i6(l, d, q, w) {\r\n        var t6386 = q * d;\r\n        var t6361 = t6386 + 0.1e1;\r\n        var t6387 = 0.1e1 / t6361;\r\n        var t1 = t6361 * t6361;\r\n        var t2 = t1 * t1;\r\n        var t6359 = t6387 / t2 / t1;\r\n        var t6363 = w.z;\r\n        var t6364 = w.y;\r\n        var t6365 = w.x;\r\n        var t6366 = l * l;\r\n        var t6356 = t6363 * t6366 - 0.2e1 * t6364 * l + t6365;\r\n        var t9 = t6364 * t6364;\r\n        var t6357 = t6363 * t6365 - t9;\r\n        var t6358 = t6363 * l - t6364;\r\n        var t6377 = t6365 * t6365;\r\n        var t6381 = t6364 * t6377;\r\n        var t6369 = t6356 * t6356;\r\n        var t6383 = t6358 * t6369;\r\n        var t6362 = 0.1e1 / t6363;\r\n        var t6384 = t6357 * t6362;\r\n        var t6385 = 0.6e1 / 0.35e2 * (0.4e1 / 0.3e1 * (0.2e1 * t6357 * l + t6358 * t6356 + t6364 * t6365) * t6384 + t6383 + t6381) * t6384 + t6356 * t6383 / 0.7e1 + t6365 * t6381 / 0.7e1;\r\n        var t6380 = t6362 * t6385;\r\n        var t6360 = t6387 * t6359;\r\n        var t6355 = t6369 * t6369;\r\n        var t27 = t6377 * t6377;\r\n        var t6353 = t6364 * t6380 + t6355 / 0.8e1 - t27 / 0.8e1;\r\n        // eslint-disable-next-line no-loss-of-precision\r\n        var t6352 = -l * t6355 + (-0.10e2 * t6364 * t6353 + t6365 * t6385) * t6362;\r\n        var t65 = q * q;\r\n        return t6380 - 0.7e1 * d * t6353 * t6362 + (-0.1111111111e0 * (0.3e1 * t6359 - 0.300e1 + 0.7e1 * (0.2e1 + t6360) * t6386) * t6352 - 0.1000000000e0 * (0.2e1 - 0.200e1 * t6359 - 0.7e1 * (0.1e1 + t6360) * t6386) / q * (-0.1e1 * t6366 * t6355 + (0.1333333333e1 * t6364 * t6352 + 0.2e1 * t6365 * t6353) * t6362)) * t6362 / t65;\r\n    };\r\n\r\n/**\r\n *  Sub-function for optimized convolution value and gradient computation (Homothetic Compact Polynomial).\r\n *  Function designed by Cedric Zanni, optimized for C++ using matlab.\r\n *  Result is stored in this.f0f1f2\r\n *  @param {number} l\r\n *  @param {number} d\r\n *  @param {!Object} w\r\n *\r\n */\r\n    HomotheticCompactPolynomial_segment_FGradF_i6(l, d, w) {\r\n        var t6320 = d * l + 0.1e1;\r\n        var t6314 = 0.1e1 / t6320;\r\n        var t6336 = t6320 * t6320;\r\n        var t2 = t6336 * t6336;\r\n        var t6317 = 0.1e1 / t2;\r\n        var t6325 = w.y;\r\n        var t6322 = t6325 * t6325;\r\n        var t6351 = 0.2e1 * t6322;\r\n        var t6324 = w.z;\r\n        var t6326 = w.x;\r\n        var t6350 = t6324 * t6326 / 0.3e1 + 0.2e1 / 0.3e1 * t6322;\r\n        var t6321 = t6324 * t6324;\r\n        var t6349 = t6321 / 0.6e1;\r\n        var t6348 = -0.2e1 / 0.3e1 * t6324;\r\n        var t6337 = t6320 * t6336;\r\n        var t6316 = 0.1e1 / t6337;\r\n        var t6318 = t6314 * t6317;\r\n        var t7 = t6337 * t6337;\r\n        var t6319 = 0.1e1 / t7;\r\n        var t6330 = l * l;\r\n        var t6331 = 0.1e1 / d;\r\n        var t6332 = l * t6330;\r\n        var t6309 = 0.3e1 / 0.5e1 * ((-(t6316 - 0.1e1) * t6331 / 0.3e1 - l * t6317) * t6331 / 0.2e1 - t6330 * t6318) * t6331 - t6332 * t6319;\r\n        var t6347 = t6309 * t6325;\r\n        var t6311 = -(t6318 - 0.1e1) * t6331 / 0.5e1 - l * t6319;\r\n        var t6323 = t6326 * t6326;\r\n        var t6346 = t6323 * t6311;\r\n        var t6310 = 0.2e1 / 0.5e1 * (-(t6317 - 0.1e1) * t6331 / 0.4e1 - l * t6318) * t6331 - t6330 * t6319;\r\n        var t6345 = t6326 * t6310;\r\n        var t6344 = -t6323 * (t6319 - 0.1e1) / 0.6e1;\r\n        var t6333 = t6330 * t6330;\r\n        var t6327 = l * t6333;\r\n        var t6315 = 0.1e1 / t6336;\r\n        var t6308 = 0.4e1 / 0.5e1 * (0.3e1 / 0.4e1 * (0.2e1 / 0.3e1 * (-(t6315 - 0.1e1) * t6331 / 0.2e1 - l * t6316) * t6331 - t6330 * t6317) * t6331 - t6332 * t6318) * t6331 - t6333 * t6319;\r\n        var t6307 = ((((-(t6314 - 0.1e1) * t6331 - l * t6315) * t6331 - t6330 * t6316) * t6331 - t6332 * t6317) * t6331 - t6333 * t6318) * t6331 - t6327 * t6319;\r\n        var t81 = t6332 * t6332;\r\n        var t92 = Math.log(t6320);\r\n        this.f0f1f2.x = (t6326 * t6344 - t6325 * t6346 + t6345 * t6351 - 0.4e1 / 0.3e1 * t6322 * t6347 + (t6323 * t6310 / 0.2e1 + t6308 * t6351 - 0.2e1 * t6326 * t6347) * t6324 + (t6326 * t6308 / 0.2e1 - t6325 * t6307 + (-t81 * t6319 / 0.6e1 + (-t6327 * t6318 / 0.5e1 + (-t6333 * t6317 / 0.4e1 + (-t6332 * t6316 / 0.3e1 + (-t6330 * t6315 / 0.2e1 + (t92 * t6331 - l * t6314) * t6331) * t6331) * t6331) * t6331) * t6331) * t6324) * t6321) * t6331;\r\n        this.f0f1f2.y = (t6344 + t6310 * t6350 + t6308 * t6349 + (-0.2e1 / 0.3e1 * t6326 * t6311 + t6309 * t6348) * t6325) * t6331;\r\n        this.f0f1f2.z = (t6346 / 0.6e1 + t6309 * t6350 + t6307 * t6349 + (-0.2e1 / 0.3e1 * t6345 + t6308 * t6348) * t6325) * t6331;\r\n    };\r\n\r\n/**\r\n *  Sub-function for optimized convolution value and gradient computation (Homothetic Compact Polynomial).\r\n *  Function designed by Cedric Zanni, optimized for C++ using matlab.\r\n *  Result is stored in this.f0f1f2\r\n *  @param {number} l\r\n *  @param {number} d\r\n *  @param {!Object} w\r\n */\r\n    HomotheticCompactPolynomial_approx_segment_FGradF_i6(l, d, q, w) {\r\n        var t6478 = q * d;\r\n        var t6443 = t6478 + 0.1e1;\r\n        var t6479 = 0.1e1 / t6443;\r\n        var t1 = q * q;\r\n        var t6449 = 0.1e1 / t1;\r\n        var t2 = t6443 * t6443;\r\n        var t3 = t2 * t2;\r\n        var t6441 = t6479 / t3 / t2;\r\n        var t6448 = w.x;\r\n        var t6477 = 0.2e1 * t6448;\r\n        var t6446 = w.z;\r\n        var t6444 = 0.1e1 / t6446;\r\n        var t6476 = d * t6444;\r\n        var t6447 = w.y;\r\n        var t6451 = l * l;\r\n        var t6438 = t6446 * t6451 - 0.2e1 * t6447 * l + t6448;\r\n        var t6455 = t6438 * t6438;\r\n        var t6437 = t6438 * t6455;\r\n        var t6463 = t6448 * t6448;\r\n        var t6445 = t6448 * t6463;\r\n        var t10 = t6447 * t6447;\r\n        var t6439 = t6446 * t6448 - t10;\r\n        var t6440 = t6446 * l - t6447;\r\n        var t6470 = t6439 * t6444;\r\n        var t6433 = 0.4e1 / 0.3e1 * (0.2e1 * t6439 * l + t6440 * t6438 + t6447 * t6448) * t6470 + t6440 * t6455 + t6447 * t6463;\r\n        var t6473 = t6433 / 0.5e1;\r\n        var t6432 = t6447 * t6444 * t6473 + t6437 / 0.6e1 - t6445 / 0.6e1;\r\n        var t6429 = -l * t6437 + (-0.8e1 * t6447 * t6432 + t6448 * t6473) * t6444;\r\n        var t6469 = t6451 * t6437;\r\n        // eslint-disable-next-line no-loss-of-precision\r\n        var t6427 = -t6469 + (0.10e2 / 0.7e1 * t6447 * t6429 + t6432 * t6477) * t6444;\r\n        var t6475 = -t6427 / 0.8e1;\r\n        var t6474 = 0.6e1 / 0.35e2 * t6433 * t6470 + t6440 * t6437 / 0.7e1 + t6447 * t6445 / 0.7e1;\r\n        var t6442 = t6479 * t6441;\r\n        var t6472 = (0.3e1 * t6441 - 0.300e1 + 0.7e1 * (0.2e1 + t6442) * t6478) * t6449;\r\n        var t6471 = (0.2e1 - 0.200e1 * t6441 - 0.7e1 * (0.1e1 + t6442) * t6478) / q * t6449;\r\n        var t6468 = t6444 * t6472;\r\n        var t6467 = t6444 * t6471;\r\n        var t6466 = t6444 * t6474;\r\n        var t6436 = t6455 * t6455;\r\n        var t57 = t6463 * t6463;\r\n        var t6430 = t6447 * t6466 + t6436 / 0.8e1 - t57 / 0.8e1;\r\n        // eslint-disable-next-line no-loss-of-precision\r\n        var t6428 = -l * t6436 + (-0.10e2 * t6447 * t6430 + t6448 * t6474) * t6444;\r\n        // eslint-disable-next-line no-loss-of-precision\r\n        this.f0f1f2.x = t6466 - 0.7e1 * t6430 * t6476 - t6428 * t6468 / 0.9e1 - (-t6451 * t6436 + (0.4e1 / 0.3e1 * t6447 * t6428 + t6430 * t6477) * t6444) * t6467 / 0.10e2;\r\n        this.f0f1f2.y = (t6473 - 0.7e1 * d * t6432 - t6429 * t6472 / 0.7e1 + t6471 * t6475) * t6444;\r\n        this.f0f1f2.z = t6432 * t6444 + t6429 * t6476 + t6468 * t6475 - (-l * t6469 + (0.3e1 / 0.2e1 * t6447 * t6427 - 0.3e1 / 0.7e1 * t6448 * t6429) * t6444) * t6467 / 0.9e1;\r\n    };\r\n    // End of organic evaluation functions\r\n    ////////////////////////////////////////////////////////////////////////////\r\n}\r\n\r\nTypes.register(ScalisSegment.type, ScalisSegment);\r\n\r\nmodule.exports = ScalisSegment;\r\n","'use strict';\r\n\r\nconst THREE = require(\"three\");\r\n\r\nconst Material = require(\"../blobtree/Material\");\r\n\r\n\r\nconst EPSILON = 0.000001;\r\n\r\nconst TriangleUtils = {};\r\n\r\n/*\r\n  ! Triangle extends Primitive and must have the following properties in constructor: !\r\n\r\n    this.p0p1  = new THREE.Vector3();\r\n    this.p1p2 = new THREE.Vector3();\r\n    this.p2p0 = new THREE.Vector3();\r\n    this.unit_normal = new THREE.Vector3();\r\n    this.unit_p0p1 = new THREE.Vector3();\r\n    this.unit_p1p2 = new THREE.Vector3();\r\n    this.unit_p2p0 = new THREE.Vector3();\r\n    this.length_p0p1 = 0;\r\n    this.length_p1p2 = 0;\r\n    this.length_p2p0 = 0;\r\n    this.diffThick_p0p1 = 0;\r\n    this.diffThick_p0p1 = 0;\r\n    this.diffThick_p0p1 = 0;\r\n    this.main_dir = new THREE.Vector3();\r\n    this.point_iso_zero = new THREE.Vector3();\r\n    this.ortho_dir      = new THREE.Vector3();\r\n    this.unsigned_ortho_dir = new THREE.Vector3();\r\n    this.proj_dir       = new THREE.Vector3();\r\n    this.equal_weights = false; // Use to skip computations for a specific case\r\n\r\n    this.coord_max           = 0;\r\n    this.coord_middle        = 0;\r\n    this.unit_delta_weight   = 0;\r\n    this.longest_dir_special = 0;\r\n    this.max_seg_length      = 0;\r\n    this.half_dir_1 = new THREE.Vector3();\r\n    this.point_half = new THREE.Vector3();\r\n    this.half_dir_2 = new THREE.Vector3();\r\n    this.point_min = new THREE.Vector3();\r\n    this.weight_min = 0;\r\n\r\n*/\r\n\r\n/**\r\n * intermediary functions used in computeVectorsDirs\r\n * @param {number} ind\r\n * @param {number} lengthArray\r\n * @return {number}\r\n */\r\nlet cleanIndex = function(ind, lengthArray) {\r\n    let res = ind;\r\n    if (lengthArray === 0) {\r\n        throw new Error(\"Lenght of the array should not be 0\");\r\n    }\r\n    if (lengthArray === 1) {\r\n        return 0;\r\n    }\r\n    // negative index are looped back at the end of the array\r\n    if (ind < 0) res = (lengthArray+ind) % lengthArray;\r\n    // index greater than the array length are looped back at the beginning\r\n    if (ind >= lengthArray) {\r\n        res = ind % lengthArray;\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * A number, or a string containing a number.\r\n * @typedef {Object} VertexLike\r\n * @property {() => THREE.Vector3} getPos\r\n * @property {() => number} getThickness\r\n */\r\n\r\n/**\r\n * A number, or a string containing a number.\r\n * @typedef {Object} TriangleLike\r\n * @property {Array<VertexLike>} v\r\n * @property {THREE.Vector3} p0p1\r\n * @property {THREE.Vector3} p1p2\r\n * @property {THREE.Vector3} p2p0\r\n * @property {THREE.Vector3} unit_p0p1\r\n * @property {THREE.Vector3} unit_p1p2\r\n * @property {THREE.Vector3} unit_p2p0\r\n * @property {THREE.Vector3} unit_normal\r\n * @property {number} length_p0p1\r\n * @property {number} length_p1p2\r\n * @property {number} length_p2p0\r\n * @property {THREE.Vector3} unit_p0p1\r\n * @property {number} diffThick_p0p1\r\n * @property {number} diffThick_p1p2\r\n * @property {number} diffThick_p2p0\r\n * @property {THREE.Vector3} ortho_dir\r\n * @property {THREE.Vector3} point_min\r\n * @property {number} weight_min\r\n * @property {THREE.Vector3} main_dir\r\n * @property {THREE.Vector3} point_iso_zero\r\n * @property {THREE.Vector3} proj_dir\r\n * @property {boolean} equal_weights\r\n * @property {THREE.Vector3} half_dir_1\r\n * @property {THREE.Vector3} point_half\r\n * @property {THREE.Vector3} half_dir_2\r\n * @property {number} coord_max\r\n * @property {number} coord_middle\r\n * @property {number} unit_delta_weight\r\n * @property {THREE.Vector3} longest_dir_special\r\n * @property {number} max_seg_length = tmp.length();\r\n * @property {THREE.Vector3} unsigned_ortho_dir = triangle.ortho_dir.clone();\r\n */\r\n\r\n/**\r\n *  Compute some internal vars for triangle\r\n *  @param {TriangleLike} triangle The triangle to compute vars for (blobtree or skel)\r\n */\r\nTriangleUtils.computeVectorsDirs = function(triangle){\r\n\r\n    let v0_p = triangle.v[0].getPos();\r\n    let v1_p = triangle.v[1].getPos();\r\n    let v2_p = triangle.v[2].getPos();\r\n\r\n    triangle.p0p1.subVectors(v1_p,v0_p);\r\n    triangle.p1p2.subVectors(v2_p,v1_p);\r\n    triangle.p2p0.subVectors(v0_p,v2_p);\r\n\r\n    //triangle.unit_normal.crossVectors(triangle.p0p1,triangle.p1p2);\r\n    triangle.unit_normal.crossVectors(triangle.p0p1,triangle.p2p0);\r\n    triangle.unit_normal.normalize();\r\n\r\n    triangle.length_p0p1 = triangle.p0p1.length();\r\n    triangle.unit_p0p1.copy(triangle.p0p1);\r\n    triangle.unit_p0p1.divideScalar(triangle.length_p0p1);\r\n    triangle.diffThick_p0p1 = triangle.v[0].getThickness()-triangle.v[1].getThickness();\r\n\r\n    triangle.length_p1p2 = triangle.p1p2.length();\r\n    triangle.unit_p1p2.copy(triangle.p1p2);\r\n    triangle.unit_p1p2.divideScalar(triangle.length_p1p2);\r\n    triangle.diffThick_p1p2 = triangle.v[1].getThickness() - triangle.v[2].getThickness();\r\n\r\n    triangle.length_p2p0 = triangle.p2p0.length();\r\n    triangle.unit_p2p0.copy(triangle.p2p0);\r\n    triangle.unit_p2p0.divideScalar(triangle.length_p2p0);\r\n    triangle.diffThick_p2p0 = triangle.v[2].getThickness()-triangle.v[0].getThickness();\r\n\r\n    // Precomputation Used in mech computation\r\n    // So we first find the direction of maximum weight variation.\r\n\r\n    /** @type Array<{vert: THREE.Vector3, thick: number, idx: number}> */\r\n    let sortingArr = [];\r\n    sortingArr.push({ vert: triangle.v[0].getPos(), thick: triangle.v[0].getThickness(), idx:0});\r\n    sortingArr.push({ vert: triangle.v[1].getPos(), thick: triangle.v[1].getThickness(), idx:1});\r\n    sortingArr.push({ vert: triangle.v[2].getPos(), thick: triangle.v[2].getThickness(), idx: 2 });\r\n\r\n    // sort by the min thickness\r\n    sortingArr.sort(function(a, b) { return a.thick - b.thick;});\r\n    triangle.point_min = sortingArr[0].vert;\r\n    triangle.weight_min = sortingArr[0].thick;\r\n    // Cycle throught the other points\r\n    let idx = cleanIndex(sortingArr[0].idx+1,3);\r\n    let point_1 = triangle.v[idx].getPos();\r\n    let weight_1 = triangle.v[idx].getThickness();\r\n    idx = cleanIndex(sortingArr[0].idx+2,3);\r\n    let point_2 = triangle.v[idx].getPos();\r\n    let weight_2 = triangle.v[idx].getThickness();\r\n    let dir_1 = new THREE.Vector3();\r\n    dir_1 = dir_1.subVectors(point_1, triangle.point_min);\r\n    let dir_2 = new THREE.Vector3();\r\n    dir_2 = dir_2.subVectors(point_2, triangle.point_min);\r\n    let delta_1 = weight_1 - triangle.weight_min;\r\n    let delta_2 = weight_2 - triangle.weight_min;\r\n    if(delta_1 < EPSILON || delta_2 < EPSILON)\r\n    {\r\n        if(delta_1 < delta_2)\r\n        { //delta_1 is closer to 0\r\n            triangle.ortho_dir = dir_1.clone();\r\n            triangle.ortho_dir.normalize();\r\n\r\n            // direction of fastest variation of weight\r\n            triangle.main_dir.crossVectors(triangle.ortho_dir, triangle.unit_normal);\r\n            triangle.main_dir.normalize();\r\n            if( (triangle.main_dir.dot(dir_2)) < 0.0) {\r\n                triangle.main_dir.multiplyScalar( -1.0);\r\n            }\r\n            let coord_iso_zero_dir = - triangle.weight_min / delta_2;\r\n            triangle.point_iso_zero = new THREE.Vector3( triangle.point_min.x + coord_iso_zero_dir*dir_2.x,\r\n                                                triangle.point_min.y + coord_iso_zero_dir*dir_2.y,\r\n                                                triangle.point_min.z + coord_iso_zero_dir*dir_2.z);\r\n        }\r\n        else\r\n        { //delta_2 is closer to 0\r\n            triangle.ortho_dir = dir_2.clone();\r\n            triangle.ortho_dir.normalize();\r\n\r\n            // direction of fastest variation of weight\r\n            triangle.main_dir.crossVectors(triangle.ortho_dir, triangle.unit_normal);\r\n            triangle.main_dir.normalize();\r\n            if( (triangle.main_dir.dot(dir_1)) < 0.0) {\r\n                triangle.main_dir.multiplyScalar( -1.0);\r\n            }\r\n            let coord_iso_zero_dir = - triangle.weight_min / delta_1;\r\n            triangle.point_iso_zero = new THREE.Vector3(triangle.point_min.x + coord_iso_zero_dir*dir_1.x,\r\n                                                triangle.point_min.y + coord_iso_zero_dir*dir_1.y,\r\n                                                triangle.point_min.z + coord_iso_zero_dir*dir_1.z);\r\n        }\r\n        if(Math.abs(delta_1-delta_2)< EPSILON) {\r\n            triangle.proj_dir = triangle.unit_normal.clone().multiplyScalar(-1);\r\n            triangle.equal_weights = true;\r\n        }\r\n    }\r\n    else\r\n    { // WARNING : numerically instable if delta_ close to zero !\r\n        // find the point were weight equal zero along the two edges that leave from point_min\r\n        let coord_iso_zero_dir1 = - triangle.weight_min / delta_1;\r\n        let point_iso_zero1 = new THREE.Vector3(triangle.point_min.x + coord_iso_zero_dir1*dir_1.x,\r\n                                            triangle.point_min.y + coord_iso_zero_dir1*dir_1.y,\r\n                                            triangle.point_min.z + coord_iso_zero_dir1*dir_1.z);\r\n        triangle.point_iso_zero = point_iso_zero1;\r\n        let coord_iso_zero_dir2 = - triangle.weight_min / delta_2;\r\n        let point_iso_zero2 = new THREE.Vector3(triangle.point_min.x + coord_iso_zero_dir2*dir_2.x,\r\n                                            triangle.point_min.y + coord_iso_zero_dir2*dir_2.y,\r\n                                            triangle.point_min.z + coord_iso_zero_dir2*dir_2.z);\r\n\r\n        // along ortho_dir the weight are const\r\n        triangle.ortho_dir.subVectors(point_iso_zero2, point_iso_zero1);\r\n        triangle.ortho_dir.normalize();\r\n\r\n        // direction of fastest variation of weight\r\n        triangle.main_dir.crossVectors(triangle.ortho_dir, triangle.unit_normal);\r\n        triangle.main_dir.normalize();\r\n        if( (triangle.main_dir.dot(dir_1)) < 0.0 || (triangle.main_dir.dot(dir_2)) < 0.0) {\r\n            triangle.main_dir.multiplyScalar( -1.0);\r\n        }\r\n    }\r\n\r\n    let coord_1 = dir_1.dot(triangle.main_dir);    // not normalized !\r\n    let coord_2 = dir_2.dot(triangle.main_dir);    // not normalized !\r\n\r\n    // due to previous approximation for stability\r\n    coord_1 = (coord_1<0.0) ? 0.0 : coord_1;\r\n    coord_2 = (coord_2<0.0) ? 0.0 : coord_2;\r\n\r\n    let longest_dir = null;\r\n    if(coord_1 > coord_2)\r\n    {\r\n        longest_dir = dir_1;\r\n\r\n        triangle.half_dir_1 = dir_2;\r\n        triangle.point_half = point_2;\r\n        triangle.half_dir_2 = point_1.clone().subVectors(point_1,point_2);\r\n\r\n        triangle.coord_max = coord_1;\r\n        triangle.coord_middle = (coord_2/coord_1) * triangle.coord_max;\r\n\r\n        triangle.unit_delta_weight = delta_1 / triangle.coord_max;\r\n    }\r\n    else\r\n    {\r\n        longest_dir = dir_2;\r\n\r\n        triangle.half_dir_1 = dir_1;\r\n        triangle.point_half = point_1;\r\n        triangle.half_dir_2 = point_2.clone().subVectors(point_2,point_1);\r\n\r\n        triangle.coord_max = coord_2;\r\n        triangle.coord_middle = (coord_1/coord_2) * triangle.coord_max;\r\n\r\n        triangle.unit_delta_weight = delta_2 / triangle.coord_max;\r\n    }\r\n\r\n    triangle.longest_dir_special = longest_dir.divideScalar(triangle.coord_max);\r\n\r\n    // Length of the longest segment during numerical integration\r\n    let tmp = new THREE.Vector3();\r\n    tmp.subVectors(triangle.half_dir_1, triangle.longest_dir_special.clone().multiplyScalar(triangle.coord_middle));\r\n    triangle.max_seg_length = tmp.length();\r\n    triangle.unsigned_ortho_dir = triangle.ortho_dir.clone();\r\n    if( (triangle.ortho_dir.dot(tmp)) < 0.0 ) {\r\n        triangle.ortho_dir.multiplyScalar(-1.0);\r\n    }\r\n};\r\n\r\n/**\r\n *  @param {!Object} triangle\r\n *     u parametrisation of the point to compute along the axis V0->V1\r\n *     v parametrisation of the point to compute along the axis V0->V2\r\n *  @return {{pos:!THREE.Vector3, thick:number}} An object with the computed pos and thickness\r\n */\r\nTriangleUtils.getParametrisedVertexAttr = function(triangle, u, v){\r\n    let meanThick = TriangleUtils.getMeanThick(triangle, u, v);\r\n    // create new point\r\n    let pos = new THREE.Vector3();\r\n    let uAdd = pos.subVectors(triangle.v[1].getPos(), triangle.v[0].getPos()).multiplyScalar(u);\r\n    let vAdd = pos.clone().subVectors(triangle.v[2].getPos(), triangle.v[0].getPos()).multiplyScalar(v);\r\n    pos.addVectors(triangle.v[0].getPos(), uAdd);\r\n    pos.addVectors(pos, vAdd);\r\n\r\n    return {\"pos\": pos, \"thick\": meanThick};\r\n};\r\n\r\n/**\r\n *  @param {!Object} triangle The concerned triangle\r\n *  @param {number} u u coordinate\r\n *  @param {number} v v coordinate\r\n *  @return {number}\r\n */\r\nTriangleUtils.getMeanThick = function(triangle, u, v){\r\n    return triangle.v[0].getThickness()*(1-u-v) + triangle.v[1].getThickness()*u + triangle.v[2].getThickness()*v;\r\n};\r\n\r\n/**\r\n *  @param {!Object} triangle The concerned triangle\r\n *  @param {number} u u coordinate\r\n *  @param {number} v v coordinate\r\n *  @return {!Material} Interpolated material\r\n */\r\nTriangleUtils.getMeanMat = function(triangle, u, v){\r\n    let res = new Material();\r\n    let m_arr = triangle.materials === null?\r\n        [triangle.v[0].getMaterial(),triangle.v[0].getMaterial(),triangle.v[0].getMaterial()] :\r\n        [triangle.materials[0],triangle.materials[1],triangle.materials[2]];\r\n    res.weightedMean(\r\n        m_arr,\r\n        [1-u-v,u,v]\r\n    );\r\n    return res;\r\n};\r\n\r\n\r\n/*  Cf. http://math.stackexchange.com/questions/148199/equation-for-non-orthogonal-projection-of-a-point-onto-two-vectors-representing\r\n    eq1: W=uU+vV with u and v the parametrisation and V and U the basis vectors\r\n     -> eq 1.dot(U) gives us eq A/   and eq 1.dot(V) gives us eq B/\r\n\r\n    A/ u(U⋅U)+v(U⋅V)=W⋅U\r\n    B/ u(V⋅U)+v(V⋅V)=W⋅V\r\n    <=>\r\n    u*a + v*b = c;\r\n    u*d + v*e = f;\r\n    <=>\r\n    v = (f-d*(c/a))*(1/(e-d*b/a));\r\n    u = (c-v*b)/a;\r\n    with:\r\n    a = U.lengthSq();\r\n    b = U.dot(V);\r\n    c = p.dot(U);\r\n    d = V.dot(U);\r\n    e = V.lengthSq();\r\n    f = W.dot(V);\r\n*/\r\n/**\r\n *  Get the triangle barycenter coordinates. The projection is non orthogonal.\r\n *  WTF is that? Barycentirc coordinates are 3 components, not 2 !\r\n *  @param {!THREE.Vector3} p0p1 Vector from p0 to p1\r\n *  @param {!THREE.Vector3} p2p0 Vector from p2 to p0\r\n *  @param {!THREE.Vector3} p0 Point 0 in triangle\r\n *  @param {!THREE.Vector3} p Point in space\r\n *\r\n *  @return {{u:number,v:number}} Coordinate of barycenter\r\n */\r\nTriangleUtils.getTriBaryCoord = function(p0p1, p2p0, p0, p){\r\n    let U = p0p1;\r\n    let V = p2p0.clone().multiplyScalar(-1);\r\n    let W = new THREE.Vector3().subVectors(p, p0);\r\n\r\n    // b == d\r\n    let a = U.lengthSq();\r\n    let b = U.dot(V);\r\n    let c = W.dot(U);\r\n    let d = V.lengthSq();\r\n    let e = W.dot(V);\r\n    let v = (a*e-b*c)/(a*d-b*b);\r\n    let u = (c-v*b)/a;\r\n    return {\"u\":u, \"v\":v};\r\n};\r\n\r\nTriangleUtils.getUVCoord = function(U, V, p0, p){\r\n    let W = new THREE.Vector3();\r\n    W.crossVectors(U,V);\r\n    let mat = new THREE.Matrix4();\r\n    mat.set(U.x, V.x, W.x,0,\r\n            U.y, V.y, W.y,0,\r\n            U.z, V.z, W.z,0,\r\n              0,   0,   0,1);\r\n    let mat1 = new THREE.Matrix4();\r\n    mat1.copy(mat).invert();\r\n    let vec = new THREE.Vector3().subVectors(p, p0);\r\n    vec.applyMatrix4(mat1);\r\n\r\n    return {u:vec.x,v:vec.y};\r\n};\r\n\r\nmodule.exports = TriangleUtils;\r\n","'use strict';\r\n\r\nconst THREE = require(\"three\");\r\nconst ScalisMath = require(\"../scalis/ScalisMath.js\");\r\nconst Area = require(\"./Area.js\");\r\nconst TriangleUtils = require(\"../../utils/TriangleUtils.js\");\r\nconst Accuracies = require(\"../accuracies/Accuracies.js\");\r\nconst AreaScalisSeg = require(\"./AreaScalisSeg\");\r\n\r\n/** @typedef {import('./Area.js').AreaSphereParam} AreaSphereParam */\r\n/** @typedef {import('../scalis/ScalisVertex')} ScalisVertex */\r\n\r\n/**\r\n *  Bounding area for the triangle.\r\n *  It is the same for DIST and CONVOL primitives since the support of the convolution\r\n *  kernel is the same as the support for the distance field.\r\n *\r\n *  The Area must be able to return accuracy needed in a given zone (Sphere fr now,\r\n *  since box intersections with such a complex shape are not trivial), and also\r\n *  propose an intersection test.\r\n *\r\n *  @extends {Area}\r\n */\r\nclass AreaScalisTri extends Area {\r\n    /**\r\n     *  @param { Array.< !ScalisVertex >} v Array or vertices\r\n     *  @param {!THREE.Vector3} unit_normal Normal to the plane made by the 3 vertices, as a THREE.Vector3\r\n     *  @param {!THREE.Vector3} main_dir Main direction dependeing on thicknesses\r\n     * @param {!Object}  segParams\r\n     *  @param {number}  min_thick Minimum thickness in the Triangle\r\n     *  @param {number} max_thick Maximum thickness in the triangle\r\n     */\r\n    constructor(v, unit_normal, main_dir, segParams, min_thick, max_thick) {\r\n        super()\r\n\r\n        this.tmpVect = new THREE.Vector3();\r\n        this.min_thick = min_thick;\r\n        this.max_thick = max_thick;\r\n        this.v = v;\r\n        this.p0p1 = this.tmpVect.clone().subVectors(this.v[1].getPos(), this.v[0].getPos());\r\n        this.p2p0 = this.tmpVect.clone().subVectors(this.v[0].getPos(), this.v[2].getPos());\r\n        this.unit_normal = unit_normal; // Normal computed from crossVectors of p0p1 and P2p1\r\n        this.main_dir = main_dir;\r\n        var delta_1 = Math.abs(this.v[0].getThickness() - this.v[1].getThickness());\r\n        var delta_2 = Math.abs(this.v[1].getThickness() - this.v[2].getThickness());\r\n        this.equal_weights = (delta_1 / Math.abs(this.v[0].getThickness() + this.v[1].getThickness()) < 0.001\r\n            && delta_2 / Math.abs(this.v[1].getThickness() + this.v[2].getThickness()) < 0.001);\r\n        /* segParams is defined as: (e.g for segment p0p1)\r\n        segParams.push({\"norm\":         this.length_p0p1,\r\n                        \"diffThick\":    this.diffThick_p0p1,\r\n                        \"dir\":          this.unit_p0p1,\r\n                        \"v\":            [this.v[0], this.v[1]],\r\n                        \"ortho_vec_x\":  this.v[0].getThickness() - this.v[1].getThickness(),\r\n                        \"ortho_vec_y\":  this.length_p0p1});\r\n        */\r\n        this.segParams = segParams;\r\n\r\n        // Store tmp computation parameters when doing computation on one segment of the triangle\r\n        this.segAttr = {\r\n            p0_to_p: new THREE.Vector3(),\r\n            p0_to_p_sqrnorm: 0,\r\n            x_p_2D: 0,\r\n            y_p_2D: 0,\r\n            y_p_2DSq: 0,\r\n            p_proj_x: 0\r\n        };\r\n\r\n        // Construct the triangular prism going through each vertices\r\n        var n1 = this.tmpVect.clone().crossVectors(this.segParams[0].dir, this.unit_normal).normalize();\r\n        var n2 = this.tmpVect.clone().crossVectors(this.segParams[1].dir, this.unit_normal).normalize();\r\n        var n3 = this.tmpVect.clone().crossVectors(this.segParams[2].dir, this.unit_normal).normalize();\r\n        // Compute the prism vertices\r\n        this.tmpVect.copy(this.unit_normal);\r\n        var pri = [];\r\n        pri.push(this.tmpVect.clone().addVectors(this.v[0].getPos(), this.tmpVect.multiplyScalar(this.v[0].getThickness() * ScalisMath.KS)));\r\n        this.tmpVect.copy(this.unit_normal);\r\n        pri.push(this.tmpVect.clone().addVectors(this.v[1].getPos(), this.tmpVect.multiplyScalar(this.v[1].getThickness() * ScalisMath.KS)));\r\n        this.tmpVect.copy(this.unit_normal);\r\n        pri.push(this.tmpVect.clone().addVectors(this.v[2].getPos(), this.tmpVect.multiplyScalar(this.v[2].getThickness() * ScalisMath.KS)));\r\n        this.tmpVect.copy(this.unit_normal);\r\n        pri.push(this.tmpVect.clone().addVectors(this.v[0].getPos(), this.tmpVect.multiplyScalar(-this.v[0].getThickness() * ScalisMath.KS)));\r\n        this.tmpVect.copy(this.unit_normal);\r\n        pri.push(this.tmpVect.clone().addVectors(this.v[1].getPos(), this.tmpVect.multiplyScalar(-this.v[1].getThickness() * ScalisMath.KS)));\r\n        this.tmpVect.copy(this.unit_normal);\r\n        pri.push(this.tmpVect.clone().addVectors(this.v[2].getPos(), this.tmpVect.multiplyScalar(-this.v[2].getThickness() * ScalisMath.KS)));\r\n        // Compute the normals of top and bottom faces of the prism\r\n        var tmp2 = new THREE.Vector3();\r\n        this.tmpVect.subVectors(pri[1], pri[0]);\r\n        tmp2.subVectors(pri[2], pri[0]);\r\n        var n4 = this.tmpVect.clone().crossVectors(this.tmpVect, tmp2).normalize();\r\n        this.tmpVect.subVectors(pri[5], pri[3]);\r\n        tmp2.subVectors(pri[4], pri[3]);\r\n        var n5 = this.tmpVect.clone().crossVectors(this.tmpVect, tmp2).normalize();\r\n\r\n        // planeParams contains the definition of the prism 5 faces {normal, orig}\r\n        this.planeParams = [];\r\n        this.planeParams.push({ \"orig\": this.v[0].getPos(), \"n\": n1 });\r\n        this.planeParams.push({ \"orig\": this.v[1].getPos(), \"n\": n2 });\r\n        this.planeParams.push({ \"orig\": this.v[2].getPos(), \"n\": n3 });\r\n        this.planeParams.push({ \"orig\": pri[0], \"n\": n4 });\r\n        this.planeParams.push({ \"orig\": pri[3], \"n\": n5 });\r\n\r\n        // use segments areas to factoirize some code.\r\n        this.segAreas = [];\r\n        for (var i = 0; i < 3; ++i) {\r\n            this.segAreas.push(\r\n                new AreaScalisSeg(\r\n                    this.segParams[i].v[0].getPos(), this.segParams[i].v[1].getPos(),\r\n                    this.segParams[i].v[0].getThickness(), this.segParams[i].v[1].getThickness()\r\n                )\r\n            );\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  Compute projection (used in other functions)\r\n     *  @param {!THREE.Vector3} p Point to proj\r\n     *  @param {!Object} segParams A seg param object @todo clarify this parameter\r\n     *\r\n     *  @protected\r\n     */\r\n    proj_computation(p, segParams) {\r\n        this.segAttr.p0_to_p.subVectors(p, segParams.v[0].getPos());\r\n        this.segAttr.p0_to_p_sqrnorm = this.segAttr.p0_to_p.lengthSq();\r\n        this.segAttr.x_p_2D = this.segAttr.p0_to_p.dot(segParams.dir);\r\n        // pythagore inc.\r\n        this.segAttr.y_p_2DSq = this.segAttr.p0_to_p_sqrnorm - this.segAttr.x_p_2D * this.segAttr.x_p_2D;\r\n        this.segAttr.y_p_2D = this.segAttr.y_p_2DSq > 0 ? Math.sqrt(this.segAttr.y_p_2DSq) : 0; // because of rounded errors tmp can be <0 and this causes the next sqrt to return NaN...\r\n\r\n        var t = -this.segAttr.y_p_2D / segParams.ortho_vec_y;\r\n        // P proj is the point at the intersection of:\r\n        //              - the local X axis (computation in the unit_dir basis)\r\n        //                  and\r\n        //              - the line defined by P and the vector orthogonal to the weight line\r\n        this.segAttr.p_proj_x = this.segAttr.x_p_2D + t * segParams.ortho_vec_x;\r\n        //this.segAttr.p_proj_y = 0.0;\r\n    }\r\n\r\n    /**\r\n     * @link Area.sphereIntersect for a complete description\r\n     * @todo Check the Maths (Ask Cedric Zanni?)\r\n     * @param {AreaSphereParam} sphere\r\n     * @return {boolean} true if the sphere and the area intersect\r\n     */\r\n    sphereIntersect(sphere) {\r\n        // First: Test the intersection of the sphere to all three segments as they are included in the triangle bv\r\n        for (let i = 0; i < 3; i++) {\r\n            let intersectSeg = this.sphereIntersectSegment(sphere, this.segParams[i], ScalisMath.KS);\r\n            // The sphere intersecting ones the angle means the sphere intersect the Bounding Volume\r\n            if (intersectSeg) { return true; }\r\n        }\r\n        // Second: Test the intersection of the sphere with the triangular prism defined by\r\n        // the 2D triangle constructed from the vertices and of half heights Ti*KS along the unit_normal for each vertices Vi\r\n        let inside = true;\r\n        for (let i = 0, inside = true; i < 5; i++) {\r\n            this.tmpVect.subVectors(sphere.center, this.planeParams[i].orig);\r\n            // Get the signed dist to the plane\r\n            let dist = this.tmpVect.dot(this.planeParams[i].n);\r\n            // if the dist to the plane is positive, we are in the part where the normal is\r\n            inside = inside && (dist + sphere.radius > 0); // Modulation by the sphere radius\r\n        }\r\n        // If the sphere is outside one of the plane-> BLAM OUTSIDE SON\r\n        return inside;\r\n    }\r\n\r\n    /**\r\n     *  Adapted from the segment sphere intersection. Could be factorised!\r\n     *  @return {boolean} true if the sphere and the area intersect\r\n     *\r\n     *  @param {AreaSphereParam} sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @param {!Object} segParams A segParams object containing data for a segment\r\n     *  @param {number} KS Kernel Scale, ie ScalisMath.KS (Why is it a parameter, its global!?)\r\n     *\r\n     */\r\n    sphereIntersectSegment(sphere, segParams, KS) {\r\n        this.proj_computation(sphere.center, segParams);\r\n\r\n        var thick0 = segParams.v[0].getThickness();\r\n        var thick1 = segParams.v[1].getThickness();\r\n        if (this.segAttr.p_proj_x < 0.0) {\r\n            return (Math.sqrt(this.segAttr.p0_to_p_sqrnorm) - sphere.radius < thick0 * KS);\r\n        } else {\r\n            if (this.segAttr.p_proj_x > segParams.norm) {\r\n                this.segAttr.p0_to_p.subVectors(sphere.center, segParams.v[1].getPos());\r\n                return this.segAttr.p0_to_p.length() - sphere.radius < thick1 * KS;\r\n            } else {\r\n                var sub1 = this.segAttr.x_p_2D - this.segAttr.p_proj_x;\r\n                var dist = sub1 * sub1 + this.segAttr.y_p_2DSq;\r\n                var tt = this.segAttr.p_proj_x / segParams.norm;\r\n                var inter_w = thick0 * (1.0 - tt) + tt * thick1;\r\n                var tmp = sphere.radius + inter_w * KS;\r\n                return (dist < tmp * tmp);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @link Area.contains for a complete description\r\n     * @param {THREE.Vector3} p\r\n     */\r\n    contains = (function () {\r\n        let sphere = { radius: 0, center: new THREE.Vector3() };\r\n        /**\r\n         * @param {THREE.Vector3} p\r\n         */\r\n        return (p) => {\r\n            /** @type {AreaScalisTri} */\r\n            let self = this;\r\n\r\n            sphere.center.copy(p);\r\n            return self.sphereIntersect(sphere);\r\n        }\r\n    })();\r\n\r\n    /**\r\n     *  Copied from AreaSeg.getAcc\r\n     *\r\n     *  @param {AreaSphereParam} sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @param {!Object} segParams A segParams object containing data for a segment area\r\n     *\r\n     *  @return {!Object} Object containing intersect (boolean) and currAcc (number) attributes\r\n     */\r\n    getAccSegment(sphere, segParams) {\r\n        var allReturn = { intersect: false, currAcc: Accuracies.nice * this.min_thick };\r\n        if (this.sphereIntersectSegment(sphere, segParams, 1)) {\r\n            // Thales between two triangles that have the same angles gives us the dist of:\r\n            // side A = sphere.r*this.abs_diff_thick/this.length;\r\n            // Then pythagore this shit up as A² + sphere.r² = delta²\r\n            // i.e delta² = (sphere.r*this.abs_diff_thick/this.length)² + sphere.r²\r\n            // <=> delta = sphere.r*Math.sqrt(1+(this.abs_diff_thick/this.length)²);\r\n            var tmp = Math.abs(segParams.diffThick) / segParams.norm;\r\n            var half_delta = sphere.radius * Math.sqrt(1 + tmp * tmp) * 0.5;\r\n\r\n            var thick0 = segParams.v[0].getThickness();\r\n            var thick1 = segParams.v[1].getThickness();\r\n            // we check only the direction where the weight is minimum since\r\n            // we will return minimum accuracy needed in the area.\r\n            var absc = this.segAttr.p_proj_x;\r\n            absc += thick0 > thick1 ? half_delta : -half_delta;\r\n\r\n            if (absc <= 0.0) {\r\n                allReturn.currAcc = thick0;\r\n            } else if (absc >= segParams.norm) {\r\n                allReturn.currAcc = thick1;\r\n            } else {\r\n                var tt = absc / segParams.norm;\r\n                allReturn.currAcc = thick0 * (1.0 - tt) + tt * thick1;\r\n            }\r\n            allReturn.intersect = true;\r\n        }\r\n        return allReturn;\r\n    };\r\n\r\n    /**\r\n     *  Get accuracy for the inner triangle (do not consider segment edges)\r\n     *  @param {AreaSphereParam} sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     */\r\n    getAccTri(sphere) {\r\n        // Inequal thickness triangle case:\r\n        if (!this.equal_weights) {\r\n            var v0 = this.v[0].getPos(); // Should be the min thickness point on the triangle\r\n            // Get the main dir furthest point\r\n            var main_dir_point = this.tmpVect.addVectors(sphere.center, this.main_dir.clone().multiplyScalar(sphere.radius));\r\n            // Get the proj of this point\r\n            // 1/ get the ortho coord 2D wise\r\n            this.tmpVect.subVectors(main_dir_point, v0);\r\n            var distLineSq = this.tmpVect.lengthSq();\r\n            // Get the dist to the plane (signed)\r\n            var y_p_2D = this.tmpVect.dot(this.unit_normal); // Should do some test here to know if we are above or below the plane\r\n            var x_p_2D = Math.sqrt(distLineSq - y_p_2D * y_p_2D);\r\n            // Get the ortho proj point in the triangle plane\r\n            // Cf. http://geomalgorithms.com/a04-_planes.html\r\n            var proj_ortho_point = this.tmpVect.clone().addVectors(sphere.center, this.unit_normal.clone().multiplyScalar(-y_p_2D));\r\n            // Get the thickness at this point\r\n            var params = TriangleUtils.getTriBaryCoord(this.p0p1, this.p2p0, this.v[0].getPos(), proj_ortho_point);\r\n            var thick_ortho_point = TriangleUtils.getMeanThick(this, params.u, params.v);\r\n            // Ortho vector to the weight varies along where the sphere is relative to the plane\r\n            thick_ortho_point = y_p_2D >= 0 ? thick_ortho_point : -thick_ortho_point;\r\n            var ortho_vec_x = this.v[0].getThickness() - thick_ortho_point;\r\n            var ortho_vec_y = x_p_2D;\r\n            var t = -y_p_2D / ortho_vec_y;\r\n            // P proj is the point at the intersection of:\r\n            //              - the local X axis (computation in the unit_dir basis)\r\n            //                  and\r\n            //              - the line defined by P and the vector orthogonal to the weight line\r\n            var p_proj_x = x_p_2D + t * ortho_vec_x;\r\n\r\n            var dirVect = this.tmpVect.subVectors(v0, proj_ortho_point).normalize();\r\n            var p_proj = this.tmpVect.addVectors(proj_ortho_point, dirVect.multiplyScalar(x_p_2D - p_proj_x));\r\n            // Get the barycentric parameters of the non orthogonal point\r\n            params = TriangleUtils.getTriBaryCoord(this.p0p1, this.p2p0, this.v[0].getPos(), p_proj);\r\n            if (params.u <= 1 && params.v <= 1 && params.u + params.v <= 1 && params.u >= 0 && params.v >= 0) {\r\n                // Return the barycentered thickness (yes barycentered is a proper english terminology)\r\n                return TriangleUtils.getMeanThick(this, params.u, params.v);\r\n            } else {\r\n                return this.max_thick * 10000;\r\n            }\r\n        } else {\r\n            // Case of equal weights\r\n            return this.min_thick;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @link Area.getAcc for a complete description\r\n     *\r\n     *  @return {number} the accuracy needed in the intersection zone\r\n     *\r\n     *  @param {AreaSphereParam} sphere  A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @param {number}  factor  the ratio to determine the wanted accuracy.\r\n     *\r\n     *  @todo Check the Maths\r\n     */\r\n    getAcc(sphere, factor) {\r\n\r\n        // First: Test the intersection of the sphere to all three segments to get the min Acc for segments\r\n        for (var i = 0, minForSeg = this.max_thick * 100000; i < 3; i++) {\r\n            var intersectSeg = this.getAccSegment(sphere, this.segParams[i]);\r\n            // The sphere intersecting ones the angle means the sphere intersect the Bounding Volume\r\n            if (intersectSeg.intersect) {\r\n                minForSeg = minForSeg > intersectSeg.currAcc ? intersectSeg.currAcc : minForSeg;\r\n            }\r\n        }\r\n        // Second: Test the inner triangle\r\n        var minForTri = this.max_thick * 100000;\r\n        if (minForSeg !== this.min_thick) {\r\n            minForTri = this.getAccTri(sphere);\r\n        }\r\n\r\n        var minThick = Math.min(minForSeg, minForTri);\r\n        if (minThick !== this.max_thick * 100000) {\r\n            //minThick = Math.min(Math.max(minThick, this.min_thick), this.max_thick);\r\n            return minThick * factor;\r\n        } else {\r\n            // Sphere does not intersect with the segments, or the inner triangle\r\n            return this.max_thick * factor;\r\n        }\r\n\r\n        //return this.min_thick*factor;\r\n    }\r\n\r\n    /**\r\n     *  @link Area.getNiceAcc for a complete description\r\n     *  @param {AreaSphereParam}  sphere A sphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @return {number} The Nice accuracy needed in the intersection zone\r\n     */\r\n    getNiceAcc(sphere) {\r\n        return this.getAcc(sphere, Accuracies.nice);\r\n    }\r\n\r\n    /**\r\n     *  @link Area.getNiceAcc for a complete description\r\n     *  @param {AreaSphereParam}  sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @return {number} The Curr accuracy needed in the intersection zone\r\n     */\r\n    getCurrAcc(sphere) {\r\n        return this.getAcc(sphere, Accuracies.curr);\r\n    }\r\n\r\n    /**\r\n     *  @link Area.getRawAcc for a complete description\r\n     *  @param {AreaSphereParam}  sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @return {number} The raw accuracy needed in the intersection zone\r\n     */\r\n    getRawAcc(sphere) {\r\n        return this.getAcc(sphere, Accuracies.raw);\r\n    }\r\n\r\n    /**\r\n     * @link Area.getMinAcc\r\n     * @return {number}\r\n     */\r\n    getMinAcc() {\r\n        return Accuracies.curr * this.min_thick;\r\n    }\r\n\r\n    /**\r\n     * @link Area.getMinRawAcc\r\n     * @return {number}\r\n     */\r\n    getMinRawAcc = function () {\r\n        return Accuracies.raw * this.min_thick;\r\n    }\r\n\r\n    /**\r\n     *  Return the minimum accuracy required at some point on the given axis.\r\n     *  The returned accuracy is the one you would need when stepping in the axis\r\n     *  direction when you are on the axis at coordinate t.\r\n     *  @param {string} axis x, y or z\r\n     *  @param {number} t Coordinate on the axis\r\n     *  @return {number} The step you can safely do in axis direction\r\n     */\r\n    getAxisProjectionMinStep(axis, t) {\r\n        var step = Number.MAX_VALUE;\r\n        for (var i = 0; i < 3; ++i) {\r\n            step = Math.min(step, this.segAreas[i].getAxisProjectionMinStep(axis, t));\r\n        }\r\n        return step;\r\n    }\r\n}\r\n\r\nmodule.exports = AreaScalisTri;\r\n","'use strict';\r\n\r\nconst THREE = require(\"three\");\r\nconst Types = require(\"../Types.js\");\r\nconst Material = require(\"../Material.js\");\r\nconst ScalisPrimitive = require(\"./ScalisPrimitive.js\");\r\nconst ScalisVertex = require(\"./ScalisVertex.js\");\r\nconst ScalisMath = require(\"./ScalisMath.js\");\r\nconst AreaScalisTri = require(\"../areas/AreaScalisTri.js\");\r\n\r\nconst TriangleUtils = require(\"../../utils/TriangleUtils.js\");\r\n\r\n// Number of sample in the Simpsons integration.\r\nvar sampleNumber = 10;\r\n\r\n/** @typedef {import('../Element.js').ValueResultType} ValueResultType */\r\n/** @typedef {import('./ScalisPrimitive').ScalisPrimitiveJSON} ScalisPrimitiveJSON */\r\n\r\n/**\r\n * @typedef {ScalisPrimitiveJSON} ScalisTriangleJSON\r\n */\r\n\r\n\r\n/**\r\n * This class implements a ScalisTriangle primitive.\r\n *  CONVOL Evaluation is not exact so we use simpsons numerical integration.\r\n *\r\n *  @constructor\r\n *  @extends ScalisPrimitive\r\n */\r\nclass ScalisTriangle extends ScalisPrimitive {\r\n\r\n    /** @type {\"ScalisTriangle\"} */\r\n    static type = \"ScalisTriangle\";\r\n\r\n    /**\r\n     * @param {ScalisTriangleJSON} json\r\n     * @returns\r\n     */\r\n    static fromJSON(json) {\r\n        var v = [\r\n            ScalisVertex.fromJSON(json.v[0]),\r\n            ScalisVertex.fromJSON(json.v[1]),\r\n            ScalisVertex.fromJSON(json.v[2])\r\n        ];\r\n        var m = [\r\n            Material.fromJSON(json.materials[0]),\r\n            Material.fromJSON(json.materials[1]),\r\n            Material.fromJSON(json.materials[2])\r\n        ];\r\n        return new ScalisTriangle(v, json.volType, 1.0, m);\r\n    };\r\n\r\n    /**\r\n     *  @param {!Array.<ScalisVertex>} v the 3 vertices for the triangle\r\n     *  @param {!string} volType Volume type, can be ScalisPrimitive.CONVOL\r\n     *                 (homothetic convolution surfaces, Zanni and al), or\r\n     *                 ScalisPrimitive.DIST (classic weighted distance field)\r\n     *  @param {number} density Density is another constant to modulate the implicit\r\n     *                  field. Used only for DIST voltype.\r\n     *  @param {!Array.<Material>} mats Material for this primitive.\r\n     *                                  Use [Material.defaultMaterial.clone(), Material.defaultMaterial.clone()] by default.\r\n     *\r\n     */\r\n    constructor(v, volType, density, mats) {\r\n    super();\r\n\r\n    if(density !== 1.0){\r\n        throw \"Error in ScalisTriangle : cannot use a density different from 1.0, not implemented.\";\r\n    }\r\n\r\n    this.volType = volType;\r\n    this.materials     = mats !== null? mats : [Material.defaultMaterial.clone(), Material.defaultMaterial.clone(), Material.defaultMaterial.clone()];\r\n\r\n    this.v = v;\r\n    this.v[0].setPrimitive(this);\r\n    this.v[1].setPrimitive(this);\r\n    this.v[2].setPrimitive(this);\r\n    this.min_thick = Math.min(this.v[0].getThickness(), this.v[1].getThickness(), this.v[2].getThickness());\r\n    this.max_thick = Math.max(this.v[0].getThickness(), this.v[1].getThickness(), this.v[2].getThickness());\r\n\r\n    // Temporary for eval\r\n    // TODO : should be wrapped in the eval function scope if possible (ie not precomputed)\r\n    this.res_gseg = {};\r\n    this.tmp_res_gseg = {};\r\n\r\n    this.p0p1  = new THREE.Vector3();\r\n    this.p1p2 = new THREE.Vector3();\r\n    this.p2p0 = new THREE.Vector3();\r\n    this.unit_normal = new THREE.Vector3();\r\n    this.unit_p0p1 = new THREE.Vector3();\r\n    this.unit_p1p2 = new THREE.Vector3();\r\n    this.unit_p2p0 = new THREE.Vector3();\r\n    this.length_p0p1 = 0;\r\n    this.length_p1p2 = 0;\r\n    this.length_p2p0 = 0;\r\n    this.diffThick_p0p1 = 0;\r\n    this.diffThick_p0p1 = 0;\r\n    this.diffThick_p0p1 = 0;\r\n    this.diffThick_p1p2 = 0;\r\n    this.diffThick_p2p0 = 0;\r\n    this.main_dir       = new THREE.Vector3();\r\n    this.point_iso_zero = new THREE.Vector3();\r\n    this.ortho_dir      = new THREE.Vector3();\r\n    this.unsigned_ortho_dir= new THREE.Vector3();\r\n    this.proj_dir       = new THREE.Vector3();\r\n    this.equal_weights = false; // Use to skip computations for a specific case\r\n\r\n    this.coord_max           = 0;\r\n    this.coord_middle        = 0;\r\n    this.unit_delta_weight   = 0;\r\n    this.longest_dir_special = new THREE.Vector3();\r\n    this.max_seg_length      = 0;\r\n    this.half_dir_1 = new THREE.Vector3();\r\n    this.point_half = new THREE.Vector3();\r\n    this.half_dir_2 = new THREE.Vector3();\r\n    this.point_min = new THREE.Vector3();\r\n    this.weight_min = 0;\r\n\r\n    this.valid_aabb = false;\r\n\r\n    }\r\n\r\n    getType(){\r\n        return ScalisTriangle.type;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {ScalisTriangleJSON}\r\n     */\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON()\r\n        };\r\n    }\r\n\r\n    // [Abstract] See Primitive.prepareForEval for more details\r\n    prepareForEval() {\r\n        if(!this.valid_aabb)\r\n        {\r\n            this.computeHelpVariables();\r\n            this.valid_aabb = true;\r\n        }\r\n    }\r\n\r\n\r\n    // [Abstract] See Primtive.getArea for more details\r\n    getAreas() {\r\n        if(!this.valid_aabb){\r\n            console.log(\"ERROR : Cannot get area of invalid primitive\");\r\n            return [];\r\n        }else{\r\n            var segParams = [];\r\n            segParams.push({\"norm\":         this.length_p0p1,\r\n                            \"diffThick\":    this.diffThick_p0p1,\r\n                            \"dir\":          this.unit_p0p1,\r\n                            \"v\":            [this.v[0], this.v[1]],\r\n                            \"ortho_vec_x\":  this.v[0].getThickness() - this.v[1].getThickness(),\r\n                            \"ortho_vec_y\":  this.length_p0p1});\r\n            segParams.push({\"norm\":         this.length_p1p2,\r\n                            \"diffThick\":    this.diffThick_p1p2,\r\n                            \"dir\":          this.unit_p1p2,\r\n                            \"v\":            [this.v[1], this.v[2]],\r\n                            \"ortho_vec_x\":  this.v[1].getThickness() - this.v[2].getThickness(),\r\n                            \"ortho_vec_y\":  this.length_p1p2});\r\n            segParams.push({\"norm\":         this.length_p2p0,\r\n                            \"diffThick\":    this.diffThick_p2p0,\r\n                            \"dir\":          this.unit_p2p0,\r\n                            \"v\":            [this.v[2], this.v[0]],\r\n                            \"ortho_vec_x\":  this.v[2].getThickness() - this.v[0].getThickness(),\r\n                            \"ortho_vec_y\":  this.length_p2p0});\r\n            return [{\r\n                aabb:this.aabb,\r\n                bv: new AreaScalisTri(this.v,\r\n                                    this.unit_normal,\r\n                                    this.main_dir,\r\n                                    segParams,\r\n                                    this.min_thick,\r\n                                    this.max_thick),\r\n                obj: this\r\n            }];\r\n        }\r\n    }\r\n\r\n    // [Abstract] See Primitive.computeHelpVariables for more details\r\n    computeHelpVariables() {\r\n        TriangleUtils.computeVectorsDirs(this);\r\n        // Compute the AABB from the union of the BBox of the vertices\r\n        this.computeAABB();\r\n    }\r\n\r\n    // [Abstract] See ScalisPrimitive.mutableVolType for more details\r\n    mutableVolType() {\r\n        return true;\r\n    }\r\n\r\n    // [Abstract] See Primitive.setVolType for more details\r\n    setVolType(vt)\r\n    {\r\n        if( !(vt == ScalisPrimitive.CONVOL || vt == ScalisPrimitive.DIST) ){\r\n            throw \"ERROR : volType must be set to ScalisPrimitive.CONVOL or ScalisPrimitive.DIST\";\r\n        }\r\n\r\n        if(this.volType != vt){\r\n            this.volType = vt;\r\n            this.invalidAABB();\r\n        }\r\n    }\r\n\r\n    // [Abstract] See Primitive.getVolType for more details\r\n    getVolType()\r\n    {\r\n        return this.volType;\r\n    }\r\n\r\n    /**\r\n     *  Clamps a number. Based on Zevan's idea: http://actionsnippet.com/?p=475\r\n     *  @param {number} a\r\n     *  @param {number} b\r\n     *  @param {number} c\r\n     *  @return {number} Clamped value\r\n     *  Author: Jakub Korzeniowski\r\n     *  Agency: Softhis\r\n     *  http://www.softhis.com\r\n     */\r\n    clamp(a,b,c){\r\n        return Math.max(b,Math.min(c,a));\r\n    }\r\n\r\n    // [Abstract] See Primitive.distanceTo for more details\r\n    distanceTo = (function() {\r\n        var p0p = new THREE.Vector3();\r\n        var p1p = new THREE.Vector3();\r\n        var p2p = new THREE.Vector3();\r\n        var tmp = new THREE.Vector3();\r\n        return function (p) {\r\n\r\n            /** @type {ScalisTriangle} */\r\n            let self = this;\r\n\r\n            p0p.subVectors(p, self.v[0].getPos());\r\n            p1p.subVectors(p, self.v[1].getPos());\r\n            p2p.subVectors(p, self.v[2].getPos());\r\n            if (tmp.crossVectors(self.p0p1, p0p).dot(self.unit_normal)>0 &&\r\n                tmp.crossVectors(self.p1p2, p1p).dot(self.unit_normal)>0 &&\r\n                tmp.crossVectors(self.p2p0, p2p).dot(self.unit_normal)>0)\r\n            {\r\n                // p is in the triangle\r\n                return Math.abs(p0p.dot(self.unit_normal));\r\n            }else{\r\n                var t0 = p0p.dot(self.p0p1) / self.length_p0p1;\r\n                // clamp is our own function declared there\r\n                t0 = self.clamp(t0,0,1);\r\n                tmp.copy(self.p0p1)\r\n                    .multiplyScalar(t0)\r\n                    .add(self.v[0].getPos());\r\n                t0 = p.distanceToSquared(tmp);\r\n\r\n                var t1 = p1p.dot(self.p1p2) / self.length_p1p2;\r\n                // clamp is our own function declared there\r\n                t1 = self.clamp(t1,0,1);\r\n                tmp.copy(self.p1p2)\r\n                    .multiplyScalar(t1)\r\n                    .add(self.v[1].getPos());\r\n                t1 = p.distanceToSquared(tmp);\r\n\r\n                var t2 = p2p.dot(self.p2p0) / self.length_p2p0;\r\n                // clamp is our own function declared there\r\n                t2 = self.clamp(t2,0,1);\r\n                tmp.copy(self.p2p0)\r\n                    .multiplyScalar(t2)\r\n                    .add(self.v[2].getPos());\r\n                t2 = p.distanceToSquared(tmp);\r\n\r\n                return Math.sqrt(Math.min(Math.min(t0,t1),t2));\r\n            }\r\n        };\r\n    })();\r\n\r\n    // [Abstract] See Primitive.heuristicStepWithin for more details\r\n    heuristicStepWithin() {\r\n        return this.weight_min/3;\r\n    };\r\n    /**\r\n     *  @link Element.value for a complete description\r\n     *\r\n     *  @param {THREE.Vector3} p\r\n     *  @param {ValueResultType} res\r\n     */\r\n    value(p,res) {\r\n        switch(this.volType){\r\n            case ScalisPrimitive.DIST:\r\n                return this.evalDist(p,res);\r\n            case ScalisPrimitive.CONVOL:\r\n                // for now rings are just evaluated as distance surface\r\n                return this.evalConvol(p,res);\r\n            default:\r\n                throw \"Unknown volType, use Orga\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  value function for Distance volume type (distance field).\r\n     *\r\n     *  @param {THREE.Vector3} p\r\n     *  @param {ValueResultType} res\r\n     */\r\n    evalDist = (function() {\r\n\r\n        var ev_eps = {v:0};\r\n        var p_eps = new THREE.Vector3();\r\n        /**\r\n         *  value function for Distance volume type (distance field).\r\n         *\r\n         *  @param {THREE.Vector3} p\r\n         *  @param {ValueResultType} res\r\n         */\r\n        return function (p, res) {\r\n            /** @type {ScalisTriangle} */\r\n            let self = this;\r\n            /*\r\n                // bounding box check (could/should be done in the node ?)\r\n                if( p.x > this.aabb.min_x && p.x < this.aabb.max_x &&\r\n                    p.y > this.aabb.min_y && p.y < this.aabb.max_y &&\r\n                    p.z > this.aabb.min_z && p.z < this.aabb.max_z\r\n                    )\r\n                {\r\n            */\r\n            // First compute the distance to the triangle and find the nearest point\r\n            // Code taken from EuclideanDistance functor, can be optimized.\r\n            var p0_to_p = new THREE.Vector3();\r\n            p0_to_p.subVectors(p,self.v[0].getPos());\r\n            var normal_inv = self.unit_normal.clone().multiplyScalar(-1);\r\n            ///////////////////////////////////////////////////////////////////////\r\n            // We must generalize the principle used for the segment\r\n            if(!self.equal_weights){\r\n\r\n                // Now look for the point equivalent to the Z point for the segment.\r\n                // This point Z is the intersection of 3 orthogonal planes :\r\n                //      plane 1 : triangle plane\r\n                //      plane 2 : n = ortho_dir, passing through point\r\n                //      plane 3 : n = main_dir, passing through point_iso_zero_dir1 and point_iso_zero_dir2\r\n                // Formula for a unique intersection of 3 planes : http://geomalgorithms.com/a05-_intersect-1.html\r\n                //  Plane equation from a normal n and a point p0 : <n.(x,y,z)> - <n.p0> = 0\r\n                //\r\n                // TODO : this formula can probably be optimized :\r\n                //        - some elements can be stored\r\n                //        - some assertion are verified and may help to simplify the computation, for example : n3 = n2%n1\r\n                var n1 = normal_inv;\r\n                var n2 = self.unsigned_ortho_dir;\r\n                var n3 = self.main_dir.clone().multiplyScalar(-1);\r\n                var d1 = -self.v[0].getPos().dot(n1);\r\n                var d2 = -p.dot(n2);\r\n                var d3 = -self.point_iso_zero.dot(n3);\r\n\r\n                var d1n2n3 = new THREE.Vector3();\r\n                d1n2n3.crossVectors(n2,n3);\r\n                d1n2n3.multiplyScalar(-d1);\r\n                var d2n3n1 = new THREE.Vector3();\r\n                d2n3n1.crossVectors(n3,n1);\r\n                d2n3n1.multiplyScalar(-d2);\r\n                var d3n1n2 = new THREE.Vector3();\r\n                d3n1n2.crossVectors(n1,n2);\r\n                d3n1n2.multiplyScalar(-d3);\r\n                var n2cn3 = new THREE.Vector3();\r\n                n2cn3.crossVectors(n2,n3);\r\n                var Z = new THREE.Vector3(  d1n2n3.x+d2n3n1.x+d3n1n2.x,\r\n                                            d1n2n3.y+d2n3n1.y+d3n1n2.y,\r\n                                            d1n2n3.z+d2n3n1.z+d3n1n2.z);\r\n                Z.divideScalar(n1.dot(n2cn3));\r\n\r\n                // Now we want to project in the direction orthogonal to (pZ) and ortho_dir\r\n                var pz = new THREE.Vector3(Z.x-p.x,Z.y-p.y,Z.z-p.z);\r\n\r\n                // set proj_dir\r\n                self.proj_dir = new THREE.Vector3();\r\n                self.proj_dir.crossVectors(pz,self.unsigned_ortho_dir);\r\n                self.proj_dir.normalize(); // should be useless\r\n            }\r\n\r\n            // Project along the given direction\r\n            var non_ortho_proj = new THREE.Vector3();\r\n            non_ortho_proj.copy(self.proj_dir);\r\n            non_ortho_proj.multiplyScalar( -p0_to_p.dot(normal_inv)/self.proj_dir.dot(normal_inv));\r\n            non_ortho_proj.add(p);\r\n\r\n            var tmp_vec = new THREE.Vector3();\r\n            var tmp_vec0 = new THREE.Vector3();\r\n            var tmp_vec1 = new THREE.Vector3();\r\n            var tmp_vec2 = new THREE.Vector3();\r\n            tmp_vec0.subVectors(non_ortho_proj,self.v[0].getPos());\r\n            tmp_vec1.subVectors(non_ortho_proj,self.v[1].getPos());\r\n            tmp_vec2.subVectors(non_ortho_proj,self.v[2].getPos());\r\n\r\n            if( tmp_vec.crossVectors(self.unit_p0p1,tmp_vec0).dot(normal_inv) > 0.0 &&\r\n                tmp_vec.crossVectors(self.unit_p1p2,tmp_vec1).dot(normal_inv) > 0.0 &&\r\n                tmp_vec.crossVectors(self.unit_p2p0,tmp_vec2).dot(normal_inv) > 0.0)\r\n            {\r\n                tmp_vec.subVectors(p,non_ortho_proj);\r\n                res.v = tmp_vec.lengthSq();\r\n\r\n                // get barycentric coordinates of nearest_point (which is necessarily in the triangle\r\n                var p0 = self.v[0].getPos();\r\n                var p1 = self.v[1].getPos();\r\n                var p2 = self.v[2].getPos();\r\n\r\n                var tmp_vec_bis = new THREE.Vector3();\r\n                tmp_vec.subVectors(p1,p0);\r\n                tmp_vec_bis.subVectors(p2,p0);\r\n                var n = new THREE.Vector3();\r\n                n.crossVectors(tmp_vec,tmp_vec_bis);\r\n                tmp_vec.subVectors(p2,p1);\r\n                var nv1 = new THREE.Vector3();\r\n                nv1.crossVectors(tmp_vec,tmp_vec1);\r\n                tmp_vec.subVectors(p0,p2);\r\n                var nv2 = new THREE.Vector3();\r\n                nv2.crossVectors(tmp_vec,tmp_vec2);\r\n                tmp_vec.subVectors(p1,p0);\r\n                var nv3 = new THREE.Vector3();\r\n                nv3.crossVectors(tmp_vec,tmp_vec0);\r\n\r\n                var nsq = n.lengthSq();\r\n                var a1 = n.dot(nv1);\r\n                var a2 = n.dot(nv2);\r\n                var a3 = n.dot(nv3);\r\n\r\n                var inter_weight = (a1*self.v[0].getThickness()+a2*self.v[1].getThickness()+a3*self.v[2].getThickness())/nsq;\r\n\r\n                res.v = ScalisMath.Poly6Eval(Math.sqrt(res.v)/inter_weight)*ScalisMath.Poly6NF0D;\r\n\r\n                if(res.m){\r\n                    res.m.triMean(self.materials[0],self.materials[1],self.materials[2],a1,a2,a3,nsq);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // Use to keep the case selected in case we need to compute the material\r\n                var seg_case = 0;\r\n                // do the same as for a segment on all triangle sides\r\n                self.GenericSegmentComputation(\r\n                    p,\r\n                    self.v[0].getPos(),\r\n                    self.p0p1,\r\n                    self.length_p0p1,\r\n                    self.length_p0p1*self.length_p0p1,\r\n                    self.v[0].getThickness(),\r\n                    self.v[1].getThickness()-self.v[0].getThickness(),\r\n                    self.res_gseg\r\n                );\r\n\r\n                self.res_gseg.sqrdist = self.res_gseg.proj_to_p.lengthSq();\r\n                self.res_gseg.ratio = self.res_gseg.sqrdist/(self.res_gseg.weight_proj*self.res_gseg.weight_proj);\r\n\r\n                self.GenericSegmentComputation(\r\n                    p,\r\n                    self.v[1].getPos(),\r\n                    self.p1p2,\r\n                    self.length_p1p2,\r\n                    self.length_p1p2*self.length_p1p2,\r\n                    self.v[1].getThickness(),\r\n                    self.v[2].getThickness()-self.v[1].getThickness(),\r\n                    self.tmp_res_gseg\r\n                );\r\n                self.tmp_res_gseg.sqrdist = self.tmp_res_gseg.proj_to_p.lengthSq();\r\n                self.tmp_res_gseg.ratio = self.tmp_res_gseg.sqrdist/(self.tmp_res_gseg.weight_proj*self.tmp_res_gseg.weight_proj);\r\n                if(self.res_gseg.ratio > self.tmp_res_gseg.ratio){\r\n                    self.res_gseg.sqrdist         = self.tmp_res_gseg.sqrdist;\r\n                    self.res_gseg.proj_to_p       = self.tmp_res_gseg.proj_to_p;\r\n                    self.res_gseg.weight_proj     = self.tmp_res_gseg.weight_proj;\r\n                    self.res_gseg.ratio           = self.tmp_res_gseg.ratio;\r\n                    self.res_gseg.t               = self.tmp_res_gseg.t;\r\n                    seg_case = 1;\r\n                }\r\n\r\n                self.GenericSegmentComputation(\r\n                    p,\r\n                    self.v[2].getPos(),\r\n                    self.p2p0,\r\n                    self.length_p2p0,\r\n                    self.length_p2p0*self.length_p2p0,\r\n                    self.v[2].getThickness(),\r\n                    self.v[0].getThickness()-self.v[2].getThickness(),\r\n                    self.tmp_res_gseg\r\n                );\r\n                self.tmp_res_gseg.sqrdist = self.tmp_res_gseg.proj_to_p.lengthSq();\r\n                self.tmp_res_gseg.ratio = self.tmp_res_gseg.sqrdist/(self.tmp_res_gseg.weight_proj*self.tmp_res_gseg.weight_proj);\r\n                if(self.res_gseg.ratio > self.tmp_res_gseg.ratio){\r\n                    self.res_gseg.sqrdist         = self.tmp_res_gseg.sqrdist;\r\n                    self.res_gseg.proj_to_p       = self.tmp_res_gseg.proj_to_p;\r\n                    self.res_gseg.weight_proj     = self.tmp_res_gseg.weight_proj;\r\n                    self.res_gseg.ratio           = self.tmp_res_gseg.ratio;\r\n                    self.res_gseg.t               = self.tmp_res_gseg.t;\r\n                    seg_case = 2;\r\n                }\r\n\r\n                res.v = ScalisMath.Poly6Eval(Math.sqrt(self.res_gseg.sqrdist)/self.res_gseg.weight_proj)*ScalisMath.Poly6NF0D;\r\n\r\n                ////////////////////////////////////////////////////////////////\r\n                // Material computation\r\n                if(res.m){\r\n                    switch(seg_case){\r\n                        case 0:\r\n                            res.m.copy(self.materials[0]);\r\n                            res.m.lerp(self.materials[1], self.res_gseg.t);\r\n                        break;\r\n                        case 1:\r\n                            res.m.copy(self.materials[1]);\r\n                            res.m.lerp(self.materials[2], self.res_gseg.t);\r\n                        break;\r\n                        case 2:\r\n                            res.m.copy(self.materials[2]);\r\n                            res.m.lerp(self.materials[0], self.res_gseg.t);\r\n                        break;\r\n                        default:\r\n                            throw \"Error : seg_case unknown\";\r\n                    }\r\n                }\r\n                //////////////////////////////////////////////////////////////\r\n            }\r\n            // IMPORTANT NOTE :\r\n            // We should use an analytical gradient here. It should be possible to\r\n            // compute.\r\n            if(res.g)\r\n            {\r\n                var epsilon = 0.00001;\r\n                p_eps.copy(p);\r\n                p_eps.x += epsilon;\r\n                self.evalDist(p_eps, ev_eps);\r\n                res.g.x = (ev_eps.v-res.v)/epsilon;\r\n                p_eps.x -= epsilon;\r\n\r\n                p_eps.y += epsilon;\r\n                self.evalDist(p_eps, ev_eps);\r\n                res.g.y = (ev_eps.v-res.v)/epsilon;\r\n                p_eps.y -= epsilon;\r\n\r\n                p_eps.z += epsilon;\r\n                self.evalDist(p_eps, ev_eps);\r\n                res.g.z = (ev_eps.v-res.v)/epsilon;\r\n            }\r\n    /*\r\n        }else{\r\n            res.v = 0;\r\n        }\r\n    */\r\n        };\r\n    })();\r\n\r\n\r\n    /**\r\n     *\r\n     *  Segment computations used in Distance triangle evaluation.\r\n     *\r\n     *  @param {!THREE.Vector3} point Point where value is wanted, as a THREE.Vector3\r\n     *  @param {!THREE.Vector3} p1 Segment first point, as a THREE.Vector3\r\n     *  @param {!THREE.Vector3} p1p2 Segment first to second point, as a THREE.Vector3\r\n     *  @param {number} length Length of the segment\r\n     *  @param {number} sqr_length Squared length of the segment\r\n     *  @param {number} weight_1 Weight for the first point of the segment\r\n     *  @param {number} delta_weight weight_2 - weight_1\r\n     *  @param {!Object} res {proj_to_p, weight_proj}\r\n     *\r\n     */\r\n    GenericSegmentComputation(  point,\r\n                                p1,\r\n                                p1p2,\r\n                                length,\r\n                                sqr_length,\r\n                                weight_1,\r\n                                delta_weight, // = weight_2-weight_1\r\n                                res)\r\n    {\r\n        var origin_to_p = new THREE.Vector3();\r\n        origin_to_p.subVectors(point,p1);\r\n\r\n        var orig_p_scal_dir = origin_to_p.dot(p1p2);\r\n        var orig_p_sqr = origin_to_p.lengthSq();\r\n\r\n        var denum = sqr_length * weight_1 + orig_p_scal_dir * delta_weight;\r\n        var t = (delta_weight<0.0) ? 0.0 : 1.0;\r\n        if(denum > 0.0)\r\n        {\r\n            t = (orig_p_scal_dir * weight_1 + orig_p_sqr * delta_weight) /denum;\r\n            t = (t<0.0) ? 0.0 : ((t>1.0) ? 1.0 : t) ; // clipping (nearest point on segment not line)\r\n        }\r\n\r\n        res.proj_to_p = new THREE.Vector3(  t*p1p2.x - origin_to_p.x,\r\n                                            t*p1p2.y - origin_to_p.y,\r\n                                            t*p1p2.z - origin_to_p.z);\r\n        res.weight_proj = weight_1 + t*delta_weight;\r\n\r\n        res.t = t;\r\n\r\n        return res;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////\r\n    // Convolution Evaluation functions and auxiliaary functions\r\n\r\n    /**\r\n     *  value function for Distance volume type (distance field).\r\n     *\r\n     *  @param {THREE.Vector3} p\r\n     *  @param {ValueResultType} res\r\n     */\r\n    evalConvol = (function() {\r\n\r\n        var g = new THREE.Vector3();\r\n        var m = new Material();\r\n        var tmpRes = {v:0,g:null,m:null};\r\n        var g2 = new THREE.Vector3();\r\n        var m2 = new Material();\r\n        var tmpRes2 = {v:0,g:null,m:null};\r\n        /**\r\n         *  @param {THREE.Vector3} p\r\n         *  @param {ValueResultType} res\r\n         */\r\n        return function (p, res) {\r\n\r\n            /** @type {ScalisTriangle} */\r\n            let self = this;\r\n\r\n            tmpRes.g = res.g ? g : null;\r\n            tmpRes.m = res.m ? m : null;\r\n\r\n            // Compute closest point (t parameter) on the triangle in \"warped space\" as well as clipping\r\n            var clipped = {l1: 0, l2: 0};\r\n            if (self.ComputeTParam(p, clipped)) {\r\n                var t_low = clipped.l1;\r\n                var t_high = clipped.l2;\r\n                // Compute local warp coordinates\r\n                var w_local = self.weight_min + t_low * self.unit_delta_weight;\r\n                var local_t_max = self.warpAbscissa((t_high - t_low) / w_local);\r\n\r\n                // Compute the required number of sample\r\n                var nb_samples = 2 * (0.5 * sampleNumber * local_t_max + 1.0);\r\n                var d_step_size = local_t_max / nb_samples;\r\n\r\n                // Perform Simpson scheme\r\n                var t = d_step_size;\r\n                d_step_size *= 2.0;\r\n                var res_odd = 0.0;\r\n                var grad_odd = new THREE.Vector3();\r\n\r\n                for (var i = 1; i < nb_samples; i += 2) {\r\n                    self.computeLineIntegral(self.unwarpAbscissa(t) * w_local + t_low, p, tmpRes);\r\n                    res_odd += tmpRes.v;\r\n                    if (res.g) {\r\n                        grad_odd.addVectors(grad_odd, tmpRes.g);\r\n                    }\r\n                    t += d_step_size;\r\n                }\r\n\r\n                var res_even = 0.0;\r\n                var grad_even = new THREE.Vector3();\r\n                t = 0.0;\r\n                for (var j = 2; j < nb_samples; j += 2) {\r\n                    t += d_step_size;\r\n                    self.computeLineIntegral(self.unwarpAbscissa(t) * w_local + t_low, p, tmpRes);\r\n                    if (res.g) {\r\n                        grad_even.addVectors(grad_even, tmpRes.g);\r\n                    }\r\n                    res_even += tmpRes.v;\r\n                }\r\n\r\n                tmpRes2.g = res.g ? g2 : null;\r\n                tmpRes2.m = res.m ? m2 : null;\r\n\r\n                var res_low = self.computeLineIntegral(t_low, p, tmpRes);\r\n                var res_high = self.computeLineIntegral(t_high, p, tmpRes2);\r\n\r\n                res.v = res_low.v + 4.0 * res_odd + 2.0 * res_even + res_low.v;\r\n                var factor = ( local_t_max / (3.0 * (nb_samples)) ) * ScalisMath.Poly6NF2D;\r\n                res.v *= factor;\r\n                if (res.g) {\r\n                    var grad_res = new THREE.Vector3();\r\n                    grad_res.addVectors(grad_res, res_low.g);\r\n                    grad_res.addVectors(grad_res, grad_odd.multiplyScalar(4.0));\r\n                    grad_res.addVectors(grad_res, grad_even.multiplyScalar(2.0));\r\n                    grad_res.addVectors(grad_res, res_high.g);\r\n                    res.g = grad_res.multiplyScalar(factor);\r\n                }\r\n            } else {\r\n                res.v = 0.0;\r\n                res.g = new THREE.Vector3();\r\n            }\r\n            if (res.m) {\r\n                tmpRes.g = null;\r\n                self.evalDist(p, tmpRes);\r\n                res.m.copy(tmpRes.m);\r\n            }\r\n        };\r\n    })();\r\n    /**\r\n     *  @param {number} t\r\n     *  @return {number} Warped value\r\n     */\r\n   warpAbscissa(t) {\r\n        // Compute approx of ln(d*l+1)/d\r\n        var dt = t * this.unit_delta_weight;\r\n        var inv_dtp2 = 1.0 / (dt + 2.0);\r\n        var sqr_dt_divdlp2 = dt * inv_dtp2;\r\n        sqr_dt_divdlp2 *= sqr_dt_divdlp2;\r\n        var serie_approx = 1.0 + sqr_dt_divdlp2*(\r\n                                       (1.0/3.0) + sqr_dt_divdlp2*(\r\n                                            (1.0/5.0) + sqr_dt_divdlp2*(\r\n                                                (1.0/7.0) + sqr_dt_divdlp2*(\r\n                                                    (1.0/9.0) + sqr_dt_divdlp2*(\r\n                                                        (1.0/11.0) + sqr_dt_divdlp2*(1.0/13.0) )))));\r\n        return 2.0 * t * inv_dtp2 * serie_approx;\r\n    }\r\n\r\n    /**\r\n     *  @param {number} t\r\n     *  @return {number} Unwarped value\r\n     */\r\n    unwarpAbscissa(t) {\r\n        // Compute approx of (exp(d*l)-1)/d\r\n        var dt = t * this.unit_delta_weight;\r\n        return t * ( 1.0 + dt *( 1.0/2.0 + dt * ( 1.0/6.0 + dt * ( 1.0/24.0 + dt * ( 1.0/120.0 + dt * 1.0/720.0 ))))) ;\r\n    }\r\n\r\n    /**\r\n     *  @param {number} t\r\n     *  @param {!THREE.Vector3} p point, as a THREE.Vector3\r\n     *  @param {Object} res result containing the wanted elements like res.v for the value, res.g for the gradient, res.m for the material.\r\n     *  @return the res parameter, filled with proper values\r\n     */\r\n    computeLineIntegral(t, p, res) {\r\n\r\n        var weight = this.weight_min + t * this.unit_delta_weight;\r\n        var p_1 = new THREE.Vector3();\r\n        p_1.addVectors(this.point_min, this.longest_dir_special.clone().multiplyScalar(t));\r\n\r\n        var length = (t<this.coord_middle) ? (t/this.coord_middle) * this.max_seg_length\r\n                                               : ((this.coord_max-t)/(this.coord_max - this.coord_middle)) * this.max_seg_length;\r\n        if (res.g) {\r\n            this.consWeightEvalGradForSeg( p_1, weight, this.ortho_dir, length, p, res);\r\n        } else {\r\n            this.consWeightEvalForSeg( p_1, weight, this.ortho_dir, length, p, res);\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n\r\n    /**\r\n     * \"Select\" the part of a segment that is inside (in the homothetic space) of a clipping \"sphere\".\r\n     *          This function use precomputed values given as parameter (prevent redundant computation during convolution\r\n     *          computation for instance)\r\n     *          This function is used in Eval function of CompactPolynomial kernel which use a different parametrization for a greater stability.\r\n     *\r\n     *\r\n     *  @param {!THREE.Vector3} w special_coeff, x, y and z attributes must be defined\r\n     *  @param {number} length\r\n     *  @param {!Object} clipped Result if clipping occured, in l1 and l2, returned\r\n     *                           values are between 0.0 and length/weight_min\r\n     *\r\n     *  @return {boolean} true if clipping occured\r\n     *\r\n     *  @protected\r\n     */\r\n    homotheticClippingSpecial(w, length, clipped)\r\n    {\r\n        // we search solution t \\in [0,1] such that at^2-2bt+c<=0\r\n        var a = -w.z;\r\n        var b = -w.y;\r\n        var c = -w.x;\r\n\r\n        var delta = b*b - a*c;\r\n        if(delta>=0.0)\r\n        {\r\n            var b_p_sqrt_delta = b+Math.sqrt(delta);\r\n            if( (b_p_sqrt_delta<0.0) || (length*b_p_sqrt_delta<c) )\r\n            {\r\n                return false;\r\n            }\r\n            else\r\n            {\r\n                var main_root = c / b_p_sqrt_delta;\r\n                clipped.l1 = (main_root<0.0) ? 0.0 : main_root;\r\n                var a_r = a*main_root;\r\n                clipped.l2 = (2.0*b<a_r+a*length) ? c/(a_r) : length;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     *  @param {!THREE.Vector3} p_1\r\n     *  @param {number} w_1\r\n     *  @param {!THREE.Vector3} unit_dir\r\n     *  @param {number} length\r\n     *  @param {!THREE.Vector3} point\r\n     *  @return {!Object} Object defining v attribute with the computed value\r\n     *\r\n     *  @protected\r\n     */\r\n    consWeightEvalForSeg( p_1, w_1, unit_dir, length, point, res) {\r\n        var p_min_to_point = new THREE.Vector3();\r\n        p_min_to_point.subVectors( point, p_1 );\r\n        var uv = unit_dir.dot(p_min_to_point);\r\n        var d2 = p_min_to_point.lengthSq();\r\n\r\n        var special_coeff = new THREE.Vector3();\r\n        special_coeff.set( w_1*w_1  - ScalisMath.KIS2 * d2,\r\n                           - ScalisMath.KIS2 * uv,\r\n                           - ScalisMath.KIS2 );\r\n        var clipped = {l1: 0, l2:0};\r\n        if(this.homotheticClippingSpecial(special_coeff, length, clipped))\r\n        {\r\n            var inv_local_min_weight = 1.0 / w_1;\r\n            special_coeff.x = 1.0 - ScalisMath.KIS2 * ( clipped.l1*(clipped.l1-2.0*uv) + d2 ) * inv_local_min_weight*inv_local_min_weight;\r\n            special_coeff.y = - ScalisMath.KIS2*(uv-clipped.l1) * inv_local_min_weight;\r\n\r\n            res.v = this.homotheticCompactPolynomial_segment_F_i6_cste( (clipped.l2-clipped.l1) * inv_local_min_weight,\r\n                                                                                                      special_coeff );\r\n        }else{\r\n            res = 0;\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     *  @param {!THREE.Vector3} p_1\r\n     *  @param {number} w_1\r\n     *  @param {!THREE.Vector3} unit_dir\r\n     *  @param {number} length\r\n     *  @param {!THREE.Vector3} point\r\n     *  @return {!Object} Object defining v attribute with the computed value\r\n     *\r\n     *  @protected\r\n     */\r\n    consWeightEvalGradForSeg( p_1, w_1, unit_dir, length, point, res) {\r\n\r\n        var p_min_to_point = new THREE.Vector3();\r\n        p_min_to_point.subVectors( point, p_1 );\r\n        var uv = unit_dir.dot(p_min_to_point);\r\n        var d2 = p_min_to_point.lengthSq();\r\n\r\n        var special_coeff = new THREE.Vector3();\r\n        special_coeff.set( w_1*w_1  - ScalisMath.KIS2 * d2 ,\r\n                           - ScalisMath.KIS2 * uv ,\r\n                           - ScalisMath.KIS2 );\r\n        var clipped = {l1: 0, l2:0};\r\n        if(this.homotheticClippingSpecial(special_coeff, length, clipped))\r\n        {\r\n            var inv_local_min_weight = 1.0 / w_1;\r\n            special_coeff.x = 1.0 - ScalisMath.KIS2 * ( clipped.l1*(clipped.l1-2.0*uv) + d2 ) * inv_local_min_weight*inv_local_min_weight;\r\n            special_coeff.y = - ScalisMath.KIS2*(uv-clipped.l1) * inv_local_min_weight;\r\n\r\n            var F0F1F2 = new THREE.Vector3();\r\n            this.homotheticCompactPolynomial_segment_FGradF_i6_cste( (clipped.l2-clipped.l1) * inv_local_min_weight,\r\n                                                                                                    special_coeff, F0F1F2);\r\n            res.v = F0F1F2.x;\r\n            F0F1F2.y *= inv_local_min_weight;\r\n            var vect = unit_dir.clone();\r\n            vect.multiplyScalar( F0F1F2.z + clipped.l1 * F0F1F2.y);\r\n            p_min_to_point.multiplyScalar(- F0F1F2.y);\r\n            p_min_to_point.addVectors(p_min_to_point,vect);\r\n            res.g =  p_min_to_point.multiplyScalar(6.0*ScalisMath.KIS2*inv_local_min_weight);\r\n        }else{\r\n            res.v = 0;\r\n            res.g.set(0,0,0);\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     *  @param {!THREE.Vector3} point the point of evaluation, as a THREE.Vector3\r\n     *  @param {!Object} clipped Result if clipping occured, in l1 and l2, returned\r\n     *                           values are between 0.0 and length/weight_min\r\n     *  @return {boolean} true if clipping occured\r\n     */\r\n    ComputeTParam(point, clipped) {\r\n        var p_min_to_point = new THREE.Vector3();\r\n        p_min_to_point.subVectors( point, this.point_min );\r\n\r\n        var coord_main_dir = p_min_to_point.dot(this.main_dir);\r\n        var coord_normal   = p_min_to_point.dot(this.unit_normal);\r\n\r\n        //WARNING : Assume that the compact support is defined in the same way as HomotheticCompactPolynomial kernels\r\n        var dist_sqr = coord_main_dir*coord_main_dir + coord_normal*coord_normal;\r\n\r\n        var special_coeff = new THREE.Vector3();\r\n        special_coeff.set( this.weight_min*this.weight_min - ScalisMath.KIS2 * dist_sqr,\r\n                          -this.unit_delta_weight*this.weight_min - ScalisMath.KIS2 * coord_main_dir,\r\n                           this.unit_delta_weight*this.unit_delta_weight - ScalisMath.KIS2);\r\n\r\n        return this.homotheticClippingSpecial(special_coeff, this.coord_max, clipped);\r\n    }\r\n\r\n    /**\r\n     *  Sub-function for optimized convolution value computation (Homothetic Compact Polynomial).*\r\n     *  Function designed by Cedric Zanni, optimized for C++ using matlab.\r\n     *  @param {number} l\r\n     *  @param {!THREE.Vector3} w Some coefficient, as a THREE.Vector3\r\n     *  @return {number} the value\r\n     */\r\n    homotheticCompactPolynomial_segment_F_i6_cste(l, w) {\r\n        var t7068 = w.z;\r\n        var t7078 = t7068 * l;\r\n        var t7069 = w.y;\r\n        var t7070 = w.x;\r\n        var t2 = t7069 * t7069;\r\n        var t7065 = t7068 * t7070 - t2;\r\n        var t7067 = 0.1e1 / t7068;\r\n        var t7077 = t7065 * t7067;\r\n        var t7064 = t7070 + (-0.2e1 * t7069 + t7078) * l;\r\n        var t7066 = t7078 - t7069;\r\n        var t6 = t7064 * t7064;\r\n        var t7076 = t7066 * t6;\r\n        var t7 = t7070 * t7070;\r\n        var t7075 = t7069 * t7;\r\n        return  (0.6e1 / 0.5e1 * (0.4e1 / 0.3e1 * (0.2e1 * t7065 * l + t7066 * t7064 + t7069 * t7070) * t7077 + t7076 + t7075) * t7077 + t7064 * t7076 + t7070 * t7075) * t7067 / 0.7e1;\r\n    }\r\n\r\n    // optimized function for segment of constant weight\r\n    // computes value and grad\r\n    /**\r\n     *  Sub-function for optimized convolution for segment of constant weight,\r\n     *  value and gradient computation (Homothetic Compact Polynomial).\r\n     *  Function designed by Cedric Zanni, optimized for C++ using matlab.\r\n     *  @param {number} l\r\n     *  @param {!THREE.Vector3} res result in a THREE.Vector3\r\n     *  @param {!THREE.Vector3} w a THREE.Vector3\r\n     *\r\n     */\r\n    homotheticCompactPolynomial_segment_FGradF_i6_cste(l, w, res) {\r\n        var t7086 = w.z;\r\n        var t7095 = t7086 * l;\r\n        var t7087 = w.y;\r\n        var t7088 = w.x;\r\n        var t2 = t7087 * t7087;\r\n        var t7082 = t7086 * t7088 - t2;\r\n        var t7084 = 0.1e1 / t7086;\r\n        var t7094 = t7082 * t7084;\r\n        var t7081 = t7088 + (-0.2e1 * t7087 + t7095) * l;\r\n        var t7083 = t7095 - t7087;\r\n        var t7089 = t7081 * t7081;\r\n        var t7091 = t7088 * t7088;\r\n        var t7079 = 0.4e1 / 0.3e1 * (0.2e1 * t7082 * l + t7083 * t7081 + t7087 * t7088) * t7094 + t7083 * t7089 + t7087 * t7091;\r\n        var t7093 = t7079 * t7084 / 0.5e1;\r\n        var t7085 = t7088 * t7091;\r\n        var t7080 = t7081 * t7089;\r\n        res.x = (0.6e1 / 0.5e1 * t7079 * t7094 + t7083 * t7080 + t7087 * t7085) * t7084 / 0.7e1;\r\n        res.y = t7093;\r\n        res.z = (t7087 * t7093 + t7080 / 0.6e1 - t7085 / 0.6e1) * t7084;\r\n    }\r\n};\r\n\r\nTypes.register(ScalisTriangle.type, ScalisTriangle);\r\n\r\nmodule.exports = ScalisTriangle;\r\n","'use strict';\r\n\r\nconst Types = require(\"../Types.js\");\r\n\r\n/** @typedef {*} Json */\r\n\r\n/**\r\n * @typedef {{type:string}} DistanceFunctorJSON\r\n */\r\n\r\n/**\r\n *  A superclass for Node and Primitive in the blobtree.\r\n *  @constructor\r\n */\r\nclass DistanceFunctor {\r\n\r\n    static type = \"DistanceFunctor\";\r\n\r\n    /**\r\n     *  @abstract\r\n     *  @param {DistanceFunctorJSON} json Json description of the object\r\n     */\r\n    static fromJSON(json) {\r\n        return Types.fromJSON(json);\r\n    };\r\n\r\n    /**\r\n     *  @return {string} Type of the element\r\n     */\r\n    getType() {\r\n        return DistanceFunctor.type;\r\n    };\r\n\r\n    /**\r\n     *  @abstract\r\n     *  Return a Javscript Object respecting JSON convention and can be used to serialize the functor.\r\n     *  @returns {DistanceFunctorJSON}\r\n     */\r\n    toJSON() {\r\n        return {\r\n            type: this.getType()\r\n        };\r\n    };\r\n\r\n    /**\r\n     *  @abstract\r\n     *  @param {number} _d The distance to be considered.\r\n     *  @return {number} Scalar field value according to given distance d.\r\n     */\r\n    value(_d) {\r\n        throw \"Error : not implemented. Must be reimplemented in children classes.\";\r\n    };\r\n\r\n    /**\r\n     *  Perform a numerical approximation of the gradient according to epsilon.\r\n     *  @param {number} d The distance to be considered.\r\n     *  @param {number} epsilon The numerica step for this gradient computation. Default to 0.00001.\r\n     */\r\n    numericalGradient(d, epsilon) {\r\n        var eps = epsilon ? epsilon : 0.00001;\r\n        return (this.value(d + eps) - this.value(d - eps)) / (2 * eps);\r\n    };\r\n\r\n    /**\r\n     *  Compute the gradient. Should be reimplemented in most cases.\r\n     *  By default, this function return a numerical gradient with epsilon at 0.00001.\r\n     *  @return {number} One dimensional gradient at d.\r\n     */\r\n    gradient(d) {\r\n        return this.numericalGradient(d, 0.00001);\r\n    };\r\n\r\n    /**\r\n     *  @returns {number} Distance above which all values will be 0. Should be reimplemented and default to infinity.\r\n     */\r\n    getSupport() {\r\n        return Infinity;\r\n    };\r\n\r\n\r\n};\r\n\r\nTypes.register(DistanceFunctor.type, DistanceFunctor);\r\n\r\nmodule.exports = DistanceFunctor;\r\n\r\n\r\n","'use strict';\r\n\r\nconst Types = require(\"../Types.js\");\r\nconst DistanceFunctor = require(\"./DistanceFunctor.js\");\r\n\r\n/** @typedef {import('./DistanceFunctor').DistanceFunctorJSON} DistanceFunctorJSON */\r\n\r\n/** @typedef {{scale:number} & DistanceFunctorJSON} Poly6DistanceFunctorJSON */\r\n\r\n/**\r\n *  Specialised Distance Functor using a 6 degree polynomial function.\r\n *  This is the function similar to the one used in SCALIS primitives.\r\n *  @constructor\r\n */\r\nclass Poly6DistanceFunctor extends DistanceFunctor {\r\n\r\n    static type = \"Poly6DistanceFunctor\";\r\n\r\n    /**\r\n     * @param {Poly6DistanceFunctorJSON} json\r\n     */\r\n    static fromJSON(json) {\r\n        return new Poly6DistanceFunctor(json.scale);\r\n    }\r\n\r\n    /**\r\n     * This is the standard 6 degree polynomial function used for implicit modeling.\r\n     * At 0, its value is 1 with a zero derivative.\r\n     * At 1, its value is 0 with a zero derivative.\r\n     * @param {number} d\r\n     */\r\n    static evalStandard(d) {\r\n        if (d < 0.0) {\r\n            return 1.0;\r\n        }\r\n        var aux = 1.0 - d * d;\r\n\r\n        if (aux > 0.0) {\r\n            return aux * aux * aux;\r\n        } else {\r\n            return 0.0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {number} scale\r\n     */\r\n    constructor(scale) {\r\n        super();\r\n        this.scale = scale || 1.0;\r\n    }\r\n\r\n    /**\r\n     *  @return {string} Type of the element\r\n     */\r\n    getType() {\r\n        return Poly6DistanceFunctor.type;\r\n    }\r\n\r\n    /**\r\n     *  @return {Object} Json description of this functor.\r\n     */\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            scale: this.scale\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @link DistanceFunctor.value for a complete description.\r\n     * @param {number} d The distance to be considered.\r\n     * @returns {number} Scalar field value according to given distance d.\r\n     */\r\n    value(d) {\r\n        var dp = d / (2 * this.scale); // ensure the support fits the scale.\r\n        dp = dp + 0.5;\r\n        return Poly6DistanceFunctor.evalStandard(dp) / Poly6DistanceFunctor.evalStandard(0.5);\r\n    }\r\n\r\n    /**\r\n     * @param {number} d\r\n     * @returns {number} dimensional gradient at d.\r\n     */\r\n    gradient(d) {\r\n        var ds = d / (2 * this.scale) + 0.5;\r\n        var res = (1 - ds * ds);\r\n        res = -(6 / (2 * this.scale)) * ds * res * res / Poly6DistanceFunctor.evalStandard(0.5);\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * @link DistanceFunctor.getSupport for a complete description.\r\n     * @returns\r\n     */\r\n    getSupport() {\r\n        return this.scale;\r\n    }\r\n};\r\n\r\nTypes.register(Poly6DistanceFunctor.type, Poly6DistanceFunctor);\r\n\r\nmodule.exports = Poly6DistanceFunctor;\r\n\r\n\r\n","'use strict';\r\n\r\nconst THREE = require(\"three\");\r\nconst Node = require('../Node.js');\r\nconst Types = require(\"../Types.js\");\r\n\r\n/** @typedef {import('../areas/Area')} Area */\r\n/** @typedef {import('./SDFPrimitive')} SDFPrimitive */\r\n\r\n/** @typedef {import('../Node').NodeJSON} NodeJSON */\r\n\r\n/** @typedef {NodeJSON} SDFNodeJSON */\r\n\r\n\r\n/**\r\n *  This class implements an abstract Node class for Signed Distance Field.\r\n *  The considered primtive is at distance = 0.\r\n *  Convention is : negative value inside the surface, positive value outside.\r\n *  @constructor\r\n *  @extends {Node}\r\n */\r\nclass SDFNode extends Node\r\n{\r\n\r\n    static type = \"SDFNode\";\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        // Default bounding box for a SDF is infinite.\r\n        this.aabb.set(\r\n            new THREE.Vector3( - Infinity, - Infinity, - Infinity ),\r\n            new THREE.Vector3( + Infinity, + Infinity, + Infinity )\r\n        );\r\n\r\n        /** @type {Array<SDFNode|SDFPrimitive>} */\r\n        this.children;\r\n    }\r\n\r\n    getType(){\r\n        return SDFNode.type;\r\n    };\r\n\r\n    // Abstract\r\n    computeAABB() {\r\n        // Nothing to do, SDF have infinite bounding box\r\n    };\r\n\r\n    /**\r\n     *  Return the bounding box of the node for a given maximum distance.\r\n     *  Ie, the distance field is greater than d everywhere outside the returned box.\r\n     *  @abstract\r\n     *  @param {number} d Distance\r\n     *  @return {THREE.Box3}\r\n     *\r\n     */\r\n    computeDistanceAABB(d) {\r\n        let res = new THREE.Box3();\r\n        for (let i = 0; i < this.children.length; ++i){\r\n            res.union(this.children[i].computeDistanceAABB(d));\r\n        }\r\n        return res;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {SDFNode | SDFPrimitive} c\r\n     */\r\n    addChild(c) {\r\n        return super.addChild(c);\r\n    }\r\n\r\n    /**\r\n     *  SDF Field are infinite, so Areas do not make sens except for the SDFRoot, which will\r\n     *  usually apply a compact kernel to the distance field.\r\n     *  @abstract\r\n     *  @return {Object}\r\n     */\r\n    getAreas() {\r\n        throw \"No Areas for SDFNode, except for the SDFRootNode.\";\r\n    };\r\n\r\n    /**\r\n     * @param {number} d Distance to consider for the area computation.\r\n     * @returns {Array.<{aabb: THREE.Box3, bv:Area, obj:SDFPrimitive}>}\r\n     */\r\n    getDistanceAreas(d) {\r\n        // By default return areas of all children\r\n        let res = [];\r\n        for (let i = 0; i < this.children.length; ++i){\r\n            let c = this.children[i];\r\n            res.push(...c.getDistanceAreas(d));\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Since SDF Nodes are distance function, this function will return\r\n     * an accurate distance to the surface.\r\n     * @abstract\r\n     * @param {THREE.Vector3} _p Point\r\n     * @return {number}\r\n     */\r\n    distanceTo(_p) {\r\n        throw \"distanceTo should be reimplemented in every children classes of SDFNode.\";\r\n    };\r\n\r\n    // Abstract\r\n    /**\r\n     * @abstract\r\n     * @return {number}\r\n     */\r\n    heuristicStepWithin() {\r\n        throw \"heuristicStepWithin may not make sens for all SDFNode, except for the SDFRootNode.\";\r\n    };\r\n};\r\n\r\nTypes.register(SDFNode.type, SDFNode);\r\n\r\n\r\nmodule.exports = SDFNode;\r\n\r\n\r\n","'use strict';\r\n\r\nconst THREE = require(\"three\");\r\n\r\nconst Element = require('../Element.js');\r\nconst Types = require(\"../Types.js\");\r\n\r\n/** @typedef {import('../areas/Area')} Area */\r\n/** @typedef {import('../Element').ElementJSON} ElementJSON */\r\n/** @typedef {import('../Primitive')} Primitive */\r\n\r\n/**\r\n * @typedef {ElementJSON} SDFPrimitiveJSON\r\n */\r\n\r\n/**\r\n *  This class implements an abstract primitve class for signed distance field.\r\n *  SDFPrimitive subclasses must define a scalar field being the distance to a geometry.\r\n *  @constructor\r\n *  @extends {Element}\r\n */\r\nclass SDFPrimitive extends Element {\r\n\r\n    static type = \"SDFPrimitive\";\r\n\r\n    constructor() {\r\n        super();\r\n        // Default bounding box for a SDF is infinite.\r\n        this.aabb.set(\r\n            new THREE.Vector3(- Infinity, - Infinity, - Infinity),\r\n            new THREE.Vector3(+ Infinity, + Infinity, + Infinity)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @return {string} Type of the element\r\n     */\r\n    getType() {\r\n        return SDFPrimitive.type;\r\n    }\r\n\r\n    /**\r\n     * @link Element.computeAABB for a completve description.\r\n     */\r\n    computeAABB() {\r\n        // Nothing to do, SDF have infinite bounding box\r\n    }\r\n\r\n    /**\r\n     * Return the bounding box of the node for a given maximum distance.\r\n     * Ie, the distance field is greater than d everywhere outside the returned box.\r\n     * @param {number} _d Distance\r\n     * @abstract\r\n     * @return {THREE.Box3}\r\n     */\r\n    computeDistanceAABB(_d) {\r\n        console.error(\"computeDistanceAABB is an abstract function of SDFPrimitive. Please reimplement it in children classes.\");\r\n        return (new THREE.Box3()).makeEmpty()\r\n    }\r\n\r\n    /**\r\n     * @returns {Array.<{aabb: THREE.Box3, bv:Area, obj:Primitive}>}\r\n     */\r\n    getAreas() {\r\n        throw \"No Areas for SDFPrimitive.\";\r\n    }\r\n\r\n    /**\r\n     * @param {number} _d Distance to consider for the area computation.\r\n     * @returns {Array.<{aabb: THREE.Box3, bv:Area, obj:SDFPrimitive}>}\r\n     */\r\n    getDistanceAreas(_d) {\r\n        console.error(\"getDistanceAreas is an abstract function of SDFPrimitive. Please reimplement in children classes\");\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Since SDF Nodes are distance function, this function will return\r\n     * an accurate distance to the surface.\r\n     * @abstract\r\n     *\r\n     * @param {THREE.Vector3} p\r\n     */\r\n    distanceTo = (function () {\r\n        var res = { v: 0 };\r\n        /**\r\n         * @param {THREE.Vector3} p\r\n         */\r\n        return (p) => {\r\n            /** @type {SDFPrimitive} */\r\n            let self = this;\r\n\r\n            self.value(p, res);\r\n            return res.v;\r\n        };\r\n    })();\r\n\r\n    /**\r\n     * @link see Element.heuristicStepWithin for a det\r\n     */\r\n    heuristicStepWithin() {\r\n        console.error(\"SDFPrimitive.heuristicStepWithin is Not implemented\");\r\n        return 1;\r\n    };\r\n}\r\n\r\nTypes.register(SDFPrimitive.type, SDFPrimitive);\r\n\r\n\r\n\r\nmodule.exports = SDFPrimitive;\r\n\r\n\r\n","\"use strict\";\r\n\r\nconst THREE = require(\"three\");\r\nconst Types = require(\"../Types.js\");\r\nconst SDFNode = require(\"./SDFNode.js\");\r\nconst Primitive = require(\"../Primitive.js\");\r\nconst Material = require(\"../Material.js\");\r\nconst DistanceFunctor = require('./DistanceFunctor');\r\nconst SDFPrimitive = require('./SDFPrimitive');\r\n\r\n/** @typedef {import('../areas/Area')} Area */\r\n/** @typedef {import('../Element.js').ValueResultType} ValueResultType */\r\n/** @typedef {import('../Primitive.js').PrimitiveJSON} PrimitiveJSON */\r\n\r\n/** @typedef {import('./SDFNode').SDFNodeJSON} SDFNodeJSON */\r\n/** @typedef {import('./DistanceFunctor').DistanceFunctorJSON} DistanceFunctorJSON */\r\n\r\n\r\n/** @typedef {{f:DistanceFunctorJSON, sdfRoot:SDFNodeJSON} & PrimitiveJSON} SDFRootNodeJSON */\r\n\r\n/**\r\n *  This class implements a SDF Root Node, which is basically a Signed Distance Field\r\n *  made of some noe combination, on which is applied a compact support function.\r\n *  For now SDF nodes do not have materials. A unique material is defined in the SDFRootNode.\r\n *\r\n */\r\nclass SDFRootNode extends Primitive {\r\n\r\n    static type = \"SDFRootNode\";\r\n\r\n    /**\r\n     *\r\n     * @param {SDFRootNodeJSON} json\r\n     * @returns\r\n     */\r\n    static fromJSON(json) {\r\n        let f = Types.fromJSON(json.f);\r\n        let material = Material.fromJSON(json.materials[0]);\r\n        let sdfRoot = Types.fromJSON(json.sdfRoot);\r\n        if (!(f instanceof DistanceFunctor)) {\r\n            throw new Error(\"SDFRootNode parsing resulted in the wrong type of object for parameter f.\");\r\n        }\r\n        if (!(material instanceof Material)) {\r\n            console.error(\"SDFRootNode parsing resulted in the wrong type of object for parameter material, using default.\");\r\n            material = null;\r\n        }\r\n        if (!(sdfRoot instanceof SDFNode || sdfRoot instanceof SDFPrimitive)) {\r\n            console.error(\"SDFRootNode parsing resulted in the wrong type of object for parameter sdfRoot, using default.\");\r\n            sdfRoot = null;\r\n        }\r\n        var res = new SDFRootNode(f, material, sdfRoot);\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {DistanceFunctor} f The distance function to be applied to the distance field.\r\n     * It must respect the Blobtree convention, which is : positive everywhere, with a finite support.\r\n     * @param {Material} material\r\n     * @param {SDFNode | SDFPrimitive=} sdfRoot The child containng the complete SDF. SDFRootNode can have only one child.\r\n     */\r\n    constructor(f, material, sdfRoot)\r\n    {\r\n        super();\r\n\r\n        this.f = f;\r\n\r\n        this.materials.push(material ? material.clone() : new Material());\r\n\r\n        this.sdfRoot = sdfRoot ?\r\n            (sdfRoot instanceof SDFNode ? sdfRoot : new SDFNode().addChild(sdfRoot)) : new SDFNode();\r\n\r\n        // Tmp vars to speed up computation (no reallocations)\r\n        // TODO : should be pushed in the function static variables since there can be no SDFRoot below the SDFRoot.\r\n        this.tmp_res = {v:0, g:null};\r\n        this.tmp_g = new THREE.Vector3(0,0,0);\r\n    }\r\n\r\n    getType(){\r\n        return SDFRootNode.type;\r\n    };\r\n\r\n    /**\r\n     * @param {SDFNode | SDFPrimitive} c\r\n     */\r\n    addChild(c){\r\n        if (this.sdfRoot.children.length === 0){\r\n            this.sdfRoot.addChild.call(this,c);\r\n        }else{\r\n            throw \"Error : SDFRootNode can have only one child.\";\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {SDFNode | SDFPrimitive} c\r\n     */\r\n    removeChild(c) {\r\n        this.sdfRoot.removeChild(c);\r\n    }\r\n\r\n    /**\r\n     * @returns {SDFRootNodeJSON}\r\n     */\r\n    toJSON(){\r\n        var res = {\r\n            ...super.toJSON(),\r\n            f: this.f.toJSON(),\r\n            sdfRoot: this.sdfRoot.toJSON()\r\n        };\r\n        return res;\r\n    };\r\n\r\n    prepareForEval()\r\n    {\r\n        if(!this.valid_aabb){\r\n            this.aabb = new THREE.Box3();  // Create empty BBox\r\n            for (let i = 0; i < this.sdfRoot.children.length; ++i){\r\n                let c = this.sdfRoot.children[i];\r\n                c.prepareForEval();\r\n                this.aabb.union(\r\n                    c.computeDistanceAABB(this.f.getSupport())\r\n                );     // new aabb is computed according to remaining children aabb\r\n            }\r\n\r\n            this.valid_aabb = true;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @link Element.getAreas for a complete description\r\n     *\r\n     *  This function is an attempt to have SDFRootNode behave like a Primitive in the normal Blobtree.\r\n     *\r\n     *  @returns {Array.<{aabb: THREE.Box3, bv:Area, obj:Primitive}>}\r\n     */\r\n    getAreas() {\r\n        if(!this.valid_aabb) {\r\n            throw \"ERROR : Cannot get area of invalid node\";\r\n        } else {\r\n            let distAreas = this.sdfRoot.getDistanceAreas(this.f.getSupport());\r\n            let res = [];\r\n            distAreas.forEach((area) => {\r\n                res.push({\r\n                    aabb: area.aabb,\r\n                    bv: area.bv,\r\n                    obj: this\r\n                });\r\n            });\r\n            return res;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @link Node.value for a complete description\r\n     *\r\n     *  @param {THREE.Vector3} p\r\n     *  @param {ValueResultType} res\r\n     */\r\n    value(p,res)\r\n    {\r\n        var tmp = this.tmp_res;\r\n        tmp.g = res.g ? this.tmp_g : null;\r\n\r\n        // Init res\r\n        res.v = 0;\r\n        if(res.m)  {\r\n            res.m.copy(Material.defaultMaterial);\r\n        }if(res.g) {\r\n            // res.g.set(0,0,0); // Useless here\r\n        }else if (res.step !== undefined) {\r\n            // that, is the max distance\r\n            // we want a value that won't miss any 'min'\r\n            res.step = 1000000000;\r\n        }\r\n\r\n        if(this.aabb.containsPoint(p)){\r\n            this.sdfRoot.children[0].value(p,tmp);\r\n\r\n            res.v = this.f.value(tmp.v);\r\n            if(res.g){\r\n                res.g.copy(tmp.g).multiplyScalar(this.f.gradient(res.v))\r\n            }\r\n            if(res.m){\r\n                res.m.copy(this.materials[0]);\r\n            }\r\n        }\r\n        else if (res.step !== undefined) {\r\n            // return distance to aabb such that next time we'll hit from within the aabbb\r\n            res.step = this.aabb.distanceToPoint(p) + 0.3;\r\n        }\r\n    };\r\n};\r\n\r\nTypes.register(SDFRootNode.type, SDFRootNode);\r\n\r\nmodule.exports = SDFRootNode;\r\n","\"use strict\";\r\n\r\nconst THREE = require(\"three\");\r\nconst Types = require(\"../Types.js\");\r\nconst SDFPrimitive = require(\"./SDFPrimitive.js\");\r\nconst AreaSphere = require(\"../areas/AreaSphere.js\");\r\n\r\n/** @typedef {import('../areas/Area')} Area */\r\n/** @typedef {import('../Element.js').Json} Json */\r\n/** @typedef {import('../Element.js').ValueResultType} ValueResultType */\r\n/** @typedef {import('./SDFPrimitive').SDFPrimitiveJSON} SDFPrimitiveJSON */\r\n\r\n/**\r\n * @typedef {{p:{x:number,y:number,z:number},acc:number} & SDFPrimitiveJSON} SDFPointJSON\r\n */\r\n\r\n/**\r\n *  @constructor\r\n *  @extends SDFPrimitive\r\n *s\r\n */\r\nclass SDFPoint extends SDFPrimitive {\r\n\r\n    static type = \"SDFPoint\";\r\n\r\n    /**\r\n     * @param {SDFPointJSON} json\r\n     * @returns {SDFPoint}\r\n     */\r\n    static fromJSON(json) {\r\n        return new SDFPoint(new THREE.Vector3(json.p.x, json.p.y, json.p.z), json.acc);\r\n    };\r\n\r\n    /**\r\n     *\r\n     *  @param {THREE.Vector3} p Position (ie center) of the point\r\n     *  @param {number} acc Accuracy factor for this primitive. Default is 1.0 which will lead to the side of the support.\r\n     */\r\n    constructor(p, acc)\r\n    {\r\n        super();\r\n\r\n        this.p = p.clone();\r\n        this.acc = acc || 1.0;\r\n    }\r\n\r\n\r\n    getType(){\r\n        return SDFPoint.type;\r\n    };\r\n\r\n    /**\r\n     * @returns {SDFPointJSON}\r\n     */\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            p: {\r\n                x: this.p.x,\r\n                y: this.p.y,\r\n                z: this.p.z\r\n            },\r\n            acc: this.acc\r\n        };\r\n    };\r\n\r\n    /**\r\n     *  @param {number} acc The new accuracy factor\r\n     */\r\n    setAccuracy(acc) {\r\n        this.acc = acc;\r\n        this.invalidAABB();\r\n    };\r\n\r\n    /**\r\n     *  @return {number} Current accuracy factor\r\n     */\r\n    getAccuracy() {\r\n        return this.acc;\r\n    };\r\n\r\n    /**\r\n     *  @param {THREE.Vector3} p The new position (ie center)\r\n     */\r\n    setPosition(p) {\r\n        this.p.copy(p);\r\n        this.invalidAABB();\r\n    };\r\n\r\n    /**\r\n     *  @return {THREE.Vector3} Current position (ie center)\r\n     */\r\n    getPosition() {\r\n        return this.p;\r\n    };\r\n\r\n    // [Abstract]\r\n    computeDistanceAABB(d) {\r\n        return new THREE.Box3(\r\n            this.p.clone().add(new THREE.Vector3(-d,-d,-d)),\r\n            this.p.clone().add(new THREE.Vector3(d,d,d))\r\n        );\r\n    };\r\n    // [Abstract]\r\n    prepareForEval() {\r\n        if(!this.valid_aabb)\r\n        {\r\n            this.valid_aabb = true;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @link SDFPrimitive.getDistanceAreas\r\n     * @param {number} d Distance to consider for the area computation.\r\n     * @returns {Array.<{aabb: THREE.Box3, bv:Area, obj:SDFPrimitive}>}\r\n     */\r\n    getDistanceAreas(d) {\r\n        if(!this.valid_aabb) {\r\n            throw \"ERROR : Cannot get area of invalid primitive\";\r\n        }else{\r\n            return [{\r\n                aabb:this.computeDistanceAABB(d),\r\n                bv: new AreaSphere(\r\n                    this.p,\r\n                    d,\r\n                    this.acc\r\n                ),\r\n                obj: this\r\n            }];\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @link Element.value for a complete description\r\n     *\r\n     *  @param {THREE.Vector3} p\r\n     *  @param {ValueResultType} res\r\n     */\r\n    value = (function(){\r\n        var v = new THREE.Vector3();\r\n\r\n        return function(p,res) {\r\n            if(!this.valid_aabb){\r\n                throw \"Error : PrepareForEval should have been called\";\r\n            }\r\n\r\n            v.subVectors(p,this.p);\r\n            var l = v.length();\r\n            res.v = l;\r\n            if(res.g)\r\n            {\r\n                res.g.copy(v).multiplyScalar(1/l);\r\n            }\r\n        };\r\n    })();\r\n\r\n\r\n};\r\n\r\n\r\nTypes.register(SDFPoint.type, SDFPoint);\r\n\r\n\r\nmodule.exports = SDFPoint;\r\n","\"use strict\";\r\n\r\nconst THREE = require(\"three\");\r\nconst Area = require(\"./Area.js\");\r\nconst Accuracies = require(\"../accuracies/Accuracies.js\");\r\n\r\n/** @typedef {import('./Area.js').AreaSphereParam} AreaSphereParam */\r\n\r\n/**\r\n *  General representation of a \"Capsule\" area, ie, 2 sphere connected by a cone.\r\n *  You can find more on Capsule geometry here https://github.com/maximeq/three-js-capsule-geometry\r\n *\r\n *  @extends {Area}\r\n *\r\n * @constructor\r\n */\r\nclass AreaCapsule extends Area {\r\n\r\n    /**\r\n     *\r\n     *  @param {!THREE.Vector3} p1     First point of the shape\r\n     *  @param {!THREE.Vector3} p2     Second point of the shape\r\n     *  @param {number}  r1 radius at p1\r\n     *  @param {number}  r2 radius at p2\r\n     *  @param {number}  accFactor1 Apply an accuracy factor to the standard one, around p1. Default to 1.\r\n     *  @param {number}  accFactor2 Apply an accuracy factor to the standard one, around p2. Default to 1.\r\n     *\r\n     */\r\n    constructor(p1, p2, r1, r2, accFactor1, accFactor2) {\r\n        super();\r\n        this.p1 = p1.clone();\r\n        this.p2 = p2.clone();\r\n        this.r1 = r1;\r\n        this.r2 = r2;\r\n\r\n        this.accFactor1 = accFactor1 || 1.0;\r\n        this.accFactor2 = accFactor2 || 1.0;\r\n\r\n        this.unit_dir = new THREE.Vector3().subVectors(p2, p1);\r\n        this.length = this.unit_dir.length();\r\n        this.unit_dir.normalize();\r\n\r\n        // tmp var for functions below\r\n        this.vector = new THREE.Vector3();\r\n        this.p1_to_p = this.vector; // basically the same as above + smart name\r\n        this.p1_to_p_sqrnorm = 0;\r\n        this.x_p_2D = 0;\r\n        this.y_p_2D = 0;\r\n        this.y_p_2DSq = 0;\r\n        this.ortho_vec_x = this.r1 - this.r2; // direction orthogonal to the \"line\" getting from one weight to the other. Precomputed\r\n        this.ortho_vec_y = this.length;\r\n        this.p_proj_x = 0;\r\n        this.p_proj_y = 0;\r\n\r\n        this.abs_diff_thick = Math.abs(this.ortho_vec_x);\r\n    }\r\n\r\n    /**\r\n     * Compute some of the tmp variables.Used to factorized other functions code.\r\n     * @param { !THREE.Vector3 } p A point as a THREE.Vector3\r\n     *\r\n     * @protected\r\n     */\r\n    proj_computation(p) {\r\n        this.p1_to_p = this.vector;\r\n        this.p1_to_p.subVectors(p, this.p1);\r\n        this.p1_to_p_sqrnorm = this.p1_to_p.lengthSq();\r\n        this.x_p_2D = this.p1_to_p.dot(this.unit_dir);\r\n        // pythagore inc.\r\n        this.y_p_2DSq = this.p1_to_p_sqrnorm - this.x_p_2D * this.x_p_2D;\r\n        this.y_p_2D = this.y_p_2DSq > 0 ? Math.sqrt(this.y_p_2DSq) : 0; // because of rounded errors tmp can be <0 and this causes the next sqrt to return NaN...\r\n\r\n        var t = -this.y_p_2D / this.ortho_vec_y;\r\n        // P proj is the point at the intersection of:\r\n        //              - the local X axis (computation in the unit_dir basis)\r\n        //                  and\r\n        //              - the line defined by P and the vector orthogonal to the weight line\r\n        this.p_proj_x = this.x_p_2D + t * this.ortho_vec_x;\r\n        this.p_proj_y = 0.0;\r\n    };\r\n\r\n    /**\r\n     * @link Area.sphereIntersect for a complete description\r\n     * @todo Check the Maths (Ask Cedric Zanni?)\r\n     * @param {AreaSphereParam} sphere\r\n     * @return {boolean} true if the sphere and the area intersect\r\n     */\r\n    sphereIntersect(sphere) {\r\n        this.proj_computation(sphere.center);\r\n\r\n        if (this.p_proj_x < 0.0) {\r\n            return (Math.sqrt(this.p1_to_p_sqrnorm) - sphere.radius < this.r1);\r\n        } else {\r\n            if (this.p_proj_x > this.length) {\r\n                this.vector.subVectors(sphere.center, this.p2);\r\n                return (Math.sqrt(this.vector.lengthSq()) - sphere.radius < this.r2);\r\n            } else {\r\n                var sub1 = this.x_p_2D - this.p_proj_x;\r\n                //var sub2 = this.y_p_2D-this.p_proj_y; //this.p_proj_y is set at 0 by definition\r\n                //var dist = Math.sqrt(sub1*sub1 +this.y_p_2DSq);//sub2*sub2);\r\n                var dist = sub1 * sub1 + this.y_p_2DSq;//sub2*sub2);\r\n                var tt = this.p_proj_x / this.length;\r\n                var inter_w = this.r1 * (1.0 - tt) + tt * this.r2;\r\n                var tmp = sphere.radius + inter_w;\r\n                //return (dist-sphere.radius < inter_w);\r\n                return (dist < tmp * tmp);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @link Area.contains for a complete description\r\n     * @param {THREE.Vector3} p\r\n     */\r\n    contains(p) {\r\n        this.proj_computation(p);\r\n        // P proj is the point at the intersection of:\r\n        //              - the X axis\r\n        //                  and\r\n        //              - the line defined by P and the vector orthogonal to the weight line\r\n        if (this.p_proj_x < 0.0) {\r\n            // Proj is before the line segment beginning defined by P0: spherical containment\r\n            return this.p1_to_p_sqrnorm < this.r1 * this.r1;\r\n        } else {\r\n            if (this.p_proj_x > this.length) {\r\n                // Proj is after the line segment beginning defined by P1: spherical containment\r\n                this.vector.subVectors(p, this.p2);\r\n                return this.vector.lengthSq() < this.r2 * this.r2;\r\n            } else {\r\n                // Proj is in between the line segment P1-P0: Linear kind of containment\r\n                var sub1 = this.x_p_2D - this.p_proj_x;\r\n                var sub2 = this.y_p_2D - this.p_proj_y;\r\n                var dist2 = sub1 * sub1 + sub2 * sub2;\r\n                var tt = this.p_proj_x / this.length;\r\n                var inter_w = this.r1 * (1.0 - tt) + tt * this.r2;\r\n                return dist2 < inter_w * inter_w;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @link Area.getAcc for a complete description\r\n     *\r\n     *  @return {number} the accuracy needed in the intersection zone\r\n     *\r\n     *  @param {AreaSphereParam} sphere  A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @param {number}  factor  the ratio to determine the wanted accuracy.\r\n     *\r\n     *  @todo Check the Maths\r\n     */\r\n    getAcc(sphere, factor) {\r\n        this.proj_computation(sphere.center);\r\n\r\n        // Thales between two triangles that have the same angles gives us the dist of:\r\n        // side A = sphere.radius*this.abs_diff_thick/this.length;\r\n        // Then pythagore this shit up as A² + sphere.radius² = delta²\r\n        // i.e delta² = (sphere.radius*this.abs_diff_thick/this.length)² + sphere.radius²\r\n        // <=> delta = sphere.radius*Math.sqrt(1+(this.abs_diff_thick/this.length)²);\r\n\r\n        var tmp = this.abs_diff_thick / this.length;\r\n        var half_delta = sphere.radius * Math.sqrt(1 + tmp * tmp) * 0.5;\r\n\r\n        // we check only the direction where the weight is minimum since\r\n        // we will return minimum accuracy needed in the area.\r\n        var absc = this.p_proj_x;\r\n        absc += this.r1 > this.r2 ? half_delta : -half_delta;\r\n\r\n        if (absc < 0.0) {\r\n            return this.r1 * this.accFactor1 * factor;\r\n        } else if (absc > this.length) {\r\n            return this.r2 * this.accFactor2 * factor;\r\n        } else {\r\n\r\n            var tt = absc / this.length;\r\n            var inter_w = this.r1 * this.accFactor1 * (1.0 - tt) + tt * this.r2 * this.accFactor2;\r\n            return inter_w * factor;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @link Area.getNiceAcc for a complete description\r\n     *  @param {AreaSphereParam}  sphere A sphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @return {number} The Nice accuracy needed in the intersection zone\r\n     */\r\n    getNiceAcc(sphere) {\r\n        return this.getAcc(sphere, Accuracies.nice);\r\n    }\r\n\r\n    /**\r\n     *  @link Area.getNiceAcc for a complete description\r\n     *  @param {AreaSphereParam}  sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @return {number} The Curr accuracy needed in the intersection zone\r\n     */\r\n    getCurrAcc(sphere) {\r\n        return this.getAcc(sphere, Accuracies.curr);\r\n    }\r\n\r\n    /**\r\n     *  @link Area.getRawAcc for a complete description\r\n     *  @param {AreaSphereParam}  sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\r\n     *  @return {number} The raw accuracy needed in the intersection zone\r\n     */\r\n    getRawAcc(sphere) {\r\n        return this.getAcc(sphere, Accuracies.raw);\r\n    }\r\n\r\n    /**\r\n     * @link Area.getMinAcc\r\n     * @return {number}\r\n     */\r\n    getMinAcc() {\r\n        return Accuracies.curr * Math.min(this.r1 * this.accFactor1, this.r2 * this.accFactor2);\r\n    }\r\n\r\n    /**\r\n     * @link Area.getMinRawAcc\r\n     * @return {number}\r\n     */\r\n    getMinRawAcc() {\r\n        return Accuracies.raw * Math.min(this.r1 * this.accFactor1, this.r2 * this.accFactor2);\r\n    }\r\n\r\n    /**\r\n     *  Return the minimum accuracy required at some point on the given axis, according to Accuracies.curr\r\n     *  The returned accuracy is the one you would need when stepping in the axis\r\n     *  direction when you are on the axis at coordinate t.\r\n     *  @param {string} axis x, y or z\r\n     *  @param {number} t Coordinate on the axis\r\n     *  @return {number} The step you can safely do in axis direction\r\n     */\r\n    getAxisProjectionMinStep(axis, t) {\r\n        var step = Number.MAX_VALUE;\r\n        var p1 = this.p1[axis] < this.p2[axis] ? this.p1 : this.p2;\r\n        var p2, r1, r2;\r\n        if (p1 === this.p1) {\r\n            p2 = this.p2;\r\n            r1 = this.r1 * this.accFactor1;\r\n            r2 = this.r2 * this.accFactor2;\r\n        } else {\r\n            p2 = this.p1;\r\n            r1 = this.r2;\r\n            r2 = this.r1 * this.accFactor1;\r\n        }\r\n\r\n        var diff = t - p1[axis];\r\n        if (diff < -2 * r1) {\r\n            step = Math.min(step, Math.max(Math.abs(diff + 2 * r1), Accuracies.curr * r1));\r\n        } else if (diff < 2 * r1) {\r\n            step = Math.min(step, Accuracies.curr * r1);\r\n        }// else the sphere is behind us\r\n        diff = t - p2[axis];\r\n        if (diff < -2 * r2) {\r\n            step = Math.min(step, Math.max(Math.abs(diff + 2 * r2), Accuracies.curr * r2));\r\n        } else if (diff < 2 * r2) {\r\n            step = Math.min(step, Accuracies.curr * r2);\r\n        }// else the sphere is behind us\r\n\r\n        var tbis = t - p1[axis];\r\n        var axis_l = p2[axis] - p1[axis];\r\n        if (tbis > 0 && tbis < axis_l && axis_l !== 0) {\r\n            // t is in p1p2\r\n            step = Math.min(step, Accuracies.curr * (r1 + (tbis / axis_l) * (r2 - r1)));\r\n        }\r\n\r\n        return step;\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = AreaCapsule;\r\n\r\n\r\n","\"use strict\";\r\n\r\nconst THREE = require(\"three\");\r\nconst Types = require(\"../Types.js\");\r\nconst SDFPrimitive = require(\"./SDFPrimitive.js\");\r\nconst AreaCapsule = require(\"../areas/AreaCapsule.js\");\r\n\r\n/** @typedef {import('../Element.js').Json} Json */\r\n/** @typedef {import('../Element.js').ValueResultType} ValueResultType */\r\n/** @typedef {import('./SDFPrimitive').SDFPrimitiveJSON} SDFPrimitiveJSON */\r\n\r\n/**\r\n * @typedef {{p1:{x:number,y:number,z:number},p2:{x:number,y:number,z:number}, acc:number} & SDFPrimitiveJSON} SDFSegmentJSON\r\n */\r\n\r\n/**\r\n *\r\n *  @constructor\r\n *  @extends SDFPrimitive\r\n *\r\n *  @param {THREE.Vector3} p1 Position of the first segment extremity\r\n *  @param {THREE.Vector3} p2 Position of the second segment extremity\r\n *  @param {number} acc Accuracy factor for this primitive. Default is 1.0 which will lead to the side of the support.\r\n */\r\nclass SDFSegment extends SDFPrimitive  {\r\n\r\n    static type = \"SDFSegment\";\r\n\r\n    /**\r\n     * @param {SDFSegmentJSON} json\r\n     * @returns SDFSegment\r\n     */\r\n    static fromJSON(json) {\r\n        return new SDFSegment(\r\n            new THREE.Vector3(json.p1.x, json.p1.y, json.p1.z),\r\n            new THREE.Vector3(json.p2.x, json.p2.y, json.p2.z),\r\n            json.acc\r\n        );\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {THREE.Vector3} p1\r\n     * @param {THREE.Vector3} p2\r\n     * @param {number} acc\r\n     */\r\n    constructor(p1, p2, acc)\r\n    {\r\n        super();\r\n\r\n        this.p1 = p1.clone();\r\n        this.p2 = p2.clone();\r\n        this.acc = acc || 1.0;\r\n\r\n        // Helper for evaluation\r\n        /** @type {THREE.Line3} */\r\n        this.l = new THREE.Line3(this.p1, this.p2);\r\n    }\r\n\r\n    getType(){\r\n        return SDFSegment.type;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @returns {SDFSegmentJSON}\r\n     */\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            p1: {\r\n                x: this.p1.x,\r\n                y: this.p1.y,\r\n                z: this.p1.z\r\n            },\r\n            p2: {\r\n                x: this.p2.x,\r\n                y: this.p2.y,\r\n                z: this.p2.z\r\n            },\r\n            acc: this.acc\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @param {number} acc The new accuracy factor\r\n     */\r\n    setAccuracy(acc) {\r\n        this.acc = acc;\r\n        this.invalidAABB();\r\n    };\r\n\r\n    /**\r\n     *  @return {number} Current accuracy factor\r\n     */\r\n    getAccuracy() {\r\n        return this.acc;\r\n    };\r\n\r\n    /**\r\n     *  @param {THREE.Vector3} p1 The new position of the first segment point.\r\n     */\r\n    setPosition1(p1) {\r\n        this.p1.copy(p1);\r\n        this.invalidAABB();\r\n    };\r\n    /**\r\n     *  @param {THREE.Vector3} p2 The new position of the second segment point\r\n     */\r\n    setPosition2(p2) {\r\n        this.p2.copy(p2);\r\n        this.invalidAABB();\r\n    };\r\n\r\n    /**\r\n     *  @return {THREE.Vector3} Current position of the first segment point\r\n     */\r\n    getPosition1() {\r\n        return this.p1;\r\n    };\r\n    /**\r\n     *  @return {THREE.Vector3} Current position of the second segment point\r\n     */\r\n    getPosition2() {\r\n        return this.p2;\r\n    };\r\n\r\n    // [Abstract]\r\n    computeDistanceAABB(d) {\r\n        var b1 = new THREE.Box3(\r\n            this.p1.clone().add(new THREE.Vector3(-d,-d,-d)),\r\n            this.p1.clone().add(new THREE.Vector3(d,d,d))\r\n        );\r\n        var b2 = new THREE.Box3(\r\n            this.p2.clone().add(new THREE.Vector3(-d,-d,-d)),\r\n            this.p2.clone().add(new THREE.Vector3(d,d,d))\r\n        );\r\n        return b1.union(b2);\r\n    };\r\n    // [Abstract]\r\n    prepareForEval() {\r\n        if(!this.valid_aabb)\r\n        {\r\n            this.l.set(this.p1,this.p2);\r\n            this.valid_aabb = true;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {number} d\r\n     * @return {Object} The Areas object corresponding to the node/primitive, in an array\r\n     */\r\n    getDistanceAreas(d) {\r\n        if(!this.valid_aabb) {\r\n            throw \"ERROR : Cannot get area of invalid primitive\";\r\n        }else{\r\n            return [{\r\n                aabb:this.computeDistanceAABB(d),\r\n                bv: new AreaCapsule(\r\n                    this.p1,\r\n                    this.p2,\r\n                    d,\r\n                    d,\r\n                    this.acc,\r\n                    this.acc\r\n                ),\r\n                obj: this\r\n            }];\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @link Element.value for a complete description\r\n     *\r\n     *  @param {THREE.Vector3} p\r\n     *  @param {ValueResultType} res\r\n     */\r\n    value = (function(){\r\n        var v = new THREE.Vector3();\r\n        var lc = new THREE.Vector3();\r\n        /**\r\n         *  @param {THREE.Vector3} p\r\n         *  @param {ValueResultType} res\r\n         */\r\n        return function(p,res) {\r\n            this.l.closestPointToPoint(p,true,v);\r\n            res.v = lc.subVectors(p,v).length();\r\n            if(res.g){\r\n                res.g.copy(lc).divideScalar(res.v);\r\n            }\r\n        };\r\n    })();\r\n\r\n};\r\n\r\n\r\nTypes.register(SDFSegment.type, SDFSegment);\r\n\r\n\r\nmodule.exports = SDFSegment;\r\n","\"use strict\";\r\n\r\nconst THREE = require(\"three\");\r\nconst Types = require(\"../Types.js\");\r\nconst SDFPrimitive = require(\"./SDFPrimitive.js\");\r\nconst AreaSphere = require(\"../areas/AreaSphere.js\");\r\n\r\n/** @typedef {import('../Element.js').Json} Json */\r\n/** @typedef {import('../Element.js').ValueResultType} ValueResultType */\r\n/** @typedef {import('./SDFPrimitive').SDFPrimitiveJSON} SDFPrimitiveJSON */\r\n\r\n/**\r\n * @typedef {{p:{x:number,y:number,z:number}, r:number} & SDFPrimitiveJSON} SDFSphereJSON\r\n */\r\n\r\n/**\r\n *  @constructor\r\n *  @extends SDFPrimitive\r\n *\r\n *  @param {THREE.Vector3} p Position (ie center) of the sphere\r\n *  @param {number} r Radius of the sphere\r\n */\r\nclass SDFSphere extends SDFPrimitive {\r\n\r\n    static type = \"SDFSphere\";\r\n\r\n    /**\r\n     * @param {SDFSphereJSON} json\r\n     * @returns\r\n     */\r\n    static fromJSON(json) {\r\n        return new SDFSphere(new THREE.Vector3(json.p.x, json.p.y, json.p.z), json.r);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {THREE.Vector3} p\r\n     * @param {number} r The radius of the sphere\r\n     */\r\n    constructor(p, r)\r\n    {\r\n        super();\r\n\r\n        this.p = p.clone();\r\n        this.r = r;\r\n    }\r\n\r\n    getType(){\r\n        return SDFSphere.type;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @returns {SDFSphereJSON}\r\n     */\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            p: {\r\n                x: this.p.x,\r\n                y: this.p.y,\r\n                z: this.p.z\r\n            },\r\n            r: this.r\r\n        };\r\n    };\r\n\r\n    /**\r\n     *  @param {number} r The new radius\r\n     */\r\n    setRadius(r) {\r\n        this.r = r;\r\n        this.invalidAABB();\r\n    };\r\n\r\n    /**\r\n     *  @return {number} Current radius\r\n     */\r\n    getRadius() {\r\n        return this.r;\r\n    };\r\n\r\n    /**\r\n     *  @param {THREE.Vector3} p The new position (ie center)\r\n     */\r\n    setPosition(p) {\r\n        this.p.copy(p);\r\n        this.invalidAABB();\r\n    };\r\n\r\n    /**\r\n     *  @return {THREE.Vector3} Current position (ie center)\r\n     */\r\n    getPosition() {\r\n        return this.p;\r\n    };\r\n\r\n    // [Abstract]\r\n    computeDistanceAABB(d) {\r\n        return new THREE.Box3(\r\n            this.p.clone().add(new THREE.Vector3(-this.r-d,-this.r-d,-this.r-d)),\r\n            this.p.clone().add(new THREE.Vector3(this.r+d,this.r+d,this.r+d))\r\n        );\r\n    };\r\n\r\n    // [Abstract]\r\n    prepareForEval() {\r\n        if(!this.valid_aabb)\r\n        {\r\n            this.valid_aabb = true;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {number} d\r\n     * @return {Object} The Areas object corresponding to the node/primitive, in an array\r\n     */\r\n    getDistanceAreas(d) {\r\n        if(!this.valid_aabb) {\r\n            throw \"ERROR : Cannot get area of invalid primitive\";\r\n        }else{\r\n            return [{\r\n                aabb:this.computeDistanceAABB(d),\r\n                bv: new AreaSphere(\r\n                    this.p,\r\n                    this.r+d,\r\n                    this.r/(this.r+d) // Adjust accuray factor according to the radius and not only to the required d\r\n                ),\r\n                obj: this\r\n            }];\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @link Element.value for a complete description\r\n     *\r\n     *  @param {THREE.Vector3} p\r\n     *  @param {ValueResultType} res\r\n     */\r\n    value = (function(){\r\n        var v = new THREE.Vector3();\r\n        /**\r\n         *  @param {THREE.Vector3} p\r\n         *  @param {ValueResultType} res\r\n         */\r\n        return function (p, res) {\r\n            /** @type {SDFSphere} */\r\n            let self = this;\r\n\r\n            if (!self.valid_aabb){\r\n                throw \"Error : PrepareForEval should have been called\";\r\n            }\r\n\r\n            v.subVectors(p, self.p);\r\n            var l = v.length();\r\n            res.v = l - self.r;\r\n            if(res.g)\r\n            {\r\n                res.g.copy(v).multiplyScalar(1/l);\r\n            }\r\n        };\r\n    })();\r\n};\r\n\r\nTypes.register(SDFSphere.type, SDFSphere);\r\n\r\n\r\nmodule.exports = SDFSphere;\r\n","\"use strict\";\r\n\r\nconst THREE = require(\"three\");\r\nconst Types = require(\"../Types.js\");\r\nconst SDFPrimitive = require(\"./SDFPrimitive.js\");\r\nconst AreaCapsule = require(\"../areas/AreaCapsule.js\");\r\n\r\n/** @typedef {import('../Element.js').Json} Json */\r\n/** @typedef {import('../Element.js').ValueResultType} ValueResultType */\r\n/** @typedef {import('./SDFPrimitive').SDFPrimitiveJSON} SDFPrimitiveJSON */\r\n\r\n/**\r\n * @typedef {{p1:{x:number,y:number,z:number},r1:number,p2:{x:number,y:number,z:number},r2:number} & SDFPrimitiveJSON} SDFCapsuleJSON\r\n */\r\n\r\n/**\r\n *  This primitive implements a distance field to an extanded \"capsule geometry\", which is actually a weighted segment.\r\n *  You can find more on Capsule geometry here https://github.com/maximeq/three-js-capsule-geometry\r\n *\r\n *  @constructor\r\n *  @extends SDFPrimitive\r\n *\r\n */\r\nclass SDFCapsule extends SDFPrimitive {\r\n\r\n    static type = \"SDFCapsule\";\r\n\r\n    /**\r\n     * @param {SDFCapsuleJSON} json\r\n     * @returns {SDFCapsule}\r\n     */\r\n    static fromJSON(json) {\r\n        //var v = ScalisVertex.fromJSON(json.v[0]);\r\n        return new SDFCapsule(\r\n            new THREE.Vector3(json.p1.x, json.p1.y, json.p1.z),\r\n            new THREE.Vector3(json.p2.x, json.p2.y, json.p2.z),\r\n            json.r1,\r\n            json.r2\r\n        );\r\n    }\r\n\r\n    /**\r\n     *\r\n     *  @param {THREE.Vector3} p1 Position of the first segment extremity\r\n     *  @param {THREE.Vector3} p2 Position of the second segment extremity\r\n     *  @param {number} r1 Radius of the sphere centered in p1\r\n     *  @param {number} r2 Radius of the sphere centered in p2\r\n     */\r\n    constructor(p1, p2, r1, r2) {\r\n        super();\r\n\r\n        this.p1 = p1.clone();\r\n        this.p2 = p2.clone();\r\n        this.r1 = r1;\r\n        this.r2 = r2;\r\n\r\n        // Helper for evaluation\r\n        this.rdiff = this.r2 - this.r1;\r\n        this.unit_dir = new THREE.Vector3().subVectors(this.p2, this.p1);\r\n        this.lengthSq = this.unit_dir.lengthSq();\r\n        this.length = this.unit_dir.length();\r\n        this.unit_dir.normalize();\r\n    }\r\n\r\n    /**\r\n     *  @return {string} Type of the element\r\n     */\r\n    getType() {\r\n        return SDFCapsule.type;\r\n    }\r\n\r\n    /**\r\n     * @returns {SDFCapsuleJSON}\r\n     */\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            p1: {\r\n                x: this.p1.x,\r\n                y: this.p1.y,\r\n                z: this.p1.z\r\n            },\r\n            r1: this.r1,\r\n            p2: {\r\n                x: this.p2.x,\r\n                y: this.p2.y,\r\n                z: this.p2.z\r\n            },\r\n            r2: this.r2\r\n        };\r\n    }\r\n\r\n    /**\r\n     *  @param {number} r1 The new radius at p1\r\n     */\r\n    setRadius1(r1) {\r\n        this.r1 = r1;\r\n        this.invalidAABB();\r\n    }\r\n\r\n    /**\r\n     *  @param {number} r2 The new radius at p2\r\n     */\r\n    setRadius2(r2) {\r\n        this.r2 = r2;\r\n        this.invalidAABB();\r\n    };\r\n\r\n    /**\r\n     *  @return {number} Current radius at p1\r\n     */\r\n    getRadius1() {\r\n        return this.r1;\r\n    };\r\n\r\n    /**\r\n     *  @return {number} Current radius at p2\r\n     */\r\n    getRadius2() {\r\n        return this.r2;\r\n    };\r\n\r\n    /**\r\n     *  @param {THREE.Vector3} p1 The new position of the first segment point.\r\n     */\r\n    setPosition1(p1) {\r\n        this.p1.copy(p1);\r\n        this.invalidAABB();\r\n    };\r\n\r\n    /**\r\n     *  @param {THREE.Vector3} p2 The new position of the second segment point\r\n     */\r\n    setPosition2(p2) {\r\n        this.p2.copy(p2);\r\n        this.invalidAABB();\r\n    };\r\n\r\n    /**\r\n     *  @return {THREE.Vector3} Current position of the first segment point\r\n     */\r\n    getPosition1() {\r\n        return this.p1;\r\n    };\r\n\r\n    /**\r\n     *  @return {THREE.Vector3} Current position of the second segment point\r\n     */\r\n    getPosition2() {\r\n        return this.p2;\r\n    };\r\n\r\n    computeDistanceAABB(d) {\r\n        var b1 = new THREE.Box3(\r\n            this.p1.clone().add(new THREE.Vector3(-this.r1 - d, -this.r1 - d, -this.r1 - d)),\r\n            this.p1.clone().add(new THREE.Vector3(this.r1 + d, this.r1 + d, this.r1 + d))\r\n        );\r\n        var b2 = new THREE.Box3(\r\n            this.p2.clone().add(new THREE.Vector3(-this.r2 - d, -this.r2 - d, -this.r2 - d)),\r\n            this.p2.clone().add(new THREE.Vector3(this.r2 + d, this.r2 + d, this.r2 + d))\r\n        );\r\n        return b1.union(b2);\r\n    };\r\n\r\n    /**\r\n     * @link Element.prepareForEval for a complete description\r\n     */\r\n    prepareForEval() {\r\n        if (!this.valid_aabb) {\r\n            this.valid_aabb = true;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {number} d\r\n     * @return {Object} The Areas object corresponding to the node/primitive, in an array\r\n     */\r\n    getDistanceAreas(d) {\r\n        if (!this.valid_aabb) {\r\n            throw \"ERROR : Cannot get area of invalid primitive\";\r\n        } else {\r\n            return [{\r\n                aabb: this.computeDistanceAABB(d),\r\n                bv: new AreaCapsule(\r\n                    this.p1,\r\n                    this.p2,\r\n                    this.r1 + d,\r\n                    this.r2 + d,\r\n                    this.r1 / (this.r1 + d), // Adjust accuray factor according to the radius and not only to the required d\r\n                    this.r2 / (this.r2 + d)\r\n                ),\r\n                obj: this\r\n            }];\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @link Element.value for a complete description\r\n     *\r\n     *  @param {THREE.Vector3} p\r\n     *  @param {ValueResultType} res\r\n     */\r\n    value = (function () {\r\n        var v = new THREE.Vector3();\r\n        var proj = new THREE.Vector3();\r\n        /**\r\n         *  @param {THREE.Vector3} p\r\n         *  @param {ValueResultType} res\r\n         */\r\n        return function (p, res) {\r\n            /** @type {SDFCapsule} */\r\n            let self = this;\r\n            v.subVectors(p, self.p1);\r\n            var p1p_sqrl = v.lengthSq();\r\n\r\n            // In unit_dir basis, vector (this.r1-this.r2, this.length) is normal to the \"weight line\"\r\n            // We need a projection in this direction up to the segment line to know in which case we fall.\r\n\r\n            var x_p_2D = v.dot(self.unit_dir);\r\n            // pythagore inc.\r\n            var y_p_2D = Math.sqrt(\r\n                Math.max( // Necessary because of rounded errors, pyth result can be <0 and this causes sqrt to return NaN...\r\n                    0.0, p1p_sqrl - x_p_2D * x_p_2D // =  y_p_2D² by pythagore\r\n                )\r\n            );\r\n            var t = -y_p_2D / self.length;\r\n\r\n            var proj_x = x_p_2D + t * (self.r1 - self.r2);\r\n            // var proj_y = 0.0; // by construction\r\n\r\n            // Easy way to compute the distance now that we ave the projection on the segment\r\n            var a = THREE.MathUtils.clamp(proj_x / self.length, 0, 1.0);\r\n            proj.copy(self.p1).lerp(self.p2, a); // compute the actual 3D projection\r\n            var l = v.subVectors(p, proj).length();\r\n            res.v = l - (a * self.r2 + (1.0 - a) * self.r1);\r\n            if (res.g) {\r\n                res.g.copy(v).divideScalar(l);\r\n            }\r\n        };\r\n    })();\r\n};\r\n\r\nTypes.register(SDFCapsule.type, SDFCapsule);\r\n\r\n\r\n\r\nmodule.exports = SDFCapsule;\r\n","'use strict';\r\n\r\n/**\r\n * @typedef {0|1|2|3|4|5|6|7} EdgeIndex\r\n * @typedef {[EdgeIndex, EdgeIndex]} EdgeIndexPair\r\n * @typedef {0|1} TopoValue\r\n * @typedef {[TopoValue, TopoValue, TopoValue]} TopoTriple\r\n */\r\n\r\n/**\r\n * Tables for Marching Cube\r\n */\r\nvar Tables = {\r\n    //\r\n    /**\r\n     * edgevmap[i][0] = first vertex index of the ith edge of a cube\r\n     * edgevmap[i][0] = second vertex index of the ith edge of a cube\r\n     * @type {[\r\n    *   EdgeIndexPair, EdgeIndexPair, EdgeIndexPair, EdgeIndexPair,\r\n    *   EdgeIndexPair, EdgeIndexPair, EdgeIndexPair, EdgeIndexPair,\r\n    *   EdgeIndexPair, EdgeIndexPair, EdgeIndexPair, EdgeIndexPair\r\n     * ]}\r\n     */\r\n    EdgeVMap: [\r\n        [0, 4],\r\n        [1, 5],\r\n        [2, 6],\r\n        [3, 7],\r\n\r\n        [0, 2],\r\n        [1, 3],\r\n        [4, 6],\r\n        [5, 7],\r\n\r\n        [0, 1],\r\n        [2, 3],\r\n        [4, 5],\r\n        [6, 7],\r\n    ],\r\n\r\n    /**\r\n     * @type {[TopoTriple,TopoTriple,TopoTriple,TopoTriple,TopoTriple,TopoTriple,TopoTriple,TopoTriple]}\r\n     */\r\n    VertexTopo: [\r\n        [0, 0, 0], //0 (MC = 0)\r\n        [0, 0, 1], //1 (MC = 4)\r\n        [0, 1, 0], //2 (MC = 3)\r\n        [0, 1, 1], //3 (MC = 7)\r\n        [1, 0, 0], //4 (MC = 1)\r\n        [1, 0, 1], //5 (MC = 5)\r\n        [1, 1, 0], //6 (MC = 2)\r\n        [1, 1, 1]  //7 (MC = 6)\r\n    ]\r\n};\r\n\r\nmodule.exports = Tables;","\"use strict\";\r\n\r\nconst { Box2 } = require(\"three\");\r\nconst THREE = require(\"three\");\r\nconst Material = require(\"../blobtree/Material.js\");\r\nconst Convergence = require(\"../utils/Convergence.js\");\r\n\r\nconst Tables = require(\"./MCTables.js\");\r\n\r\n/**\r\n * @typedef {import('../blobtree/RootNode')} RootNode\r\n */\r\n\r\n/**\r\n * @typedef {Object} ConvergenceParams\r\n * @property {number=} ratio A ratio of a the marching cube grid size defining the wanted geometrical accuracy.\r\n *                           Must be lower than 1, default is 0.01 The maximum number of newton steps, default is 10.\r\n * @property {number=} step The newton process will stop either when the threshold of ratio*cube_size is matched, or the number of steps allowed has been reached.\r\n */\r\n\r\n/**\r\n * @typedef {Object} VertexData\r\n * @property {Object} p\r\n * @property {number} p.x\r\n * @property {number} p.y\r\n * @property {number} p.z\r\n * @property {Object} n\r\n * @property {number} n.x\r\n * @property {number} n.y\r\n * @property {number} n.z\r\n * @property {Object} c\r\n * @property {number} c.r\r\n * @property {number} c.g\r\n * @property {number} c.b\r\n * @property {number} r\r\n * @property {number} m\r\n */\r\n\r\n/**\r\n * @typedef {Object} ResultingGeometry\r\n * @property {Array<number>} position,\r\n * @property {Array<number>} normal\r\n * @property {Array<number>} color\r\n * @property {Array<number>} metalness\r\n * @property {Array<number>} roughness\r\n * @property {number} nVertices\r\n * @property {Array<number>} faces\r\n * @property {number} nFaces\r\n * @property {(data:VertexData) => void} addVertex\r\n * @property {(a:number, b:number, c:number) => void} addFace\r\n */\r\n\r\n/**\r\n *  Axis Aligned Bounding Box in 2D carrying accuracy data\r\n *  @constructor\r\n *  @extends THREE.Box2\r\n */\r\n\r\n\r\nclass Box2Acc extends Box2 {\r\n\r\n    /**\r\n     *  @param {THREE.Vector2=} min Minimum x,y coordinate of the box\r\n     *  @param {THREE.Vector2=} max Maximum x,y coordinate of the box\r\n     *  @param {number=} nice_acc Nice accuracy in this box\r\n     *  @param {number=} raw_acc Raw accuracy in this box\r\n     */\r\n    constructor(min, max, nice_acc, raw_acc) {\r\n        super(min, max);\r\n\r\n        var s = Math.max(this.max.x - this.min.x, this.max.y - this.min.y);\r\n\r\n        /** @type {number} */\r\n        this.nice_acc = 10000000;\r\n\r\n        // Can nice_acc be 0 ? if yes we can simplify the next line\r\n        if (nice_acc === undefined || nice_acc === null && s > 0) {\r\n            this.nice_acc = s;\r\n        } else {\r\n            this.nice_acc = nice_acc;\r\n        }\r\n        this.raw_acc = this.raw_acc ? this.nice_acc : raw_acc;\r\n    }\r\n    /**\r\n     *\r\n     * @param {Box2Acc} box\r\n     */\r\n    unionWithAcc(box) {\r\n        super.union(box);\r\n        // Union of 2 boxes get the min acc for both\r\n        this.raw_acc = Math.min(box.raw_acc, this.raw_acc);\r\n        this.nice_acc = Math.min(box.nice_acc, this.nice_acc);\r\n    }\r\n\r\n    getRawAcc () {\r\n        return this.raw_acc;\r\n    };\r\n\r\n    getNiceAcc () {\r\n        return this.nice_acc;\r\n    };\r\n\r\n    setRawAcc (raw_acc) {\r\n        this.raw_acc = Math.max(0, raw_acc);\r\n    };\r\n\r\n    setNiceAcc (nice_acc) {\r\n        this.nice_acc = Math.max(0, nice_acc);\r\n    };\r\n\r\n    toString () {\r\n        return (\r\n            \"(\" +\r\n            this.min.x.toFixed(2) +\r\n            \", \" +\r\n            this.min.y.toFixed(2) +\r\n            \") -> (\" +\r\n            this.max.x.toFixed(2) +\r\n            \", \" +\r\n            this.max.y.toFixed(2) +\r\n            \") \"\r\n        );\r\n    };\r\n\r\n    /**\r\n     *  @param {number} min_x\r\n     *  @param {number} min_y\r\n     *  @param {number} max_x\r\n     *  @param {number} max_y\r\n     *  @param {number=} nice_acc\r\n     *  @param {number=} raw_acc\r\n     */\r\n    setWithAcc(min_x, min_y, max_x, max_y, nice_acc, raw_acc) {\r\n        this.min.set(min_x, min_y);\r\n        this.max.set(max_x, max_y);\r\n        if (nice_acc !== undefined) {\r\n            this.nice_acc = nice_acc;\r\n        }\r\n        if (raw_acc !== undefined) {\r\n            this.raw_acc = raw_acc;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  Get corner with the minimum coordinates\r\n     *  @return {THREE.Vector2}\r\n     */\r\n    getMinCorner () {\r\n        return this.min;\r\n    };\r\n}\r\n\r\n/**\r\n*  @typedef {Object} SMCParams Parameters and option for this polygonizer.\r\n*  @property {string=} zResolution Defines how the stepping in z occurs. Options are :\r\n*                                  \"adaptive\" (default) steps are computed according to local minimum accuracy.\r\n*                                  \"uniform\" steps are uniform along z, according to the global minimum accuracy.\r\n*  @property {number=} detailRatio The blobtree defines some needed accuracies for polygonizing.\r\n*                                  However, if you want more details, you can set this to less than 1.\r\n*                                  Note that this is limited to 0.01, which will already increase your model complexity by a 10 000 factor.\r\n*  @property {(percent:number) => void=} progress Progress callback, taling a percentage as parameter.\r\n*  @property {ConvergenceParams=} convergence Add newton convergence steps to position each vertex.\r\n*  @property {number=} dichotomy NOT YET IMPLEMENTED Add dichotomy steps to position each vertex. Usually using convergence is better, except if the implicit\r\n*                                field is such that congerging is not possible (for example, null gradients on large areas)\r\n*/\r\n\r\n/**\r\n *  Class for a dual marching cube using 2 sliding arrays.\r\n\r\n *  @constructor\r\n */\r\n\r\nclass SlidingMarchingCubes {\r\n    /**\r\n     *  @param {RootNode} blobtree A blobtree to polygonize.\r\n     *  @param {SMCParams} smcParams Parameters and option for this polygonizer\r\n     */\r\n    constructor(blobtree, smcParams) {\r\n        if (!smcParams) {\r\n            throw new Error(\"smcParams must be provided for SlidingMarchingCubes, to use all default values, please use {}\");\r\n        }\r\n\r\n        /**\r\n         * @type {RootNode}\r\n         */\r\n        this.blobtree = blobtree;\r\n\r\n        /** @type {boolean} */\r\n        this.uniformZ = smcParams.zResolution === \"uniform\" ? true : false;\r\n\r\n        this.detail_ratio = smcParams.detailRatio\r\n            ? Math.max(0.01, smcParams.detailRatio)\r\n            : 1.0;\r\n\r\n        if (smcParams.convergence) {\r\n            this.convergence = smcParams.convergence;\r\n            this.convergence.ratio = this.convergence.ratio || 0.01;\r\n            this.convergence.step = this.convergence.step || 10;\r\n        } else {\r\n            this.convergence = null;\r\n        }\r\n\r\n        /** @type {(percent:number) => void} */\r\n        this.progress = smcParams.progress\r\n            ? smcParams.progress\r\n            : function (_percent) {\r\n                //console.log(percent);\r\n            };\r\n\r\n        /** @type {Int32Array} */\r\n        this.reso = new Int32Array(3);\r\n        /**\r\n         * @type {{x:Float32Array, y:Float32Array, z:Float32Array}}\r\n         */\r\n        this.steps = {\r\n            x: null,\r\n            y: null,\r\n            z: null\r\n        };\r\n        /** @type {!{x:number,y:number,z:number}} */\r\n        this.curr_steps = {\r\n            x: 0,\r\n            y: 0,\r\n            z: 0\r\n        };\r\n        // = this.curr_steps.x*this.curr_steps.y*this.curr_steps.z\r\n        /** @type {number} */\r\n        this.curr_step_vol = 0;\r\n\r\n        /**\r\n         *  Sliding values array\r\n         *  @type {[Float32Array, Float32Array]}\r\n         */\r\n        this.values_xy = [null, null];\r\n        /**\r\n         *  Sliding values array\r\n         *  @type {!Array.<Int32Array>}\r\n         */\r\n        this.vertices_xy = [null, null];\r\n        this.areas = [];\r\n        this.min_acc = 1;\r\n\r\n        // Processing vars\r\n        /** @type {Array<number>} */\r\n        this.values = new Array(8);\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.z = 0;\r\n        this.mask = 0;\r\n        /** @type {Array<boolean>} */\r\n        this.edge_cross = [\r\n            false, // Tables.EdgeVMap[0], x=1\r\n            false,\r\n            false,\r\n            false,\r\n            false, // edge 2 : Tables.EdgeVMap[4], y=1\r\n            false,\r\n            false,\r\n            false,\r\n            false, // edge 3 : Tables.EdgeVMap[8], z=1\r\n            false,\r\n            false,\r\n            false\r\n        ];\r\n\r\n        /** @type {THREE.Vector3} */\r\n        this.vertex = new THREE.Vector3(0, 0, 0); // vertex associated to the cell if any\r\n        /** @type {THREE.Vector3} */\r\n        this.vertex_n = new THREE.Vector3(0, 0, 0); // vertex normal\r\n        /** @type {Material} */\r\n        this.vertex_m = new Material(); // vertex material\r\n\r\n        // Vars and tmp vars for extension checks\r\n        /** @type {boolean} */\r\n        this.extended = false;\r\n        /** @type {THREE.Box3} */\r\n        this.dis_o_aabb = new THREE.Box3();\r\n        /** @type {THREE.Vector3} */\r\n        this.ext_p = new THREE.Vector3();\r\n\r\n        /**\r\n         * Resulting mesh data\r\n         * @type {ResultingGeometry}\r\n         */\r\n        this.geometry = null;\r\n    }\r\n\r\n    /**\r\n     *  Initialize the internal Geometry structure.\r\n     *  @private\r\n     */\r\n    initGeometry () {\r\n        this.geometry = {\r\n            position: [],\r\n            normal: [],\r\n            color: [],\r\n            metalness: [],\r\n            roughness: [],\r\n            nVertices: 0,\r\n            faces: [],\r\n            nFaces: 0,\r\n            addVertex: function (data) {\r\n                this.position.push(data.p.x, data.p.y, data.p.z);\r\n                this.normal.push(data.n.x, data.n.y, data.n.z);\r\n                this.color.push(data.c.r, data.c.g, data.c.b);\r\n                this.roughness.push(data.r);\r\n                this.metalness.push(data.m);\r\n                this.nVertices++;\r\n            },\r\n            addFace: function (a, b, c) {\r\n                this.faces.push(a, b, c);\r\n                this.nFaces++;\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     *  Build the resulting BufferGeometry from current values in this.geometry.\r\n     *  used in compute function.\r\n     *  @private\r\n     */\r\n    buildResultingBufferGeometry () {\r\n        var res = new THREE.BufferGeometry();\r\n        res.setAttribute(\r\n            \"position\",\r\n            new THREE.BufferAttribute(new Float32Array(this.geometry.position), 3)\r\n        );\r\n        res.setAttribute(\r\n            \"normal\",\r\n            new THREE.BufferAttribute(new Float32Array(this.geometry.normal), 3)\r\n        );\r\n        res.setAttribute(\r\n            \"color\",\r\n            new THREE.BufferAttribute(new Float32Array(this.geometry.color), 3)\r\n        );\r\n        res.setAttribute(\r\n            \"roughness\",\r\n            new THREE.BufferAttribute(new Float32Array(this.geometry.roughness), 1)\r\n        );\r\n        res.setAttribute(\r\n            \"metalness\",\r\n            new THREE.BufferAttribute(new Float32Array(this.geometry.metalness), 1)\r\n        );\r\n\r\n        res.setIndex(\r\n            new THREE.BufferAttribute(\r\n                this.geometry.nVertices > 65535\r\n                    ? new Uint32Array(this.geometry.faces)\r\n                    : new Uint16Array(this.geometry.faces),\r\n                1\r\n            )\r\n        );\r\n\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     *  Set values in this.values_xy[1] to 0\r\n     *  @private\r\n     */\r\n    setFrontToZero () {\r\n        // init to 0, can be omptim later\r\n        for (let i = 0; i < this.values_xy[1].length; ++i) {\r\n            this.values_xy[1][i] = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Set values in this.values_xy[1] to -1.\r\n     *  -1 is a marker to state the value has not been computed nor interpolated\r\n     *  @private\r\n     */\r\n    setFrontToMinus() {\r\n        // init to 0, can be omptim later\r\n        for (let i = 0; i < this.values_xy[1].length; ++i) {\r\n            this.values_xy[1][i] = -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Set values in this.values_xy[1] to 0 wherever it is -1.\r\n     *  @private\r\n     */\r\n    setFrontToZeroIfMinus() {\r\n        // init to 0, can be omptim later\r\n        for (let i = 0; i < this.values_xy[1].length; ++i) {\r\n            if (this.values_xy[1][i] === -1) {\r\n                this.values_xy[1][i] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Perform bilinear interpolation in a given 2D box to set values in front array\r\n     *\r\n     *  @param {number} cx Coordinate x of bottom left corner of the front array\r\n     *  @param {number} cy Coordinate x of bottom left corner of the front array\r\n     *  @param {number} cz Coordinate x of bottom left corner of the front array\r\n     *\r\n     *  @param {number} x0 Lower x box osition in the array\r\n     *  @param {number} x1 Upper x box position in the array\r\n     *  @param {number} y0 Lower y box position in the array\r\n     *  @param {number} y1 Upper y box position in the array\r\n     *\r\n     *  @private\r\n     */\r\n    interpolateInBox(\r\n        cx,\r\n        cy,\r\n        cz,\r\n        x0,\r\n        x1,\r\n        y0,\r\n        y1\r\n    ) {\r\n        let varr = this.values_xy[1];\r\n\r\n        let nx = x1 - x0;\r\n        let ny = y1 - y0;\r\n\r\n        /*\r\n        this.computeFrontValAtBoxCorners(cx,cy,cz, new THREE.Vector2(x0,y0), new THREE.Vector2(x1,y1));\r\n        var mask = this.computeBoxMask(new THREE.Vector2(x0,y0), new THREE.Vector2(x1,y1));\r\n        if(!(mask === 0xf || mask === 0x0)){\r\n            throw \"Error bad mask when interpolating\";\r\n        }\r\n        */\r\n\r\n        if (nx > 1) {\r\n            // must interpolate\r\n            let line = y0 * this.reso[0];\r\n            let val0 = varr[line + x0];\r\n            let v_step = (varr[line + x1] - val0) / nx;\r\n            for (var i = 1; i < nx; ++i) {\r\n                if (varr[line + x0 + i] === -1) {\r\n                    varr[line + x0 + i] = val0 + i * v_step;\r\n                    //this.computeFrontValAt(cx,cy,cz,x0+i,y0);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (ny > 1) {\r\n            // compute upper line\r\n            let line = y1 * this.reso[0];\r\n            let val0 = varr[line + x0];\r\n            let v_step = (varr[line + x1] - val0) / nx;\r\n            for (let i = 1; i < nx; ++i) {\r\n                if (varr[line + x0 + i] === -1) {\r\n                    varr[line + x0 + i] = val0 + i * v_step;\r\n                    //this.computeFrontValAt(cx,cy,cz,x0+i,y1);\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i <= nx; ++i) {\r\n                val0 = varr[y0 * this.reso[0] + x0 + i];\r\n                v_step = (varr[y1 * this.reso[0] + x0 + i] - val0) / ny;\r\n                for (var k = 1; k < ny; ++k) {\r\n                    if (varr[(y0 + k) * this.reso[0] + x0 + i] === -1) {\r\n                        varr[(y0 + k) * this.reso[0] + x0 + i] = val0 + k * v_step;\r\n                        //if(i===0 || i==nx){\r\n                        //    this.computeFrontValAt(cx,cy,cz,x0+i,(y0+k));\r\n                        //}\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Compute blobtree value at a given position in the front sliding array.\r\n     *\r\n     *  @param {number} cx Coordinate x of bottom left corner of the front array\r\n     *  @param {number} cy Coordinate x of bottom left corner of the front array\r\n     *  @param {number} cz Coordinate x of bottom left corner of the front array\r\n     *\r\n     *  @param {number} x X position in the array\r\n     *  @param {number} y Y position in the array\r\n     *\r\n     *  @private\r\n     */\r\n    computeFrontValAt(cx, cy, cz, x, y) {\r\n        this.computeFrontValAtClosure(cx, cy, cz, x, y);\r\n    };\r\n\r\n    /**\r\n     *  Function using closure to have static variable. Wrapped in computeFrontValAt\r\n     *  for profiling purpose.\r\n     */\r\n    computeFrontValAtClosure = (function () {\r\n        var eval_res = { v: 0 };\r\n        var p = new THREE.Vector3();\r\n        return function (cx, cy, cz, x, y) {\r\n            /** @type {SlidingMarchingCubes} */\r\n            let self = this;\r\n            var index = y * self.reso[0] + x;\r\n            eval_res.v = self.blobtree.getNeutralValue();\r\n            if (self.values_xy[1][index] === -1) {\r\n                p.set(cx + x * self.min_acc, cy + y * self.min_acc, cz);\r\n                self.blobtree.value(p, eval_res);\r\n                self.values_xy[1][index] = eval_res.v;\r\n            }\r\n        };\r\n    })();\r\n\r\n    /**\r\n     *  Compute corner values in the front buffer in 2D box defined by min,max\r\n     *  @param {number} cx X coordinate of the front buffer corner\r\n     *  @param {number} cy Y coordinate of the front buffer corner\r\n     *  @param {number} cz Z coordinate of the front buffer corner\r\n     *  @param {!THREE.Vector2} min 2D box min\r\n     *  @param {!THREE.Vector2} max 2D box max\r\n     */\r\n    computeFrontValAtBoxCorners (\r\n        cx,\r\n        cy,\r\n        cz,\r\n        min,\r\n        max\r\n    ) {\r\n        this.computeFrontValAt(cx, cy, cz, min.x, min.y);\r\n        this.computeFrontValAt(cx, cy, cz, min.x, max.y);\r\n        this.computeFrontValAt(cx, cy, cz, max.x, min.y);\r\n        this.computeFrontValAt(cx, cy, cz, max.x, max.y);\r\n    };\r\n\r\n    /**\r\n     *  Compute all values in the front buffer in 2D box defined by min,max\r\n     *  @param {number} cx X coordinate of the front buffer corner\r\n     *  @param {number} cy Y coordinate of the front buffer corner\r\n     *  @param {number} cz Z coordinate of the front buffer corner\r\n     *  @param {!THREE.Vector2} min 2D box min\r\n     *  @param {!THREE.Vector2} max 2D box max\r\n     */\r\n    computeFrontValInBox(\r\n        cx,\r\n        cy,\r\n        cz,\r\n        min,\r\n        max\r\n    ) {\r\n        for (var xx = min.x; xx <= max.x; ++xx) {\r\n            for (var yy = min.y; yy <= max.y; ++yy) {\r\n                this.computeFrontValAt(cx, cy, cz, xx, yy);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  Set all values in 2D box min,max at 0.\r\n     *  @param {!THREE.Vector2} min 2D box min\r\n     *  @param {!THREE.Vector2} max 2D box max\r\n     */\r\n    setFrontValZeroInBox(min, max) {\r\n        for (var ix = min.x; ix <= max.x; ++ix) {\r\n            for (var iy = min.y; iy <= max.y; ++iy) {\r\n                this.values_xy[1][iy * this.reso[0] + ix] = 0;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  Compute 2D mask of a given 2D box. Mask is an hex integer unique for each\r\n     *  combination of iso value crossing (like in 3D marching cubes, but in 2D).\r\n     *  @param {!THREE.Vector2} min 2D box min\r\n     *  @param {!THREE.Vector2} max 2D box max\r\n     *  @return {number} The mask\r\n     */\r\n    computeBoxMask(min, max) {\r\n        var mask = 0;\r\n        mask |=\r\n            this.values_xy[1][min.y * this.reso[0] + min.x] >\r\n                this.blobtree.getIsoValue()\r\n                ? 1 << 0\r\n                : 0;\r\n        mask |=\r\n            this.values_xy[1][min.y * this.reso[0] + max.x] >\r\n                this.blobtree.getIsoValue()\r\n                ? 1 << 1\r\n                : 0;\r\n        mask |=\r\n            this.values_xy[1][max.y * this.reso[0] + max.x] >\r\n                this.blobtree.getIsoValue()\r\n                ? 1 << 2\r\n                : 0;\r\n        mask |=\r\n            this.values_xy[1][max.y * this.reso[0] + min.x] >\r\n                this.blobtree.getIsoValue()\r\n                ? 1 << 3\r\n                : 0;\r\n        return mask;\r\n    };\r\n\r\n    /**\r\n     *  Return 0 if and only if all coners value of 2D box min,max are 0\r\n     *  @param {!THREE.Vector2} min 2D box min\r\n     *  @param {!THREE.Vector2} max 2D box max\r\n     *  @return {number}\r\n     */\r\n    checkZeroBox(min, max) {\r\n        return (\r\n            this.values_xy[1][min.y * this.reso[0] + min.x] +\r\n            this.values_xy[1][min.y * this.reso[0] + max.x] +\r\n            this.values_xy[1][max.y * this.reso[0] + max.x] +\r\n            this.values_xy[1][max.y * this.reso[0] + min.x]\r\n        );\r\n    };\r\n\r\n    /**\r\n     *  Recursive function computing values in the given 2D box (which is a subbox\r\n     *  of the whole front buffer), by cuting in 2 at each step. This function is\r\n     *  \"smart\", since computed boxes are buid with their scalar field accuracy.\r\n     *  Depending on the accuracy, scalar field values may be computed from the\r\n     *  blobtree or interpolated (linear).\r\n     *  @param {number} cx X coordinate of the front buffer corner\r\n     *  @param {number} cy Y coordinate of the front buffer corner\r\n     *  @param {number} cz Z coordinate of the front buffer corner\r\n     *  @param {!Array.<!Box2Acc>} boxes2D 2D boxes intersecting box. Used to compute accuracy for split boxes.\r\n     *  @param {!Box2Acc} box The 2D box in which we compute values\r\n     */\r\n    recursiveBoxComputation(\r\n        cx,\r\n        cy,\r\n        cz,\r\n        box,\r\n        boxes2D\r\n    ) {\r\n        // split the current box in 2 boxes in the largest dimension\r\n\r\n        var new_boxes = null;\r\n        var diff = new THREE.Vector2(\r\n            Math.round(box.max.x - box.min.x),\r\n            Math.round(box.max.y - box.min.y)\r\n        );\r\n\r\n        if (diff.x > 1 && diff.x >= diff.y) {\r\n            // cut in x\r\n            var x_cut = box.min.x + Math.floor(diff.x / 2);\r\n            new_boxes = [\r\n                new Box2Acc(\r\n                    box.min,\r\n                    new THREE.Vector2(x_cut, box.max.y),\r\n                    10000,\r\n                    10000\r\n                ),\r\n                new Box2Acc(\r\n                    new THREE.Vector2(x_cut, box.min.y),\r\n                    box.max,\r\n                    10000,\r\n                    10000\r\n                )\r\n            ];\r\n            this.computeFrontValAt(cx, cy, cz, x_cut, box.min.y);\r\n            this.computeFrontValAt(cx, cy, cz, x_cut, box.max.y);\r\n            //this.computeFrontValAt(cx,cy,cz, x_cut+1, box.min.y);\r\n            //this.computeFrontValAt(cx,cy,cz, x_cut+1, box.max.y);\r\n        } else {\r\n            // cut in y\r\n            if (diff.y > 1) {\r\n                var y_cut = box.min.y + Math.floor(diff.y / 2);\r\n                new_boxes = [\r\n                    new Box2Acc(\r\n                        box.min,\r\n                        new THREE.Vector2(box.max.x, y_cut),\r\n                        10000,\r\n                        10000\r\n                    ),\r\n                    new Box2Acc(\r\n                        new THREE.Vector2(box.min.x, y_cut),\r\n                        box.max,\r\n                        10000,\r\n                        10000\r\n                    )\r\n                ];\r\n                this.computeFrontValAt(cx, cy, cz, box.min.x, y_cut);\r\n                this.computeFrontValAt(cx, cy, cz, box.max.x, y_cut);\r\n                //this.computeFrontValAt(cx,cy,cz, box.min.x, y_cut+1);\r\n                //this.computeFrontValAt(cx,cy,cz, box.max.x, y_cut+1);\r\n            } else {\r\n                // the box is 1 in size, so we stop\r\n                return;\r\n            }\r\n        }\r\n        /*\r\n        if(new_boxes[0].intersectsBox(new_boxes[1])){\r\n            console.log(\"Fucking shit\");\r\n        }\r\n        */\r\n\r\n        // Compute accuracies for each box\r\n        var boxes2D_rec = [[], []];\r\n        for (var i = 0; i < boxes2D.length; ++i) {\r\n            for (var k = 0; k < new_boxes.length; ++k) {\r\n                if (new_boxes[k].intersectsBox(boxes2D[i])) {\r\n                    new_boxes[k].setRawAcc(\r\n                        Math.min(new_boxes[k].getRawAcc(), boxes2D[i].getRawAcc())\r\n                    );\r\n                    new_boxes[k].setNiceAcc(\r\n                        Math.min(new_boxes[k].getNiceAcc(), boxes2D[i].getNiceAcc())\r\n                    );\r\n                    boxes2D_rec[k].push(boxes2D[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let k = 0; k < new_boxes.length; ++k) {\r\n            let b = new_boxes[k];\r\n\r\n            let bsize = b.getSize(new THREE.Vector2());\r\n\r\n            if (boxes2D_rec[k].length === 0) {\r\n                this.setFrontValZeroInBox(b.min, b.max);\r\n            } else {\r\n                if (bsize.x <= b.getRawAcc() && bsize.y <= b.getRawAcc()) {\r\n                    // We reach the raw level\r\n                    let mask = this.computeBoxMask(b.min, b.max);\r\n                    if (mask === 0xf || mask === 0x0) {\r\n                        // all points are inside, since we reached raw, we can interpolate\r\n                        // Note when all values are very close to 0, it's useless to interpolate, setting 0 can do.\r\n                        this.interpolateInBox(\r\n                            cx,\r\n                            cy,\r\n                            cz,\r\n                            b.min.x,\r\n                            b.max.x,\r\n                            b.min.y,\r\n                            b.max.y\r\n                        );\r\n\r\n                        // OR just compute all values.\r\n                        // this.computeFrontValInBox(cx,cy,cz,b.min,b.max);\r\n                    } else {\r\n                        //Surface is crossed, must go down to the nice\r\n                        if (\r\n                            bsize.x <= b.getNiceAcc() &&\r\n                            bsize.y <= b.getNiceAcc()\r\n                        ) {\r\n                            // We are under nice acc, just interpolate\r\n                            this.interpolateInBox(\r\n                                cx,\r\n                                cy,\r\n                                cz,\r\n                                b.min.x,\r\n                                b.max.x,\r\n                                b.min.y,\r\n                                b.max.y\r\n                            );\r\n\r\n                            // OR just compute all values.\r\n                            // this.computeFrontValInBox(cx,cy,cz,b.min,b.max);\r\n                        } else {\r\n                            this.recursiveBoxComputation(\r\n                                cx,\r\n                                cy,\r\n                                cz,\r\n                                b,\r\n                                boxes2D_rec[k]\r\n                            );\r\n                            //console.log(\"going down in \" + b.toString());\r\n                        }\r\n                    }\r\n                } else {\r\n                    // we did not reach the raw level, so we must cut again\r\n                    this.recursiveBoxComputation(cx, cy, cz, b, boxes2D_rec[k]);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  Compute all values in the front buffer.\r\n     *  @param {number} cx X coordinate of the front buffer corner\r\n     *  @param {number} cy Y coordinate of the front buffer corner\r\n     *  @param {number} cz Z coordinate of the front buffer corner\r\n     */\r\n    computeFrontValues(cx, cy, cz) {\r\n        this.setFrontToMinus();\r\n\r\n        var areas = this.blobtree.getAreas();\r\n        var bigbox = new Box2Acc();\r\n        bigbox.makeEmpty();\r\n        var boxes2D = [];\r\n        for (var i = 0; i < areas.length; ++i) {\r\n            var raw_acc = Math.round(\r\n                (areas[i].bv.getMinRawAcc() * this.detail_ratio) / this.min_acc\r\n            );\r\n            var nice_acc = Math.round(\r\n                (areas[i].bv.getMinAcc() * this.detail_ratio) / this.min_acc\r\n            );\r\n            var x_min = Math.max(\r\n                0,\r\n                Math.floor((areas[i].aabb.min.x - cx) / this.min_acc)\r\n            );\r\n            var y_min = Math.max(\r\n                0,\r\n                Math.floor((areas[i].aabb.min.y - cy) / this.min_acc)\r\n            );\r\n            var x_max = Math.min(\r\n                this.reso[0] - 1,\r\n                Math.ceil((areas[i].aabb.max.x - cx) / this.min_acc)\r\n            );\r\n            var y_max = Math.min(\r\n                this.reso[1] - 1,\r\n                Math.ceil((areas[i].aabb.max.y - cy) / this.min_acc)\r\n            );\r\n            boxes2D.push(\r\n                new Box2Acc(\r\n                    new THREE.Vector2(x_min, y_min),\r\n                    new THREE.Vector2(x_max, y_max),\r\n                    nice_acc,\r\n                    raw_acc\r\n                )\r\n            );\r\n            bigbox.unionWithAcc(boxes2D[boxes2D.length - 1]);\r\n        }\r\n\r\n        bigbox.intersect(\r\n            new Box2Acc(\r\n                new THREE.Vector2(0, 0),\r\n                new THREE.Vector2(this.reso[0], this.reso[1]),\r\n                bigbox.getNiceAcc(),\r\n                bigbox.getRawAcc()\r\n            )\r\n        );\r\n\r\n        this.computeFrontValAtBoxCorners(cx, cy, cz, bigbox.min, bigbox.max);\r\n        this.recursiveBoxComputation(cx, cy, cz, bigbox, boxes2D);\r\n\r\n        this.setFrontToZeroIfMinus();\r\n    };\r\n\r\n    /**\r\n     *   get the min accuracy needed for this zone\r\n     *   @param {THREE.Box3} bbox the zone for which we want the minAcc\r\n     *   @return {number} the min acc for this zone\r\n     */\r\n    getMinAcc(bbox) {\r\n        var areas = this.blobtree.getAreas();\r\n        var minAcc = Number.MAX_VALUE;\r\n\r\n        for (var i = 0; i < areas.length; i++) {\r\n            var area = areas[i];\r\n            if (area.aabb.intersectsBox(bbox)) {\r\n                if (area.bv) {\r\n                    // it's a new area, we can get the min acc\r\n                    var areaMinAcc = area.bv.getMinAcc();\r\n                    if (areaMinAcc < minAcc) {\r\n                        minAcc = areaMinAcc;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return minAcc * this.detail_ratio;\r\n    };\r\n\r\n    /**\r\n     *   get the max accuracy needed for this zone\r\n     *   @param {THREE.Box3} bbox the zone for which we want the minAcc\r\n     *   @return {number} the max acc for this zone\r\n     */\r\n    getMaxAcc(bbox) {\r\n        var areas = this.blobtree.getAreas();\r\n        var maxAcc = 0;\r\n\r\n        for (var i = 0; i < areas.length; i++) {\r\n            var area = areas[i];\r\n            if (area.aabb.intersectsBox(bbox)) {\r\n                if (area.bv) {\r\n                    // it's a new area, we can get the min acc\r\n                    var areaMaxAcc = area.bv.getMinAcc();\r\n                    if (areaMaxAcc > maxAcc) {\r\n                        maxAcc = areaMaxAcc;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return maxAcc * this.detail_ratio;\r\n    }\r\n\r\n    /**\r\n     *  Note : returned mesh data will be accurate only if extened AABB difference\r\n     *  with o_aabb is small. compared to o_aabb size.\r\n     *  @param {THREE.Box3} o_aabb The aabb where to compute the surface, if null, the blobtree AABB will be used\r\n     *  @param {boolean=} extended True if we want the agorithm to extend the computation zone\r\n     *                            to ensure overlap with a mesh resulting from a computation\r\n     *                            in a neighbouring aabb (Especially usefull for parallelism).\r\n     */\r\n    compute(o_aabb, extended) {\r\n        this.initGeometry();\r\n\r\n        var timer_begin = new Date().getTime();\r\n\r\n        this.blobtree.prepareForEval();\r\n        var aabb = null;\r\n        if (o_aabb) {\r\n            aabb = o_aabb.clone();\r\n        } else {\r\n            aabb = this.blobtree.getAABB();\r\n        }\r\n\r\n        this.extended = extended !== undefined ? extended : false;\r\n\r\n        if (this.extended) {\r\n            let adims = aabb.getSize(new THREE.Vector3());\r\n            let minAcc = Math.min(\r\n                Math.min(this.getMinAcc(aabb), adims[0]),\r\n                Math.min(adims[1], adims[2])\r\n            );\r\n            let acc_box = aabb.clone();\r\n            let final_bbox = aabb.clone();\r\n            let axis = [\"x\", \"y\", \"z\"];\r\n            for (let k = 0; k < axis.length; ++k) {\r\n                acc_box.max[axis[k]] = aabb.min[axis[k]] + minAcc;\r\n                let slice_max = this.getMaxAcc(acc_box);\r\n                if (slice_max !== 0) {\r\n                    final_bbox.min[axis[k]] = final_bbox.min[axis[k]] - slice_max;\r\n                }\r\n                acc_box.max[axis[k]] = aabb.max[axis[k]] - minAcc;\r\n                slice_max = this.getMaxAcc(acc_box);\r\n                if (slice_max !== 0) {\r\n                    final_bbox.max[axis[k]] = final_bbox.max[axis[k]] + slice_max;\r\n                }\r\n            }\r\n            aabb.copy(final_bbox);\r\n        }\r\n\r\n        var aabb_trim = [];\r\n        var aabb_trim_parents = [];\r\n        if (o_aabb) {\r\n            this.blobtree.externalTrim(aabb, aabb_trim, aabb_trim_parents);\r\n            this.blobtree.prepareForEval();\r\n        }\r\n\r\n        this.areas = this.blobtree.getAreas();\r\n\r\n        // if no areas, blobtree is empty so stop and send an empty mesh.\r\n        if (this.areas.length === 0) {\r\n            this.progress(100);\r\n            return new THREE.BufferGeometry();\r\n        }\r\n\r\n        this.min_acc = this.areas.length !== 0 ? this.areas[0].bv.getMinAcc() : 1;\r\n        for (let i = 0; i < this.areas.length; ++i) {\r\n            if (this.areas[i].bv.getMinAcc() < this.min_acc) {\r\n                this.min_acc = this.areas[i].bv.getMinAcc();\r\n            }\r\n        }\r\n        this.min_acc = this.min_acc * this.detail_ratio;\r\n\r\n        var corner = aabb.min;\r\n        var dims = aabb.getSize(new THREE.Vector3());\r\n\r\n        this.steps.z = new Float32Array(Math.ceil(dims.z / this.min_acc) + 2);\r\n        this.steps.z[0] = corner.z;\r\n        var index = 1;\r\n        var areas = this.blobtree.getAreas();\r\n        while (this.steps.z[index - 1] < corner.z + dims.z) {\r\n            var min_step = dims.z;\r\n            // If uniformZ is true, we do not adapt z stepping to local slice accuracy.\r\n            if (this.uniformZ) {\r\n                min_step = this.min_acc;\r\n            } else {\r\n                // find minimum accuracy needed in this slice.\r\n                for (let i = 0; i < areas.length; ++i) {\r\n                    min_step = Math.min(\r\n                        min_step,\r\n                        areas[i].bv.getAxisProjectionMinStep(\r\n                            \"z\",\r\n                            this.steps.z[index - 1]\r\n                        ) * this.detail_ratio\r\n                    );\r\n                }\r\n            }\r\n            this.steps.z[index] = this.steps.z[index - 1] + min_step;\r\n            index++;\r\n        }\r\n        this.reso[2] = index;\r\n\r\n        this.reso[0] = Math.ceil(dims.x / this.min_acc) + 2;\r\n        this.reso[1] = Math.ceil(dims.y / this.min_acc) + 2;\r\n\r\n        // If necessary, set this.dis_o_aabb\r\n        // Reminder : dis_o_aabb is the discret o_aabb, ie indices for which we are in the o_aabb.\r\n        if (this.extended) {\r\n            var i = 0;\r\n            this.dis_o_aabb.set(\r\n                new THREE.Vector3(-1, -1, -1),\r\n                new THREE.Vector3(-1, -1, -1)\r\n            );\r\n            while (i < this.reso[2] && this.dis_o_aabb.min.z === -1) {\r\n                if (this.steps.z[i] >= o_aabb.min.z) {\r\n                    this.dis_o_aabb.min.z = i;\r\n                }\r\n                i++;\r\n            }\r\n            if (i > this.reso[2] - 1) {\r\n                this.dis_o_aabb.min.z = this.reso[2] - 1;\r\n            } // should never happen\r\n\r\n            i = this.reso[2] - 1;\r\n            while (i >= 0 && this.dis_o_aabb.max.z === -1) {\r\n                if (this.steps.z[i] < o_aabb.max.z) {\r\n                    this.dis_o_aabb.max.z = i;\r\n                }\r\n                i--;\r\n            }\r\n            if (i < 0) {\r\n                this.dis_o_aabb.max.z = 0;\r\n            } // should never happen\r\n\r\n            this.dis_o_aabb.min.x = Math.round(\r\n                (o_aabb.min.x - aabb.min.x) / this.min_acc\r\n            );\r\n            this.dis_o_aabb.min.y = Math.round(\r\n                (o_aabb.min.y - aabb.min.y) / this.min_acc\r\n            );\r\n            this.dis_o_aabb.max.x =\r\n                this.reso[0] -\r\n                2 -\r\n                Math.round((aabb.max.x - o_aabb.max.x) / this.min_acc);\r\n            this.dis_o_aabb.max.y =\r\n                this.reso[1] -\r\n                2 -\r\n                Math.round((aabb.max.y - o_aabb.max.y) / this.min_acc);\r\n        }\r\n        // Back values\r\n        this.values_xy[0] = new Float32Array(this.reso[0] * this.reso[1]);\r\n        // Front values\r\n        this.values_xy[1] = new Float32Array(this.reso[0] * this.reso[1]);\r\n\r\n        this.vertices_xy[0] = new Int32Array(this.reso[0] * this.reso[1]);\r\n        this.vertices_xy[1] = new Int32Array(this.reso[0] * this.reso[1]);\r\n\r\n        // Aabb for trimming the blobtree\r\n        var trim_aabb = new THREE.Box3();\r\n        this.computeFrontValues(corner.x, corner.y, corner.z);\r\n\r\n        var percent = 0;\r\n\r\n        for (var iz = 0; iz < this.reso[2] - 1; ++iz) {\r\n            // Switch the 2 arrays, and fill the one in front\r\n            let valuesSwitcher = this.values_xy[0];\r\n            this.values_xy[0] = this.values_xy[1];\r\n            this.values_xy[1] = valuesSwitcher;\r\n            let verticesSwitcher = this.vertices_xy[0];\r\n            this.vertices_xy[0] = this.vertices_xy[1];\r\n            this.vertices_xy[1] = verticesSwitcher;\r\n\r\n            var z1 = this.steps.z[iz + 1];\r\n            trim_aabb.set(\r\n                new THREE.Vector3(corner.x, corner.y, z1 - this.min_acc / 64),\r\n                new THREE.Vector3(\r\n                    corner.x + this.reso[0] * this.min_acc,\r\n                    corner.y + this.reso[1] * this.min_acc,\r\n                    z1 + this.min_acc / 64\r\n                )\r\n            );\r\n            this.blobtree.internalTrim(trim_aabb);\r\n            this.blobtree.prepareForEval();\r\n            this.computeFrontValues(corner.x, corner.y, z1);\r\n            this.blobtree.internalUntrim();\r\n            this.blobtree.prepareForEval();\r\n\r\n            this.z = this.steps.z[iz];\r\n\r\n            this.curr_steps.z = this.steps.z[iz + 1] - this.steps.z[iz];\r\n            this.curr_steps.x = this.min_acc;\r\n            this.curr_steps.y = this.min_acc;\r\n            this.curr_step_vol =\r\n                this.curr_steps.x * this.curr_steps.y * this.curr_steps.z;\r\n\r\n            for (var iy = 0; iy < this.reso[1] - 1; ++iy) {\r\n                for (var ix = 0; ix < this.reso[0] - 1; ++ix) {\r\n                    this.y = corner.y + iy * this.min_acc;\r\n                    this.fetchAndTriangulate(ix, iy, iz, corner);\r\n                }\r\n            }\r\n\r\n            if (Math.round((100 * iz) / this.reso[2]) > percent) {\r\n                percent = Math.round((100 * iz) / this.reso[2]);\r\n                this.progress(percent);\r\n            }\r\n        }\r\n\r\n        if (o_aabb) {\r\n            this.blobtree.untrim(aabb_trim, aabb_trim_parents);\r\n            this.blobtree.prepareForEval();\r\n        }\r\n\r\n        var timer_end = new Date().getTime();\r\n        console.log(\r\n            \"Sliding Marching Cubes computed in \" + (timer_end - timer_begin) + \"ms\"\r\n        );\r\n\r\n        // Clear memory, in case this object is kept alive\r\n        this.values_xy[0] = null;\r\n        this.values_xy[1] = null;\r\n        this.vertices_xy[0] = null;\r\n        this.vertices_xy[1] = null;\r\n\r\n        this.progress(100);\r\n\r\n        return this.buildResultingBufferGeometry();\r\n    };\r\n\r\n    /**\r\n     *  Check values for cube at x, y. Ie get values front front and back arrays,\r\n     *  compute marching cube mask, build the resulting vertex and faces if necessary.\r\n     *  @param {number} x\r\n     *  @param {number} y\r\n     *  @param {THREE.Vector3} corner Bottom left corner of front array.\r\n     */\r\n    fetchAndTriangulate(x, y, z, corner) {\r\n        var idx_y_0 = y * this.reso[0] + x;\r\n        var idx_y_1 = (y + 1) * this.reso[0] + x;\r\n        this.values[0] = this.values_xy[0][idx_y_0]; //v_000;\r\n        this.values[1] = this.values_xy[1][idx_y_0]; //v_001;\r\n        this.values[2] = this.values_xy[0][idx_y_1]; //v_010;\r\n        this.values[3] = this.values_xy[1][idx_y_1]; //v_011;\r\n        this.values[4] = this.values_xy[0][idx_y_0 + 1]; //v_100;\r\n        this.values[5] = this.values_xy[1][idx_y_0 + 1]; //v_101;\r\n        this.values[6] = this.values_xy[0][idx_y_1 + 1]; //v_110;\r\n        this.values[7] = this.values_xy[1][idx_y_1 + 1]; //v_111;\r\n\r\n        this.computeMask();\r\n        if (this.mask !== 0x0) {\r\n            if (this.mask !== 0xff) {\r\n                this.x = corner.x + x * this.min_acc;\r\n                this.computeVertex();\r\n                this.geometry.addVertex({\r\n                    p: this.vertex,\r\n                    n: this.vertex_n,\r\n                    c: this.vertex_m.getColor(),\r\n                    r: this.vertex_m.getRoughness(),\r\n                    m: this.vertex_m.getMetalness()\r\n                });\r\n                this.vertices_xy[1][idx_y_0] = this.geometry.nVertices - 1;\r\n                this.triangulate(x, y, z);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  Push 2 faces in direct order (right handed).\r\n     *  @param {number} v1 Index of vertex 1 in this.geometry\r\n     *  @param {number} v2 Index of vertex 2 in this.geometry\r\n     *  @param {number} v3 Index of vertex 3 in this.geometry\r\n     *  @param {number} v4 Index of vertex 4 in this.geometry\r\n     */\r\n    pushDirectFaces(v1, v2, v3, v4) {\r\n        this.geometry.addFace(v1, v2, v3);\r\n        this.geometry.addFace(v3, v4, v1);\r\n    };\r\n    /**\r\n     *  Push 2 faces in undirect order (left handed).\r\n     *  @param {number} v1 Index of vertex 1 in this.geometry\r\n     *  @param {number} v2 Index of vertex 2 in this.geometry\r\n     *  @param {number} v3 Index of vertex 3 in this.geometry\r\n     *  @param {number} v4 Index of vertex 4 in this.geometry\r\n     */\r\n    pushUndirectFaces(v1, v2, v3, v4) {\r\n        this.geometry.addFace(v3, v2, v1);\r\n        this.geometry.addFace(v1, v4, v3);\r\n    };\r\n\r\n    /**\r\n     *  Compute and add faces depending on current cell crossing mask\r\n     *  @param {number} x Current cell x coordinate in the grid (integer)\r\n     *  @param {number} y Current cell y coordinate in the grid (integer)\r\n     *  @param {number} z Current cell z coordinate in the grid (integer)\r\n     */\r\n    triangulate(x, y, z) {\r\n        let idx_y_0 = y * this.reso[0] + x;\r\n        if (this.edge_cross[0] && y !== 0 && z !== 0) {\r\n            // x edge is crossed\r\n            // Check orientation\r\n            let v1 = this.vertices_xy[1][idx_y_0];\r\n            let v2 = this.vertices_xy[1][(y - 1) * this.reso[0] + x];\r\n            let v3 = this.vertices_xy[0][(y - 1) * this.reso[0] + x];\r\n            let v4 = this.vertices_xy[0][idx_y_0];\r\n            if (this.mask & 0x1) {\r\n                this.pushDirectFaces(v1, v2, v3, v4);\r\n            } else {\r\n                this.pushUndirectFaces(v1, v2, v3, v4);\r\n            }\r\n        }\r\n        if (this.edge_cross[4] && x !== 0 && z !== 0) {\r\n            // y edge is crossed\r\n            // Check orientation\r\n            let v1 = this.vertices_xy[1][idx_y_0];\r\n            let v2 = this.vertices_xy[0][idx_y_0];\r\n            let v3 = this.vertices_xy[0][idx_y_0 - 1];\r\n            let v4 = this.vertices_xy[1][idx_y_0 - 1];\r\n            if (this.mask & 0x1) {\r\n                this.pushDirectFaces(v1, v2, v3, v4);\r\n            } else {\r\n                this.pushUndirectFaces(v1, v2, v3, v4);\r\n            }\r\n        }\r\n        if (this.edge_cross[8] && x !== 0 && y !== 0) {\r\n            // z edge is crossed\r\n            // Check orientation\r\n            let v1 = this.vertices_xy[1][idx_y_0];\r\n            let v2 = this.vertices_xy[1][idx_y_0 - 1];\r\n            let v3 = this.vertices_xy[1][(y - 1) * this.reso[0] + x - 1];\r\n            let v4 = this.vertices_xy[1][(y - 1) * this.reso[0] + x];\r\n            if (this.mask & 0x1) {\r\n                this.pushDirectFaces(v1, v2, v3, v4);\r\n            } else {\r\n                this.pushUndirectFaces(v1, v2, v3, v4);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  Compute the vertex in the current cube.\r\n     *  Use this.x, this.y, this.z\r\n     */\r\n    computeVertex = (function () {\r\n        // Function static variable\r\n        var eval_res = {\r\n            v: null,\r\n            g: new THREE.Vector3(0, 0, 0),\r\n            m: new Material()\r\n        };\r\n        var conv_res = new THREE.Vector3();\r\n\r\n        return function () {\r\n            eval_res.v = this.blobtree.getNeutralValue();\r\n\r\n            // Optimization note :\r\n            //      Here I dont use tables but performances may be improved\r\n            //      by using tables. See marching cube and surface net for examples\r\n\r\n            // Average edge intersection\r\n            var e_count = 0;\r\n\r\n            this.vertex.set(0, 0, 0);\r\n\r\n            //For every edge of the cube...\r\n            for (var i = 0; i < 12; ++i) {\r\n                // --> the following code does not seem to work. Tables.EdgeCross may be broken\r\n                //Use edge mask to check if it is crossed\r\n                // if(!(edge_mask & (1<<i))) {\r\n                //     continue;\r\n                // }\r\n\r\n                //Now find the point of intersection\r\n                var e0 = Tables.EdgeVMap[i][0]; //Unpack vertices\r\n                var e1 = Tables.EdgeVMap[i][1];\r\n                var p0 = Tables.VertexTopo[e0];\r\n                var p1 = Tables.VertexTopo[e1];\r\n                var g0 = this.values[e0]; //Unpack grid values\r\n                var g1 = this.values[e1];\r\n\r\n                // replace the mask check with that. Slower.\r\n                this.edge_cross[i] =\r\n                    g0 > this.blobtree.getIsoValue() !==\r\n                    g1 > this.blobtree.getIsoValue();\r\n                if (!this.edge_cross[i]) {\r\n                    continue;\r\n                }\r\n                //If it did, increment number of edge crossings\r\n                ++e_count;\r\n\r\n                var d = g1 - g0;\r\n                var t = 0; //Compute point of intersection\r\n                if (Math.abs(d) > 1e-6) {\r\n                    t = (this.blobtree.getIsoValue() - g0) / d;\r\n                } else {\r\n                    continue;\r\n                }\r\n\r\n                this.vertex.x += (1.0 - t) * p0[0] + t * p1[0];\r\n                this.vertex.y += (1.0 - t) * p0[1] + t * p1[1];\r\n                this.vertex.z += (1.0 - t) * p0[2] + t * p1[2];\r\n            }\r\n\r\n            this.vertex.x = this.x + (this.curr_steps.x * this.vertex.x) / e_count;\r\n            this.vertex.y = this.y + (this.curr_steps.y * this.vertex.y) / e_count;\r\n            this.vertex.z = this.z + (this.curr_steps.z * this.vertex.z) / e_count;\r\n\r\n            // now make some convergence step\r\n            // Note : it cost 15 to 20% performance lost\r\n            //        and the result does not seem 15 et 20% better...\r\n            if (this.convergence) {\r\n                Convergence.safeNewton3D(\r\n                    this.blobtree, // Scalar Field to eval\r\n                    this.vertex, // 3D point where we start, must comply to THREE.Vector3 API\r\n                    this.blobtree.getIsoValue(), // iso value we are looking for\r\n                    this.min_acc * this.convergence.ratio, // Geometrical limit to stop\r\n                    this.convergence.step, // limit of number of step\r\n                    this.min_acc, // Bounding volume inside which we look for the iso, getting out will make the process stop.\r\n                    conv_res // the resulting point\r\n                );\r\n                this.vertex.copy(conv_res);\r\n            }\r\n\r\n            this.blobtree.value(this.vertex, eval_res);\r\n\r\n            eval_res.g.normalize();\r\n            this.vertex_n.copy(eval_res.g).multiplyScalar(-1);\r\n            this.vertex_m.copy(eval_res.m);\r\n        };\r\n    })();\r\n\r\n    /**\r\n     *  Compute mask of the current cube.\r\n     *  Use this.values, set this.mask\r\n     */\r\n    computeMask() {\r\n        this.mask = 0;\r\n\r\n        //For each this, compute cube mask\r\n        for (var i = 0; i < 8; ++i) {\r\n            var s = this.values[i];\r\n            this.mask |= s > this.blobtree.getIsoValue() ? 1 << i : 0;\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = SlidingMarchingCubes;\r\n","\"use strict\";\r\n\r\nconst THREE = require(\"three\");\r\nconst Types = require(\"./Types.js\");\r\nconst Node = require(\"./Node.js\");\r\nconst Material = require(\"./Material.js\");\r\n\r\n/** @typedef {import('./Element.js').Json} Json */\r\n/** @typedef {import('./Element.js').ValueResultType} ValueResultType */\r\n/** @typedef {import('./Node.js').NodeJSON} NodeJSON */\r\n\r\n/**\r\n * @typedef {NodeJSON} MaxNodeJSON\r\n */\r\n\r\n/**\r\n *  This class implement a Max node.\r\n *  It will return the maximum value of the field of each primitive.\r\n *  Return 0 in region were no primitive is present.\r\n *  @class MaxNode\r\n *  @extends Node\r\n */\r\nclass MaxNode extends Node {\r\n\r\n    static type = \"MaxNode\";\r\n\r\n    /**\r\n     *\r\n     * @param {Json} json\r\n     * @returns\r\n     */\r\n    static fromJSON(json) {\r\n        var res = new MaxNode();\r\n        for (var i = 0; i < json.children.length; ++i) {\r\n            res.addChild(Types.fromJSON(json.children[i]));\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     *  @constructor\r\n     *  @param {Array<Node>=} children The children to add to this node.Just a convenient parameter, you can do it manually using addChild.\r\n     */\r\n    constructor(children) {\r\n        super();\r\n        if (children) {\r\n            var self = this;\r\n            children.forEach(function (c) {\r\n                self.addChild(c);\r\n            });\r\n        }\r\n\r\n        // temp vars to speed up evaluation by avoiding allocations\r\n        /** @type {{v:number, g:THREE.Vector3, m:Material}} */\r\n        this.tmp_res = { v: 0, g: null, m: null };\r\n        /** @type {THREE.Vector3} */\r\n        this.tmp_g = new THREE.Vector3();\r\n        /** @type {Material} */\r\n        this.tmp_m = new Material();\r\n    }\r\n\r\n    /**\r\n     * @returns {string}\r\n     */\r\n    getType = function () {\r\n        return MaxNode.type;\r\n    }\r\n\r\n    /**\r\n     * @link Node.prepareForEval for a complete description\r\n     **/\r\n    prepareForEval () {\r\n        if (!this.valid_aabb) {\r\n            this.aabb = new THREE.Box3();  // Create empty BBox\r\n            for (var i = 0; i < this.children.length; ++i) {\r\n                var c = this.children[i];\r\n                c.prepareForEval();\r\n                this.aabb.union(c.getAABB());     // new aabb is computed according to remaining children aabb\r\n            }\r\n\r\n            this.valid_aabb = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  @link Element.value for a complete description\r\n     *\r\n     *  @param {THREE.Vector3} p\r\n     *  @param {ValueResultType} res\r\n     */\r\n    value (p, res) {\r\n        // TODO : check that all bounding box of all children and subchildrens are valid\r\n        //        This enable not to do it in prim and limit the number of assert call (and string built)\r\n\r\n        var l = this.children.length;\r\n        var tmp = this.tmp_res;\r\n        tmp.g = res.g ? this.tmp_g : null;\r\n        tmp.m = res.m ? this.tmp_m : null;\r\n\r\n        // Init res\r\n        res.v = 0;\r\n        if (res.m) {\r\n            res.m.copy(Material.defaultMaterial);\r\n        } if (res.g) {\r\n            res.g.set(0, 0, 0);\r\n        } else if (res.step !== undefined) {\r\n            // that, is the max distance\r\n            // we want a value that loose any 'min'\r\n            res.step = 1000000000;\r\n        }\r\n\r\n        if (this.aabb.containsPoint(p) && l !== 0) {\r\n            res.v = Number.MAX_VALUE;\r\n            for (var i = 0; i < l; ++i) {\r\n                this.children[i].value(p, tmp);\r\n                if (tmp.v > res.v) {\r\n                    res.v = tmp.v;\r\n                    if (res.g) {\r\n                        res.g.copy(tmp.g);\r\n                    }\r\n                    if (res.m) {\r\n                        res.m.copy(tmp.m);\r\n                    }\r\n                    // within primitive potential\r\n                    if (res.step || res.stepOrtho) {\r\n                        throw \"Not implemented\";\r\n                    }\r\n                }\r\n                res.v = Math.max(res.v, tmp.v);\r\n            }\r\n        }\r\n        else if (res.step || res.stepOrtho) {\r\n            throw \"Not implemented\";\r\n        }\r\n    }\r\n\r\n};\r\n\r\nTypes.register(MaxNode.type, MaxNode);\r\n\r\nmodule.exports = MaxNode;\r\n","const { BufferGeometryUtils } = require(\"three/examples/jsm/utils/BufferGeometryUtils\");\r\n\r\n// Does not work yet, so just suppose that Blobtree is defined externally\r\n// const Blobtree = require('three-js-blobtree\");\r\n\r\nconst RootNode = require(\"../blobtree/RootNode\");\r\nconst RicciNode = require(\"../blobtree/RicciNode\");\r\nconst MaxNode = require(\"../blobtree/MaxNode\");\r\nconst ScalisPoint = require(\"../blobtree/scalis/ScalisPoint\");\r\nconst ScalisSegment = require(\"../blobtree/scalis/ScalisSegment\");\r\nconst ScalisTriangle = require(\"../blobtree/scalis/ScalisTriangle\");\r\n\r\nconst SlidingMarchingCubes = require(\"./SlidingMarchingCubes\");\r\n\r\n/**\r\n * @typedef {import('./SlidingMarchingCubes').SMCParams} SMCParams\r\n */\r\n\r\n/**\r\n * @typedef {SMCParams & {class: any}} SubPolygonizerParams\r\n */\r\n\r\n/**\r\n * @typedef {Object} SplitMaxPolygonizerParams\r\n * @property {SubPolygonizerParams=} subPolygonizer Parameters for the subpolygonizer to use.\r\n *                                           Must contain all parameters for the given subPolygonizer (like detailRatio, etc...)\r\n *                                           The class of the subpolygonizer (default to SlidingMarchingCubes) is in additional parameter class\r\n * @property {Boolean=} smpParams.uniformRes If true, uniform resolution will be used on all primitives, according to the minimum accuracy in the blobtree.\r\n * @property {Function=} smpParams.progress Progress callback, taking a percentage as parameter.\r\n * @property {Number=} smpParams.ricciThreshold The RicciNode coefficient above which it will be considered like a MaxNode.\r\n */\r\n\r\n/**\r\n *  This class will polygonize nodes independantly when they blend with a MaxNode or a RicciNode\r\n *  (for RicciNode, only if the coefficient of at least \"ricciThreshold\", threshold being a parameter).\r\n *  It will create a mesh made of several shells but intersections will be better looking than with some\r\n *  global polygonizers like MarchingCubes.\r\n */\r\nclass SplitMaxPolygonizer {\r\n    /**\r\n     *  @param {SplitMaxPolygonizerParams=} smpParams Parameters and option for this polygonizer.\r\n     */\r\n    constructor(blobtree, smpParams) {\r\n        var params = smpParams || {};\r\n\r\n        this.blobtree = blobtree;\r\n\r\n        this.uniformRes = params.uniformRes || false;\r\n        this.min_acc = null;\r\n        this.minAccs = [];\r\n\r\n        /** @type {SubPolygonizerParams} */\r\n        this.subPolygonizer = params.subPolygonizer ? params.subPolygonizer : {\r\n            class: SlidingMarchingCubes,\r\n            detailRatio: 1.0\r\n        };\r\n\r\n        this.ricciThreshold = params.ricciThreshold || 64;\r\n\r\n        this.progress = params.progress ? params.progress : function (_percent) {\r\n            //console.log(percent);\r\n        };\r\n\r\n        // Now we need to parse the blobtree and split it according to the different ways of\r\n        // generating each groups.\r\n        // Since we do not wantto alterate the original blobtree, for now we will use cloning.\r\n        // (to be changed if it is too slow)\r\n        this.subtrees = []; // Blobtrees created for primitives which must be generated with SMC\r\n        this.progCoeff = []; // progress coefficient, mainly depends on the total number of primitives in the node.\r\n        this.totalCoeff = 0;\r\n\r\n        this.setBlobtree(blobtree);\r\n    }\r\n\r\n};\r\n\r\nSplitMaxPolygonizer.prototype.constructor = SplitMaxPolygonizer;\r\n\r\nSplitMaxPolygonizer.prototype.setBlobtree = function(blobtree){\r\n\r\n    this.blobtree = blobtree;\r\n    this.blobtree.prepareForEval();\r\n\r\n    var getBlobtreeMinAcc = function(btree){\r\n        var areas = btree.getAreas();\r\n        var min_acc = areas.length !== 0 ? areas[0].bv.getMinAcc() : null;\r\n        for(var i=0; i<areas.length; ++i){\r\n            if(areas[i].bv.getMinAcc()<min_acc){\r\n                min_acc = areas[i].bv.getMinAcc();\r\n            }\r\n        }\r\n        return min_acc;\r\n    };\r\n    this.min_acc = getBlobtreeMinAcc(this.blobtree);\r\n\r\n    this.subtrees = [];\r\n        this.progCoeff = [];\r\n        this.totalCoeff = 0;\r\n\r\n    var self = this;\r\n    var addToSubtrees = function(n){\r\n        var subtree = null;\r\n        if(n instanceof RootNode){\r\n            subtree = n.clone();\r\n        }else{\r\n            subtree = new RootNode();\r\n            subtree.addChild(n.clone());\r\n        }\r\n        self.subtrees.push(subtree);\r\n        subtree.prepareForEval();\r\n        self.minAccs.push(getBlobtreeMinAcc(subtree));\r\n        self.progCoeff.push(\r\n            subtree.count(ScalisPoint) + subtree.count(ScalisSegment) + subtree.count(ScalisTriangle)\r\n        );\r\n        self.totalCoeff += self.progCoeff[self.progCoeff.length-1];\r\n    };\r\n\r\n    var recurse = function(n){\r\n        if(n instanceof RicciNode){\r\n            if(n.getRicciN() < self.ricciThreshold){\r\n                // This node must be copied and generated using SMC\r\n                if(n.children.length !== 0){\r\n                    addToSubtrees(n);\r\n                }\r\n            }else{\r\n                for(var i=0; i<n.children.length; ++i){\r\n                    recurse(n.children[i]);\r\n                }\r\n            }\r\n        }else if(n instanceof MaxNode){\r\n            for (let i = 0; i < n.children.length; ++i) {\r\n                recurse(n.children[i]);\r\n            }\r\n        }else if(n instanceof ScalisPoint){\r\n            addToSubtrees(n);\r\n        }else if(n instanceof ScalisSegment){\r\n            addToSubtrees(n);\r\n        }else if(n instanceof ScalisTriangle){\r\n            addToSubtrees(n);\r\n        }else{\r\n            addToSubtrees(n);\r\n        }\r\n    };\r\n\r\n    recurse(this.blobtree);\r\n}\r\n\r\nSplitMaxPolygonizer.prototype.compute = function() {\r\n\r\n    if(!this.blobtree.isValidAABB()){\r\n        this.setBlobtree(this.blobtree);\r\n    }\r\n\r\n    var self = this;\r\n    this.progress(0);\r\n    var prog = 0;\r\n    var geometries = [];\r\n    for(var i=0; i<this.subtrees.length; ++i){\r\n\r\n        var prev_detailRatio = this.subPolygonizer.detailRatio || 1.0;\r\n        if(this.uniformRes && this.min_acc){\r\n            this.subPolygonizer.detailRatio = prev_detailRatio*this.min_acc/this.minAccs[i];\r\n        }\r\n\r\n        this.subPolygonizer.progress = function(percent){\r\n            self.progress(100*(prog + (percent/100)*self.progCoeff[i])/self.totalCoeff)\r\n        };\r\n        var polygonizer = new this.subPolygonizer.class(\r\n            this.subtrees[i],\r\n            this.subPolygonizer\r\n        );\r\n        geometries.push(polygonizer.compute());\r\n\r\n        this.subPolygonizer.detailRatio = prev_detailRatio;\r\n\r\n        prog += this.progCoeff[i];\r\n    }\r\n\r\n    var res = BufferGeometryUtils.mergeBufferGeometries(geometries);\r\n\r\n    this.progress(100);\r\n\r\n    return res;\r\n};\r\n\r\nmodule.exports = SplitMaxPolygonizer;\r\n","\r\nconst THREE = require(\"three\");\r\n\r\nconst Material = require(\"../blobtree/Material.js\");\r\nconst Tables = require(\"./MCTables.js\");\r\nconst Convergence = require(\"../utils/Convergence.js\");\r\n\r\nconst SlidingMarchingCubes = require(\"./SlidingMarchingCubes\");\r\n\r\n/**\r\n * @typedef {import('../blobtree/RootNode')} RootNode\r\n * @typedef {import('./SlidingMarchingCubes')} SMCParams\r\n */\r\n\r\n\r\n/**\r\n * metaBlobtree is The blobtree from which normals will be computed.\r\n * Usually a blobtree containing blobtree.\r\n * @typedef {{metaBlobtree: RootNode} & SMCParams} SplitSMCParams\r\n */\r\n\r\n/**\r\n *  A special SlidingMarchingCubes with a different function\r\n *  to compute vertex normal in a cell.\r\n *  In this polygnizer, we suppose the blobtree used for marching\r\n *  is not the complete blobtree and we want to use the normal from\r\n *  the complete blobtree.\r\n */\r\nclass SplitSMC extends SlidingMarchingCubes {\r\n\r\n    /**\r\n     *  @param {RootNode} blobtree\r\n     *  @param {SplitSMCParams} params\r\n     */\r\n    constructor(blobtree, params) {\r\n        super(blobtree, params);\r\n\r\n        if (params.metaBlobtree) {\r\n            this.metaBlobtree = params.metaBlobtree;\r\n            this.metaBlobtree.prepareForEval();\r\n        } else {\r\n            throw \"Error : SplitSMC needs a meta blobtree in params (from which normals will be computed).\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Compute the vertex in the current cube.\r\n     *  Use this.x, this.y, this.z\r\n     */\r\n    computeVertex = (function () {\r\n        // Function static variable\r\n        var eval_res = { v: null, g: new THREE.Vector3(0, 0, 0), m: new Material() };\r\n        var conv_res = new THREE.Vector3();\r\n\r\n        return function () {\r\n\r\n            /** @type {SplitSMC} */\r\n            let self = this;\r\n\r\n            eval_res.v = self.blobtree.getNeutralValue();\r\n\r\n            // Optimization note :\r\n            //      Here I dont use tables but performances may be improved\r\n            //      by using tables. See marching cube and surface net for examples\r\n\r\n            // Average edge intersection\r\n            let e_count = 0;\r\n\r\n            self.vertex.set(0, 0, 0);\r\n\r\n            //For every edge of the cube...\r\n            for (let i = 0; i < 12; ++i) {\r\n\r\n                // --> the following code does not seem to work. Tables.EdgeCross may be broken\r\n                //Use edge mask to check if it is crossed\r\n                // if(!(edge_mask & (1<<i))) {\r\n                //     continue;\r\n                // }\r\n\r\n                //Now find the point of intersection\r\n                var e0 = Tables.EdgeVMap[i][0];       //Unpack vertices\r\n                var e1 = Tables.EdgeVMap[i][1];\r\n                var p0 = Tables.VertexTopo[e0];\r\n                var p1 = Tables.VertexTopo[e1];\r\n                var g0 = self.values[e0];                //Unpack grid values\r\n                var g1 = self.values[e1];\r\n\r\n                // replace the mask check with that. Slower.\r\n                self.edge_cross[i] = ((g0 > self.blobtree.getIsoValue()) !== (g1 > self.blobtree.getIsoValue()));\r\n                if (!self.edge_cross[i]) {\r\n                    continue;\r\n                }\r\n                //If it did, increment number of edge crossings\r\n                ++e_count;\r\n\r\n                var d = (g1 - g0);\r\n                var t = 0;  //Compute point of intersection\r\n                if (Math.abs(d) > 1e-6) {\r\n                    t = (self.blobtree.getIsoValue() - g0) / d;\r\n                } else {\r\n                    continue;\r\n                }\r\n\r\n                self.vertex.x += (1.0 - t) * p0[0] + t * p1[0];\r\n                self.vertex.y += (1.0 - t) * p0[1] + t * p1[1];\r\n                self.vertex.z += (1.0 - t) * p0[2] + t * p1[2];\r\n            }\r\n\r\n            self.vertex.x = self.x + self.curr_steps.x * self.vertex.x / e_count;\r\n            self.vertex.y = self.y + self.curr_steps.y * self.vertex.y / e_count;\r\n            self.vertex.z = self.z + self.curr_steps.z * self.vertex.z / e_count;\r\n\r\n            // now make some convergence step\r\n            // Note : it cost 15 to 20% performance lost\r\n            //        and the result does not seem 15 et 20% better...\r\n            if (self.convergence) {\r\n                Convergence.safeNewton3D(\r\n                    self.blobtree,      // Scalar Field to eval\r\n                    self.vertex,                  // 3D point where we start, must comply to THREE.Vector3 API\r\n                    self.blobtree.getIsoValue(),               // iso value we are looking for\r\n                    self.min_acc * self.convergence.ratio,               // Geometrical limit to stop\r\n                    self.convergence.step,                           // limit of number of step\r\n                    self.min_acc,                     // Bounding volume inside which we look for the iso, getting out will make the process stop.\r\n                    conv_res                          // the resulting point\r\n                );\r\n                self.vertex.copy(conv_res);\r\n            }\r\n\r\n            self.metaBlobtree.value(self.vertex, eval_res);\r\n\r\n            eval_res.g.normalize();\r\n            self.vertex_n.copy(eval_res.g).multiplyScalar(-1);\r\n            self.vertex_m.copy(eval_res.m);\r\n        };\r\n    })();\r\n};\r\n\r\n\r\n\r\nmodule.exports = SplitSMC;\r\n","import Types from \"./blobtree/Types.js\";\r\nimport Element from \"./blobtree/Element.js\";\r\nimport Node from \"./blobtree/Node.js\";\r\nimport RootNode from \"./blobtree/RootNode.js\";\r\nimport RicciNode from \"./blobtree/RicciNode.js\";\r\nimport DifferenceNode from \"./blobtree/DifferenceNode.js\";\r\nimport MinNode from \"./blobtree/MinNode.js\";\r\nimport TwistNode from \"./blobtree/TwistNode\";\r\nimport MaxNode from \"./blobtree/MinNode.js\";\r\nimport Primitive from \"./blobtree/Primitive.js\";\r\nimport ScalisMath from \"./blobtree/scalis/ScalisMath.js\";\r\nimport ScalisPrimitive from \"./blobtree/scalis/ScalisPrimitive.js\";\r\nimport ScalisPoint from \"./blobtree/scalis/ScalisPoint.js\";\r\nimport ScalisSegment from \"./blobtree/scalis/ScalisSegment.js\";\r\nimport ScalisTriangle from \"./blobtree/scalis/ScalisTriangle.js\";\r\nimport ScalisVertex from \"./blobtree/scalis/ScalisVertex.js\";\r\nimport DistanceFunctor from \"./blobtree/sdf/DistanceFunctor.js\";\r\nimport Poly6DistanceFunctor from \"./blobtree/sdf/Poly6DistanceFunctor.js\";\r\nimport SDFRootNode from \"./blobtree/sdf/SDFRootNode.js\";\r\nimport SDFPrimitive from \"./blobtree/sdf/SDFPrimitive.js\";\r\nimport SDFPoint from \"./blobtree/sdf/SDFPoint.js\";\r\nimport SDFSegment from \"./blobtree/sdf/SDFSegment.js\";\r\nimport SDFSphere from \"./blobtree/sdf/SDFSphere.js\";\r\nimport SDFCapsule from \"./blobtree/sdf/SDFCapsule.js\";\r\nimport Material from \"./blobtree/Material.js\";\r\nimport Accuracies from \"./blobtree/accuracies/Accuracies.js\";\r\nimport Area from \"./blobtree/areas/Area.js\";\r\nimport AreaScalisSeg from \"./blobtree/areas/AreaScalisSeg.js\";\r\nimport AreaScalisTri from \"./blobtree/areas/AreaScalisTri.js\";\r\nimport AreaSphere from \"./blobtree/areas/AreaSphere.js\";\r\nimport AreaCapsule from \"./blobtree/areas/AreaCapsule.js\";\r\nimport SlidingMarchingCubes from \"./polygonizers/SlidingMarchingCubes.js\";\r\nimport SplitMaxPolygonizer from \"./polygonizers/SplitMaxPolygonizer.js\";\r\nimport SplitSMC from \"./polygonizers/SplitSMC.js\";\r\n\r\nconst version = \"1.0.0\";\r\n\r\nexport {\r\n    version,\r\n    Types,\r\n    Element,\r\n    Node,\r\n    RootNode,\r\n    RicciNode,\r\n    DifferenceNode,\r\n    MinNode,\r\n    MaxNode,\r\n    TwistNode,\r\n    Primitive,\r\n    ScalisMath,\r\n    ScalisPrimitive,\r\n    ScalisPoint,\r\n    ScalisSegment,\r\n    ScalisTriangle,\r\n    ScalisVertex,\r\n    DistanceFunctor,\r\n    Poly6DistanceFunctor,\r\n    SDFRootNode,\r\n    SDFPrimitive,\r\n    SDFPoint,\r\n    SDFSegment,\r\n    SDFSphere,\r\n    SDFCapsule,\r\n    Material,\r\n    Accuracies,\r\n    Area,\r\n    AreaScalisSeg,\r\n    AreaScalisTri,\r\n    AreaSphere,\r\n    AreaCapsule,\r\n    SlidingMarchingCubes,\r\n    SplitMaxPolygonizer,\r\n    SplitSMC,\r\n};\r\n","import { checkDependancy, checkThreeRevision } from \"three-js-checker\";\r\nimport * as Blobtree from \"./export\";\r\nimport {BufferGeometryUtils} from \"three/examples/jsm/utils/BufferGeometryUtils\";\r\n\r\nconst PACKAGE_NAME = \"three-js-blobtree\";\r\n\r\ncheckThreeRevision(PACKAGE_NAME, 130);\r\ncheckDependancy(PACKAGE_NAME, \"BufferGeometryUtils\", BufferGeometryUtils);\r\ncheckDependancy(PACKAGE_NAME, \"Blobtree\", Blobtree);\r\n\r\nexport * from \"./export\";\r\n"],"names":["Types","THREE","require$$0","require$$1","Element","Node","Material","require$$2","require$$3","RicciNode","Convergence","RootNode","Primitive","ScalisMath","ScalisPrimitive","ScalisVertex","Area","Accuracies","AreaSphere","require$$4","require$$5","require$$6","ScalisPoint","AreaScalisSeg","ScalisSegment","TriangleUtils","AreaScalisTri","require$$7","ScalisTriangle","DistanceFunctor","SDFNode","SDFPrimitive","AreaCapsule","Tables","SlidingMarchingCubes","MaxNode","BufferGeometryUtils"],"mappings":"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AAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,KAAK,IAAI,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,CAAC,CAAC,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,KAAK,KAAK,GAAG,KAAK,IAAI,EAAE,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,KAAK,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,EAAE,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,GAAG,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,KAAK,KAAK,GAAG,KAAK,IAAI,CAAC,EAAE,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,CAAC,G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"}