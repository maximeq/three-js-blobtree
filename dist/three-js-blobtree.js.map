{"version":3,"file":"three-js-blobtree.js","sources":["../../dioxygen-resources/three-js-checker/src/three-check.js","../src/blobtree/Types.js","../src/blobtree/Element.js","../src/blobtree/Node.js","../src/utils/Convergence.js","../src/blobtree/Material.js","../src/blobtree/RicciNode.js","../src/blobtree/RootNode.js","../src/blobtree/DifferenceNode.js","../src/blobtree/MinNode.js","../src/blobtree/Primitive.js","../src/blobtree/scalis/ScalisMath.js","../src/blobtree/scalis/ScalisPrimitive.js","../src/blobtree/scalis/ScalisVertex.js","../src/blobtree/areas/Area.js","../src/blobtree/accuracies/Accuracies.js","../src/blobtree/areas/AreaSphere.js","../src/blobtree/scalis/ScalisPoint.js","../src/blobtree/areas/AreaScalisSeg.js","../src/blobtree/scalis/ScalisSegment.js","../src/utils/TriangleUtils.js","../src/blobtree/areas/AreaScalisTri.js","../src/blobtree/scalis/ScalisTriangle.js","../src/blobtree/sdf/DistanceFunctor.js","../src/blobtree/sdf/Poly6DistanceFunctor.js","../src/blobtree/sdf/SDFNode.js","../src/blobtree/sdf/SDFRootNode.js","../src/blobtree/sdf/SDFPrimitive.js","../src/blobtree/sdf/SDFPoint.js","../src/blobtree/areas/AreaCapsule.js","../src/blobtree/sdf/SDFSegment.js","../src/blobtree/sdf/SDFSphere.js","../src/blobtree/sdf/SDFCapsule.js","../src/polygonizers/MCTables.js","../src/polygonizers/SlidingMarchingCubes.js","../src/blobtree/MaxNode.js","../src/polygonizers/SplitMaxPolygonizer.js","../src/polygonizers/SplitSMC.js","../src/export.js","../src/check-wrapper.js"],"sourcesContent":["export function checkDependancy(packageName, dependancyName, dependancy) {\n    let duplicationMessage = `${packageName}: ${dependancyName} is duplicated. Your bundle includes ${dependancyName} twice. Please repair your bundle.`;\n    try {\n        if (THREE[dependancyName] === undefined) {\n            THREE[dependancyName] = dependancy;\n            return;\n        }\n\n        if (THREE[dependancyName] !== dependancy) {\n            throw duplicationMessage;\n        }\n    } catch (error) {\n        if (error !== duplicationMessage) {\n            console.warn(\n                `${packageName}: Duplication check unavailable.` + error\n            );\n        } else {\n            throw error;\n        }\n    }\n}\n\nexport function checkThreeRevision(packageName, revision) {\n    if (THREE.REVISION != revision) {\n        console.error(\n            `${packageName} depends on THREE revision ${revision}, but current revision is ${THREE.REVISION}.`\n        );\n    }\n}\n","\"use strict\";\n\n/**\n *  Keep track of all Types added to the Blobtree library.\n *  For now just a list of strings registered by the classes.\n *  @constructor\n */\nvar Types = {\n    types : {}\n};\n\n/**\n *  Register a type in the list.\n *  @param {string} name The name of the type.\n *  @param class The class of the registered type.\n */\nTypes.register = function(name, cls){\n    if(this.types[name]){\n        throw \"Error : cannot register type \" + name + \", this name is already registered.\";\n    }\n    this.types[name] = cls;\n};\n\n/**\n *  Parse a JSON recursively to return a Blobtree or a blobtree element.\n *  @param {Object} json A javascript Object resulting from a JSON interpretation.\n *  @param class The class of the registered type.\n */\nTypes.fromJSON = function(json){\n    var cls = this.types[json.type];\n    if(!cls){\n        throw \"Error : type found in JSON (\" + json.type + \" is not registered in the Blobtree library.\";\n    }\n    return cls.fromJSON(json);\n};\n\nmodule.exports = Types;\n","'use strict';\n\nconst THREE = require(\"three\");\nconst Types = require(\"./Types.js\");\n\nvar elementIds = 0;\n\n/**\n *  A superclass for Node and Primitive in the blobtree.\n *  @constructor\n */\nvar Element = function () {\n\n    this.id = elementIds++;\n\n    this.aabb = new THREE.Box3();\n    this.valid_aabb = false;\n\n    /** @type {Blobtree.Node} */\n    this.parentNode = null;\n};\n\nElement.prototype.constructor = Element;\n\nElement.type = \"Element\";\nTypes.register(Element.type, Element);\n\n/**\n *  @abstract\n *  Return a Javscript Object respecting JSON convention.\n *  All classes must\n */\nElement.prototype.toJSON = function(){\n    return {\n        type:this.getType()\n    };\n};\n/**\n *  @abstract\n *  Clone the object.\n */\nElement.prototype.clone = function(){\n    return Types.fromJSON(this.toJSON());\n};\n\n\n/**\n *  @return {Blobtree.Node} The parent node of this primitive.\n */\nElement.prototype.getParentNode = function() {\n    return this.parentNode;\n};\n/**\n *  @return {string} Type of the element\n */\nElement.prototype.getType = function() {\n    return Element.type;\n};\n\n/**\n *  Perform precomputation that will help to reduce future processing time,\n *  especially on calls to value.\n *  @protected\n *  @abstract\n */\nElement.prototype.computeHelpVariables = function() {\n    this.computeAABB();\n};\n\n/**\n *  @abstract\n *  Compute the Axis Aligned Bounding Box (AABB) for the current primitive.\n *  By default, the AABB returned is the unionns of all vertices AABB (This is\n *  good for almost all basic primitives).\n */\nElement.prototype.computeAABB = function() {\n    throw \"Error : computeAABB is abstract, should have been overwritten\";\n};\n\n/**\n *  @return {THREE.Box3} The AABB of this Element (primitive or node). WARNING : call\n *  isValidAABB before to ensure the current AABB does correspond to the primitive\n *  settings.\n */\nElement.prototype.getAABB = function() {\n    return this.aabb;\n};\n\n/**\n *  @return {boolean} True if the current aabb is valid, ie it does\n *  correspond to the internal primitive parameters.\n */\nElement.prototype.isValidAABB = function() {\n    return this.valid_aabb;\n};\n\n/**\n *  Invalid the bounding boxes recursively up to the root\n */\nElement.prototype.invalidAABB = function()\n{\n    this.valid_aabb = false;\n    if(this.parentNode !== null && this.parentNode.isValidAABB()){\n        this.parentNode.invalidAABB();\n    }\n};\n\n/**\n *  Note : This function was made for Node to recursively invalidate\n *  children AABB. Default is to invalidate only this AABB.\n */\nElement.prototype.invalidAll = function() {\n    this.invalidAABB();\n};\n\n/**\n *  @abstract\n *  Prepare the element for a call to value.\n *  Important note: For now, a primitive is considered prepared for eval if and only\n *                  if its bounding box is valid (valid_aabb is true).\n *\n */\nElement.prototype.prepareForEval = function() {\n    var res = {del_obj:[], new_areas:[]};\n    throw \"ERROR : prepareForEval is a virtual function, should be re-implemented in all element(error occured in Element.js\";\n    return res;\n};\n\n/**\n *  @abstract\n *  Compute the value and/or gradient and/or material\n *  of the element at position p in space. return computations in res (see below)\n *\n *  @param {!THREE.Vector3} p Point where we want to evaluate the primitive field\n *  @param {!Object} res Computed values will be stored here. Each values should exist and\n *                       be allocated already.\n *  @param {number} res.v Value, must be defined\n *  @param {Material} res.m Material, must be allocated and defined if wanted\n *  @param {THREE.Vector3} res.g Gradient, must be allocated and defined if wanted\n */\nElement.prototype.value = function(p,res) {\n    throw \"ERROR : value is an abstract function, should be re-implemented in all primitives(error occured in \" + this.getType() + \" primitive)\";\n    return 0.0;\n};\n\nElement.prototype.numericalGradient = (function(){\n    var tmp = {v:0};\n    var coord = ['x','y','z'];\n    return function(p, res, epsilon) {\n        var eps = epsilon || 0.00001;\n\n        for(var i=0; i<3; ++i){\n            p[coord[i]] = p[coord[i]]+eps;\n            this.value(p,tmp);\n            res[coord[i]] = tmp.v;\n            p[coord[i]] = p[coord[i]]-2*eps;\n            this.value(p,tmp);\n            res[coord[i]] = (res[coord[i]]-tmp.v)/(2*eps);\n            p[coord[i]] = p[coord[i]]+eps; // reset p\n        }\n    }\n})();\n\n/**\n *  @abstract\n *  Get the Area object.\n *  Area objects do provide methods useful when rasterizing, raytracing or polygonizing\n *  the area (intersections with other areas, minimum level of detail needed to\n *  capture the feature nicely, etc etc...).\n *  @return {Array.<Object>} The Areas object corresponding to the node/primitive, in an array\n *\n */\nElement.prototype.getAreas = function() {\n    return [];\n};\n\n/**\n *  @abstract\n *  This function is called when a point is outside of the potential influence of a primitive/node.\n *  @return {number} The next step length to do with respect to this primitive/node\n */\nElement.prototype.distanceTo = function(p) {\n    throw \"ERROR : distanceTo is a virtual function, should be re-implemented in all primitives(error occured in \" + this.getType() + \" primitive)\";\n    return 0.5;\n};\n\n/**\n *  @abstract\n *  This function is called when a point is within the potential influence of a primitive/node.\n *  @return {number} The next step length to do with respect to this primitive/node.\n */\nElement.prototype.heuristicStepWithin = function() {\n    throw \"ERROR : heuristicStepWithin is a virtual function, should be re-implemented in all primitives(error occured in \" + this.getType() + \" primitive)\";\n    return 0.1;\n};\n\n/**\n *  Trim the tree to keep only nodes influencing a given bounding box.\n *  The tree must be prepared for eval for this process to be working.\n *  Default behaviour is doing nothing, leaves cannot be sub-trimmed, only nodes.\n *  Note : only the root can untrim\n *\n *  @param {THREE.Box3} aabb\n *  @param {Array.<Blobtree.Element>} trimmed Array of trimmed Elements\n *  @param {Array.<Blobtree.Node>} parents Array of fathers from which each trimmed element has been removed.\n */\nElement.prototype.trim = function(aabb, trimmed, parents){\n\n};\n\n/**\n *  count the number of elements of class cls in this node and subnodes\n *  @param {Object} cls the class of the elements we want to count\n *  @return {number}\n */\nElement.prototype.count = function(cls){\n    return 0;\n};\n\nmodule.exports = Element;\n\n\n","'use strict';\n\nconst Element = require('./Element.js');\nconst Types = require(\"./Types.js\");\n\n/**\n *  This class implements an abstract Node class for implicit blobtree.\n *  @constructor\n *  @extends {Element}\n */\nvar Node = function ()\n{\n    Element.call(this);\n\n    /** @type {Array.<!Element>} */\n    this.children = [];\n};\n\nNode.prototype = Object.create(Element.prototype);\nNode.prototype.constructor = Node;\n\nNode.type = \"Node\";\nTypes.register(Node.type, Node);\n\nNode.prototype.getType = function(){\n    return Node.type;\n};\n\nNode.prototype.toJSON = function(){\n    var res = Element.prototype.toJSON.call(this);\n    res.children = [];\n    for(var i=0; i<this.children.length; ++i){\n        res.children.push(this.children[i].toJSON());\n    }\n    return res;\n};\n\n/**\n *  Clone current node and itss hierarchy\n */\nNode.prototype.clone = function(){\n    return Types.fromJSON(this.toJSON());\n};\n\n/**\n *  @abstract\n *  Prepare the node and all its children for evaluation.\n *  That means setup all necessary elements for an incoming call to eval.\n *  Important note: For now, a node is considered prepared for eval if and only\n *                  if its bounding box is valid (valid_aabb is true).\n *\n */\nNode.prototype.prepareForEval = function()\n{\n    console.error(\"prepareForEval is a pure virtual function, should be reimplemented in every node class\");\n};\n\n/**\n *  Invalid the bounding boxes recursively down for all children\n */\nNode.prototype.invalidAll = function() {\n    this.invalidAABB();\n    if( this.children ) {\n        for(var i=0; i<this.children.length; i++) {\n            this.children[i].invalidAll();\n        }\n    }\n};\n\n/**\n *  Destroy the node and its children. The node is removed from the blobtree\n *  (basically clean up the links between blobtree elements).\n */\nNode.prototype.destroy = function() {\n    // need to Copy the array since indices will change.\n    var arr_c = this.children.slice(0,this.children.length);\n    for(var i=0; i<arr_c.length; i++) {\n        arr_c[i].destroy();\n    }\n    if(this.children.length !== 0){\n        throw \"Error : children length should be 0\";\n    }\n    if(this.parentNode !== null){\n        this.parentNode.removeChild(this);\n    }\n    if(this.parentNode !== null){\n        throw \"Error : parent node should be null at this point\";\n    }\n    this.children.length = 0;\n};\n\n/**\n *  Only works with nary nodes, otherwise a set function would be more appropriate.\n *  -> TODO : check that if we have something else than n-ary nodes one day...\n *  If c already belongs to the tree, it is removed from its current parent\n *  children list before anything (ie it is \"moved\").\n *\n *  @param {Element} c The child to add.\n */\nNode.prototype.addChild = function(c)\n{\n    if(c.parentNode !== null){\n        c.parentNode.removeChild(c);\n    }\n    // TODO should ckeck that the node does not already belong to the children list\n    this.children.push(c);\n    c.parentNode = this;\n\n    this.invalidAABB();\n};\n\n/**\n *  Only works with n-ary nodes, otherwise order matters and we therefore\n *  have to set \"null\" and node cannot be evaluated.\n *  -> TODO : check that if we have something else than n-ary nodes one day...\n *  WARNING:\n *      Should only be called when a Primitive is deleted.\n *      Otherwise :\n *          To move a node to another parent : use addChild.\n *  @param {Element} c The child to remove.\n */\nNode.prototype.removeChild = function(c)\n{\n    var i=0;\n    var cdn = this.children; // minimize the code\n\n    // Note : if this becomes too long, sort this.children using ids\n    while(cdn[i]!==c && i<cdn.length) ++i;\n\n    if(i != cdn.length){\n        cdn[i] = cdn[cdn.length-1];\n        cdn.pop();\n    }else{\n        throw \"c does not belong to the children of this node\";\n    }\n\n    this.invalidAABB();\n\n    c.parentNode = null;\n};\n\n// Abstract\nNode.prototype.computeAABB = function() {\n    this.aabb.makeEmpty();\n    for (var i=0; i<this.children.length; i++) {\n        this.children[i].computeAABB();\n        this.aabb.union(this.children[i].getAABB());\n    }\n};\n\n// Abstract\nNode.prototype.getAreas = function() {\n    if(!this.valid_aabb){\n        throw \"Error : cannot call getAreas on a not prepared for eval nod, please call PrepareForEval first. Node concerned is a \" + this.getType();\n    }\n    var res = [];\n    for (var i=0; i<this.children.length; i++) {\n        res.push.apply(res,this.children[i].getAreas());\n    }\n    return res;\n};\n\n// Abstract\nNode.prototype.distanceTo = function(p) {\n    var res = 10000000;\n    for (var i=0; i<this.children.length; i++) {\n        res = Math.min(res,this.children[i].distanceTo(p));\n    }\n    return res;\n};\n\n// Abstract\nNode.prototype.heuristicStepWithin = function() {\n    var res = 10000000;\n    for (var i=0; i<this.children.length; i++) {\n        res = Math.min(res,this.children[i].heuristicStepWithin());\n    }\n    return res;\n};\n\n// [Abstract]\nNode.prototype.trim = function(aabb, trimmed, parents)\n{\n    var idx = trimmed.length;\n    for (var i=0; i<this.children.length; i++) {\n        if(!this.children[i].getAABB().intersectsBox(aabb)){\n            // trim the node\n            trimmed.push(this.children[i]);\n            parents.push(this);\n        }\n    }\n    for(var i=idx; i<trimmed.length; ++i){\n        this.removeChild(trimmed[i]);\n    }\n    // Trim remaining nodes\n    for (var i=0; i<this.children.length; i++) {\n        this.children[i].trim(aabb,trimmed,parents);\n    }\n};\n\n// [Abstract]\nNode.prototype.count = function(cls){\n    var count = 0;\n\n    if( this instanceof cls ) {\n        count++;\n    }\n\n    for (var i=0; i<this.children.length; i++) {\n        count += this.children[i].count(cls);\n    }\n\n    return count;\n};\n\nmodule.exports = Node;\n\n\n","/**\n * @author Maxime Quiblier\n *\n */\n\n'use strict';\n\nconst THREE = require(\"three\");\n\nvar Convergence = {};\n\n// Limitations: 3D only, but can easily be rewritten for nD\n// The algorithm stops when :\n// - 2 consecutive steps are smaller than epsilon\n// - OR n_max_step is reached\n// Optimization roads :\n//      - 2 small steps may be too much, only 1 could be enough in most cases isn't it?\n// @todo write documentation to talk about failure cases.\n//\n// Variable used in function. This avoid reallocation.\n    Convergence.last_mov_pt = new THREE.Vector3();\n    Convergence.grad = new THREE.Vector3();\n    Convergence.eval_res_g = new THREE.Vector3(0,0,0);\n    Convergence.eval_res = {v:0, g:null};\n    Convergence.vec = new THREE.Vector3();\n\nConvergence.safeNewton3D = function(    pot,              // Scalar Field to eval\n                                        starting_point,   // 3D point where we start, must comply to THREE.Vector3 API\n                                        value,            // iso value we are looking for\n                                        epsilon,          // Geometrical limit to stop\n                                        n_max_step,       // limit of number of step\n                                        r_max,            // max distance where we look for the iso\n                                        //bounding_v,       // Bounding volume inside which we look for the iso, getting out will make the process stop.\n                                        res               // the resulting point\n                                        )\n{\n        res.copy(starting_point);\n\n        var i = 1;\n        var consecutive_small_steps = 0;\n        var broken = false;\n        while( consecutive_small_steps != 2 && i<=n_max_step && !broken)\n        {\n            this.last_mov_pt.copy(res);\n\n            this.eval_res.g = this.eval_res_g; // active gradient computation\n            pot.value(res,this.eval_res) ;\n\n            this.grad.copy(this.eval_res.g);\n            if(this.grad.x !== 0.0 || this.grad.y !== 0.0 || this.grad.z !== 0.0 )\n            {\n                var g_l = this.grad.length();\n                var step = (value-this.eval_res.v)/g_l;\n                if(step < epsilon && step > -epsilon)\n                {\n                    if(step>0.0)\n                    {\n                        step = epsilon/g_l;\n                    }\n                    else\n                    {\n                        step = -epsilon/g_l;\n                    }\n                    consecutive_small_steps++;\n                }\n                else\n                {\n                    consecutive_small_steps = 0;\n                }\n                this.grad.normalize().multiplyScalar(step);\n                res.add(this.grad);\n\n                // If the newton step took us out of the bounding volume, we have to stop\n                //if(!bounding_v.containsPoint(res))\n                if( this.vec.subVectors(res,starting_point).lengthSq() > r_max*r_max)\n                {\n                    res.copy(starting_point);\n                    return;\n                }\n\n                /*\n                if( this.vec.subVectors(res,starting_point).lengthSq() > r_max*r_max)\n                {\n                    this.eval_res.g = null; // deactive gradient computation\n                    var current_val = this.eval_res.v;\n                    pot.value(res,this.eval_res);\n                    if( (this.eval_res.v-value)*(current_val-value) < 0.0)   // can only use dichotomy if one point is inside and one outside among (res and last_mov_pt)\n                    {\n                        res.add(this.last_mov_pt);\n                        res.multiplyScalar(0.5);\n                    }\n                    else\n                    {\n                        // In this case we have no clue what to do, so just break...\n                        broken = true;\n                    }\n                }\n                */\n            }\n            else\n            {\n                broken = true;\n            }\n\n            ++i;\n        }\n\n        if(broken){\n            // return strating_point\n            res.copy(starting_point);\n            return;\n        }\n\n        /*\n        if(broken){\n\n            this.eval_res.g = null; // deactive gradient computation\n\n            // Check the point between last_moving_point and starting_point which is closest to the surface and return it.\n            pot.value(this.last_mov_pt,this.eval_res);\n            var ev_last_mov_pt = this.eval_res.v;\n            pot.value(starting_point,this.eval_res);\n            var ev_st_pt = this.eval_res.v;\n            if( Math.abs(ev_last_mov_pt-value) > Math.abs(starting_point-value) )\n            {\n                res.copy(starting_point);\n                return;\n            }\n            else\n            {\n                res.copy(this.last_mov_pt);\n                return;\n            }\n        }\n        */\n};\n\n\n/** \\brief This algorithm uses Newton convergence to find a point epsilon close to\n*        a point \"p\" such that the given potential \"pot\" evaluated at \"p\" is \"value\".\n*        The search is constrained on line defined by (origin, search_dir), and between bounds\n*        defined by min_absc and max_absc which are the abscissae on the line with respect\n*        to origin and search_dir. search_dir should be normalized.\n*        The starting point is given with an abscissa : origin + starting_point_absc*search_dir\n*\n*   \\param pot\n*   \\param origin Point choosen as origin in the search line frame.\n*   \\param search_dir unit vector that, together with origin, defines the searching line\n*   \\param min_absc Minimum abscissa on the line : the algorithm will not search for a point below this abscissa.\n*   \\param max_absc Maximum abscissa on the line : the algorithm will not search for a point above this abscissa.\n*   \\param starting_point_absc Abscissa of the starting point, with respect to the search dir.\n*   \\param value The potential value we are looking for on the line with respect to pot.Eval(..)\n*   \\param epsilon We want the result to be at least epsilon close to the surface with respect to the\n*                   distance Vector.norm(), we suppose this norm to be the one associated with the dot product Vector.operator |\n*   \\param n_max_step Maximum of newton step before giving up.\n*\n*    \\return true if a point p such that |pot.Eval(p) - value| < epsilon was found.\n*           false and the current searching point otherwise.\n*\n*\n*   @todo write documentation to talk about failure cases.\n*   @todo Should not normalise search_dir. Change that here and in all part of code where this is used.\n*/\nConvergence.safeNewton1D = function(\n                                        pot,\n                                        origin,\n                                        search_dir_unit,\n                                        min_absc_inside,\n                                        max_absc_outside,\n                                        starting_point_absc,\n                                        value,\n                                        epsilon,\n                                        n_max_step,\n                                        res // resulting point res.p and gradient res.g (if res.g defined) resulting absc in res.p_absc\n                                        )\n{\n    this.eval_res.g = this.eval_res_g; // active gradient computation\n\n    if( !(search_dir_unit.x !== 0.0 || search_dir_unit.y !== 0.0 || search_dir_unit.z !== 0.0) ){\n        throw \"Error : search direction is null\";\n    }\n    if(epsilon<=0){\n        throw \"Error: epsilon <= 0, convergence will nuke your face or loop\";\n    }\n    if(starting_point_absc<min_absc_inside || starting_point_absc>max_absc_outside){\n        throw \"Error : starting absc is not in boundaries\";\n    }\n\n    var curr_point_absc = starting_point_absc;\n    var curr_field_value = 0;    // contain the field value at curr_point\n    var eval_pt = new THREE.Vector3();\n\n    // Newton step until we overpass the surface\n    // the minimum step is set to epsilon, that ensure we will cross the surface.\n    var grad = 0;\n    var step = 0;\n    var i = 0;\n    while( max_absc_outside - min_absc_inside > epsilon && i < n_max_step)\n    {\n        // curr_point_absc is guaranteed inside [min_absc_inside,max_absc_outside]\n        pot.value(  eval_pt.copy(search_dir_unit).multiplyScalar(curr_point_absc).add(origin),\n                    this.eval_res) ;\n        // update bounding absc\n        if(this.eval_res.v > value)\n        {\n            min_absc_inside = curr_point_absc;\n        }\n        else\n        {\n            max_absc_outside = curr_point_absc;\n        }\n\n        // Analytical gradient evaluation + dot product should be less than 2 evaluations in cost.\n        grad = this.eval_res.g.dot(search_dir_unit);\n        if(grad !== 0.0)\n        {\n            step = (value-this.eval_res.v)/grad;\n            curr_point_absc += step;\n\n            // Dichotomy step\n            if(curr_point_absc >= max_absc_outside || curr_point_absc <= min_absc_inside)\n            {\n                curr_point_absc = (max_absc_outside+min_absc_inside)*0.5;\n            }\n\n        }\n        else\n        {\n            // Dichotomy step\n            curr_point_absc = (max_absc_outside+min_absc_inside)*0.5;\n        }\n\n        ++i;\n    }\n\n    res.p_absc = (max_absc_outside+min_absc_inside)*0.5; // approximate\n    res.p.copy(search_dir_unit).multiplyScalar(curr_point_absc).add(origin);\n    if(res.g !== undefined){\n        if(i===0){\n            pot.value(  res.p,\n                        this.eval_res) ;\n        }\n        res.g.copy(this.eval_res.g);\n    }\n};\n\nConvergence.dichotomy1D = function(\n                                        pot,\n                                        origin,\n                                        search_dir_unit,\n                                        startStepLength,\n                                        value,\n                                        epsilon,\n                                        n_max_step, // TODO : Useless, since dichotomia is absolutely determinist, n step is startStepLength/(2^n) accuracy...\n                                                    //        OR epsilon is the one useless...\n                                        res // resulting point res.p and gradient res.g (if res.g defined) resulting absc in res.p_absc\n                                        )\n{\n\n    this.eval_res.g = null; // deactive gradient computation\n\n    var previousPos = new THREE.Vector3().copy(origin);\n    var currentStep = new THREE.Vector3();\n    // intersection\n    // dichotomia: first step is going back half of the previous distance\n    startStepLength /= 2;\n    var dist = -startStepLength;\n    var previousDist = dist;\n    origin.sub(\n        currentStep.copy(search_dir_unit)\n            .multiplyScalar(startStepLength));\n    var nstep = 0;\n    while((startStepLength > epsilon) && (nstep < n_max_step))\n    {\n        nstep++;\n        previousPos.copy(origin);\n        previousDist=dist;\n\n        startStepLength/=2;\n        // not asking for the next step, which is always half of previous\n        pot.value(\n            origin,\n            this.eval_res);\n\n        if (this.eval_res.v < value)\n        {\n            // before the surface: go forward\n            origin.add(\n                currentStep.copy(search_dir_unit)\n                    .multiplyScalar(startStepLength));\n            dist+=startStepLength;\n        }\n        else\n        {\n            // after the surface: go backward\n            origin.sub(\n                currentStep.copy(search_dir_unit)\n                    .multiplyScalar(startStepLength));\n            dist-=startStepLength;\n        }\n    }\n    // linear interpolation with previous pos\n    res.p.copy(origin.add(previousPos).divideScalar(2));\n    res.p_absc = (previousDist + dist)/2;\n\n    // linear interpolation with previous pos\n    res.p.copy(origin);\n    res.p_absc = dist;\n\n    // test wether the caller wanted to compute the gradient\n    // (we assume that if res.g is defined, it's a request)\n    if (res.g)\n    {\n        this.eval_res.g = this.eval_res_g; // active gradient computation\n        pot.value(\n            res.p,\n            this.eval_res);\n        res.g.copy(this.eval_res.g);\n    }\n\n};\n\nmodule.exports = Convergence;\n","'use strict';\n\nconst THREE = require(\"three\");\n\n/**\n *  Material object for blobtree. It is an internal material, that should especially\n *  be used in implicit elements. It is the internal representation of the material,\n *  not the openGL material that will be used for display.\n *  @constructor\n *\n *  @param {!Object} params Parameters for the material. As a dictionary to be easily extended later.\n *\n *  @param {THREE.Color?}   params.color        Base diffuse color for the material.\n *                                              Defaults to #aaaaaa\n *\n *  @param {number?}        params.roughness    Roughness for the material.\n *                                              Defaults to 0.\n *\n *  @param {number?}        params.metalness    Metalness aspect of the material, 1 for metalness, 0 for dielectric.\n *                                              Defaults to 0.\n *\n *  @param {THREE.Color?} params.emissive       Emissive color for the material.\n *                                              Defaults to pitch black. (no light emission)\n */\nvar Material = function (params) {\n\n    params = params || {};\n\n    if(arguments[1] !== undefined){\n        throw \"Error : Blobtree Material now takes only 1 argument.\";\n    }\n\n    this.color = new THREE.Color(params.color !== undefined ? params.color : 0xaaaaaa);\n    this.roughness = params.roughness !== undefined ? params.roughness : 0;\n    this.metalness = params.metalness !== undefined ? params.metalness : 0;\n    this.emissive = new THREE.Color( params.emissive !== undefined ? params.emissive : 0x000000 );\n\n};\n\nMaterial.prototype.toJSON = function()\n{\n    return {\n        color: \"#\" + this.color.getHexString(),\n        roughness: this.roughness,\n        metalness: this.metalness,\n        emissive: `#${this.emissive.getHexString()}`\n    };\n};\n\nMaterial.fromJSON = function(json)\n{\n    return new Material({\n        color: new THREE.Color( json.color ),\n        roughness: json.roughness,\n        metalness: json.metalness,\n        emissive: json.emissive, // If undefined, will default to pitch black. If not, will load the hex string.\n    });\n};\n\n/**\n *  Return a clone of the material\n *  @return {!Material} The new material\n */\nMaterial.prototype.clone = function()\n{\n    return new Material({\n        color: this.color,\n        roughness: this.roughness,\n        metalness: this.metalness,\n        emissive: this.emissive,\n    });\n};\n\n/**\n *  Copy the given material parameters\n *  @param {!Material} mat Material to be copied\n */\nMaterial.prototype.copy = function(mat)\n{\n    this.color.copy(mat.color);\n    this.roughness = mat.roughness;\n    this.metalness = mat.metalness;\n    this.emissive.copy( mat.emissive );\n};\n\n/**\n *  @deprecated Use setParams instead\n *  Set Material parameters at once. DEPRECATED. Use setParams\n *  @param {THREE.Color!} c Color\n *  @param {number!} r roughness\n *  @param {number!} m Metalness\n */\nMaterial.prototype.set = function(c, r, m)\n{\n    this.color.copy(c);\n    this.roughness = r;\n    this.metalness = m;\n};\n\n/**\n *  Set Material parameters (all or just some)\n *\n *  @param {!Object} params Parameters for the material. As a dictionary to be easily extended later.\n *  @param {THREE.Color?}   params.color        Base diffuse color for the material.\n *  @param {number?}        params.roughness    Roughness for the material.\n *  @param {number?}        params.metalness    Metalness aspect of the material, 1 for metalness, 0 for dielectric.\n *  @param {THREE.Color?} params.emissive       Emissive color for the material.\n */\nMaterial.prototype.setParams = function (params)\n{\n    this.color.copy(params.color ? params.color : this.color);\n    this.roughness = params.roughness !== undefined ? params.roughness : this.roughness;\n    this.metalness = params.metalness !== undefined ? params.metalness : this.metalness;\n    this.emissive.copy( params.emissive !== undefined ? params.emissive : this.emissive );\n};\n\n/** @return {THREE.Color} */\nMaterial.prototype.getColor = function()       { return this.color;    };\n\n/** @return {number} */\nMaterial.prototype.getRoughness = function()   { return this.roughness;};\n\n/** @return {number} */\nMaterial.prototype.getMetalness = function()  { return this.metalness;  };\n\n/** @return {THREE.Color} */\nMaterial.prototype.getEmissive = function() { return this.emissive; }\n\n\nMaterial.prototype.equals = function(m)  {\n    return this.color.equals(m.color) &&\n        this.metalness=== m.metalness &&\n        this.roughness === m.roughness &&\n        this.emissive.equals( m.emissive );\n};\n\n/**\n *  Perform a linear interpolation between this material and a given other.\n * (1-s)*this + s*m = this +(m1-this)*s\n *  @param {!Material} m The material to interpolate with this\n *  @param {number} s the interpolation coefficient\n */\nMaterial.prototype.lerp = function(m,s)\n{\n    this.color.lerp(m.color,s);\n    this.roughness = (1-s)*this.roughness + s*m.roughness;\n    this.metalness = (1-s)*this.metalness + s*m.metalness;\n    this.emissive.lerp( m.emissive, s );\n};\n/**\n *  Used in triangles (ok it's specific, still we need it :)\n *  Linear interpolation over a triangle? Store the result in this\n *  @param {!Material} m1 The material of first corner\n *  @param {!Material} m2 The material of second corner\n *  @param {!Material} m3 The material of third corner\n *  @param {number} a1 the interpolation coefficient 1\n *  @param {number} a2 the interpolation coefficient 2\n *  @param {number} a3 the interpolation coefficient 3\n *  @param {number} denum Normalizing the result (division)\n *  @return {Material} this\n */\nMaterial.prototype.triMean = function(m1,m2,m3,a1,a2,a3,denum)\n{\n    this.color.r = (a1*m1.color.r + a2*m2.color.r + a3*m3.color.r)/denum;\n    this.color.g = (a1*m1.color.g + a2*m2.color.g + a3*m3.color.g)/denum;\n    this.color.b = (a1*m1.color.b + a2*m2.color.b + a3*m3.color.b)/denum;\n\n    this.roughness = (a1*m1.roughness + a2*m2.roughness + a3*m3.roughness)/denum;\n\n    this.metalness = (a1*m1.metalness + a2*m2.metalness + a3*m3.metalness)/denum;\n\n    this.emissive.r = (a1*m1.emissive.r + a2*m2.emissive.r + a3*m3.emissive.r)/denum;\n    this.emissive.g = (a1*m1.emissive.g + a2*m2.emissive.g + a3*m3.emissive.g)/denum;\n    this.emissive.b = (a1*m1.emissive.b + a2*m2.emissive.b + a3*m3.emissive.b)/denum;\n\n    return this;\n};\n\n/**\n *  Perform a weighted mean over several materials and set to this.\n *  Note that m_arr.length must equals v_arr.length\n *  @param {Array.<!Material>} m_arr Array of materials\n *  @param {Array.<number>|Float32Array} v_arr Array of values being the corresponding weights\n *  @param {number=} n Can be set if you want to mean only the n first element of the arrays\n */\nMaterial.prototype.weightedMean = function(m_arr,v_arr, n)\n{\n    this.color.setRGB(0,0,0);\n    this.roughness = 0;\n    this.metalness = 0;\n    this.emissive.setScalar( 0 );\n    const l = (n === undefined) ? m_arr.length : n;\n    let sum_v = 0.0;\n\n    for ( let i = 0; i < l; ++ i ) {\n\n        this.color.r += v_arr[i]*m_arr[i].color.r;\n        this.color.g += v_arr[i]*m_arr[i].color.g;\n        this.color.b += v_arr[i]*m_arr[i].color.b;\n        this.roughness += v_arr[i]*m_arr[i].roughness;\n        this.metalness += v_arr[i]*m_arr[i].metalness;\n        this.emissive.r += v_arr[i]*m_arr[i].emissive.r;\n        this.emissive.g += v_arr[i]*m_arr[i].emissive.g;\n        this.emissive.b += v_arr[i]*m_arr[i].emissive.b;\n        sum_v += v_arr[i];\n\n    }\n\n    if(sum_v !== 0){\n        this.color.r /= sum_v;\n        this.color.g /= sum_v;\n        this.color.b /= sum_v;\n        this.roughness /= sum_v;\n        this.metalness /= sum_v;\n        this.emissive.r /= sum_v;\n        this.emissive.g /= sum_v;\n        this.emissive.b /= sum_v;\n    }else{\n        this.color.setScalar( 0 );\n        this.roughness = 0;\n        this.metalness = 0;\n        this.emissive.setScalar( 0 );\n    }\n\n    return this;\n};\n\n// Other static functions\n/**\n *  Compare arrays of materials.\n *\n *  @deprecated\n *\n *  @param {Array.<Material>} arr1\n *  @param {Array.<Material>} arr2\n *  @param {Array.<Material>=} arr3\n *  @param {Array.<Material>=} arr4\n *  @param {Array.<Material>=} arr5\n *\n *  @return {boolean} true if and only if all arguments are arrays of the same length and containing the same material values.\n */\nMaterial.areEqualsArrays = function(arr1, arr2, arr3, arr4, arr5){\n\n    console.warn(\"Material.areEqualsArrays is deprecated, please use your own comparison function using Material.equals.\");\n\n    var res = true;\n    // check for nullity\n    for (var i = 1; i < arguments.length; i++) {\n        res = res && ((arr1 === null && arguments[i]===null) || (arr1 !== null && arguments[i]!==null));\n    }\n    if(!res){return res;} // Case : at least one arr is null but not all\n\n    if(arr1 === null){return true;} // case all null\n\n    for (var i = 1; i < arguments.length; i++) {\n        var equals = true;\n        if(arguments[i].length !== arr1.length){\n            return false;\n        }\n        for(var k=0; k<arr1.length; ++k){\n            equals = equals && arr1[k].equals(arguments[i][k]);\n        }\n        res = res && equals;\n    }\n    return res;\n};\n\nMaterial.defaultMaterial = new Material();\n\nmodule.exports = Material;\n\n\n\n\n\n\n","\"use strict\";\n\nconst THREE = require(\"three\");\nconst Types = require(\"./Types.js\");\nconst Node = require(\"./Node.js\");\nconst Convergence = require(\"../utils/Convergence.js\");\nconst Material = require(\"./Material.js\");\n\n/**\n *  This class implement a n-ary blend node which use a Ricci Blend.\n *  Ricci blend is : v = k-root( Sum(c.value^k) ) for all c in node children.\n *  Return 0 in regioin were no primitive is present.\n *  @constructor\n *  @extends Node\n *\n *  @param {number} ricci_n The value for ricci\n *  @param {Array.<Node>} children The children to add to this node. Just a convenient parameter, you can do it manually using addChild\n */\nvar RicciNode = function (ricci_n, children) {\n\n    Node.call(this);\n\n    this.ricci_n = ricci_n;\n\n    if(children){\n        var self = this;\n        children.forEach(function(c){\n            self.addChild(c);\n        });\n    }\n\n    // Tmp vars to speed up computation (no reallocations)\n    this.tmp_v_arr = new Float32Array(0);\n    this.tmp_m_arr = new Array(0);\n\n    // temp vars to speed up evaluation by avoiding allocations\n    this.tmp_res = {v:0,g:null,m:null};\n    this.tmp_g = new THREE.Vector3();\n    this.tmp_m = new Material();\n};\n\nRicciNode.prototype = Object.create( Node.prototype );\nRicciNode.prototype.constructor = RicciNode;\n\nRicciNode.type = \"RicciNode\";\nTypes.register(RicciNode.type, RicciNode);\n\nRicciNode.prototype.getType = function(){\n    return RicciNode.type;\n};\n\nRicciNode.prototype.toJSON = function(){\n    var res = Node.prototype.toJSON.call(this);\n    res.ricci = this.ricci_n;\n\n    return res;\n};\nRicciNode.fromJSON = function(json){\n    var res = new RicciNode(json.ricci);\n    for(var i=0; i<json.children.length; ++i){\n        res.addChild(Types.fromJSON(json.children[i]));\n    }\n    return res;\n};\n\n// [Abstract] see Node for a complete description\nRicciNode.prototype.prepareForEval = function()\n{\n    if(!this.valid_aabb){\n        this.aabb = new THREE.Box3();  // Create empty BBox\n        for(var i=0; i<this.children.length; ++i){\n            var c = this.children[i];\n            c.prepareForEval();\n            this.aabb.union(c.getAABB());     // new aabb is computed according to remaining children aabb\n        }\n\n        this.valid_aabb = true;\n\n        // Prepare tmp arrays\n        if(this.tmp_v_arr.length<this.children.length){\n            this.tmp_v_arr = new Float32Array(this.children.length*2);\n            this.tmp_m_arr.length = this.children.length*2;\n            for(var i=0; i<this.tmp_m_arr.length; ++i){\n                this.tmp_m_arr[i] = new Material({roughness:0, metalness:0});\n            }\n        }\n    }\n};\n\n// [Abstract] see Node for more details.\nRicciNode.prototype.value = function(p,res)\n{\n    // TODO : check that all bounding box of all children and subchildrens are valid\n    //        This enable not to do it in prim and limit the number of assert call (and string built)\n    var l = this.children.length;\n    var tmp = this.tmp_res;\n    tmp.g = res.g ? this.tmp_g : null;\n    tmp.m = res.m ? this.tmp_m : null;\n\n    // Init res\n    res.v = 0;\n    if(res.m)  {\n        res.m.copy(Material.defaultMaterial);\n    }if(res.g) {\n        res.g.set(0,0,0);\n    }else if (res.step !== undefined) {\n        // that, is the max distance\n        // we want a value that loose any 'min'\n        res.step = 1000000000;\n    }\n\n    if(this.aabb.containsPoint(p) && l !== 0){\n        // arrays used for material mean\n        var v_arr = this.tmp_v_arr;\n        var m_arr = this.tmp_m_arr;\n        var mv_arr_n = 0;\n\n        // tmp var to compute the powered sum before the n-root\n        // Kept for gradient computation\n        var res_vv = 0;\n        for(var i=0; i<l; ++i)\n        {\n            if( this.children[i].aabb.containsPoint(p) ) {\n\n                this.children[i].value(p,tmp);\n                if(tmp.v > 0) // actually just !=0 should be enough but for stability reason...\n                {\n                    var v_pow = Math.pow(tmp.v,this.ricci_n-1.0);\n                    res_vv += tmp.v*v_pow;\n\n                    // gradient if needed\n                    if(res.g) {\n                        tmp.g.multiplyScalar(v_pow);\n                        res.g.add(tmp.g);\n                    }\n                    // material if needed\n                    if(res.m){\n                        v_arr[mv_arr_n] = tmp.v*v_pow;\n                        m_arr[mv_arr_n].copy(tmp.m);\n                        mv_arr_n++;\n                    }\n                    // within primitive potential\n                    if (res.step || res.stepOrtho){\n                        // we have to compute next step or nextStep z\n                        res.step=Math.min(res.step,this.children[i].heuristicStepWithin());\n                    }\n\n                }\n                // outside of the potential for this box, but within the box\n                else {\n                    if (res.step !== undefined) {\n                        res.step=Math.min(res.step,\n                                          this.children[i].distanceTo(p));\n                    }\n\n                }\n            }\n            else if (res.step || res.stepOrtho) {\n                res.step = Math.min(res.step,\n                                  this.children[i].distanceTo(p));\n            }\n        }\n\n        // compute final result using ricci power function\n        res.v = Math.pow(res_vv, 1/this.ricci_n);\n\n        if(res.v !== 0){\n            if(res.g){\n                res.g.multiplyScalar(res.v/res_vv);\n            }\n            if(res.m){\n                res.m.weightedMean(m_arr,v_arr,mv_arr_n);\n            }\n        }\n        // else the default values should be OK.\n    }else if (res.step !== undefined) {\n        if(this.children.length !== 0){\n            var add = this.children[0].heuristicStepWithin();\n            for(var i=1; i<this.children.length; ++i){\n                add = Math.min(add,this.children[i].heuristicStepWithin());\n            }\n            // return distance to aabb such that next time we'll hit from within the aabbb\n            res.step = this.aabb.distanceToPoint(p) + add;\n        }\n    }\n\n    if(res.stepOrtho !== undefined){\n        res.stepOrtho = res.step;\n    }\n};\n\nRicciNode.prototype.setRicciN = function(n)\n{\n    if(this.ricci_n != n){\n        this.ricci_n = n;\n        this.invalidAABB();\n    }\n};\nRicciNode.prototype.getRicciN = function(){\n    return this.ricci_n;\n};\n\nmodule.exports = RicciNode;\n","\"use strict\";\n\nconst THREE = require(\"three\");\nconst Types = require(\"./Types.js\");\nconst RicciNode = require(\"./RicciNode.js\");\n\nconst Convergence = require(\"../utils/Convergence\");\n\n/**\n *  The root of any implicit blobtree. Does behave computationaly like a RicciNode with n = 64.\n *  The RootNode is the only node to be its own parent.\n *  @constructor\n *  @extends RicciNode\n */\nvar RootNode = function() {\n    // Default RootNode is a riccinode with ricci_n = 64 (almost a max)\n    RicciNode.call(this, 64);\n\n    this.valid_aabb = true;\n\n    // Default iso value, value where the surface is present\n    this.iso_value = 1.0;\n\n    // Set some nodes as \"trimmed\", so they are not evaluated.\n    this.trimmed = [];\n    this.trim_parents = [];\n\n};\n\nRootNode.prototype = Object.create(RicciNode.prototype);\nRootNode.prototype.constructor = RootNode;\n\nRootNode.type = \"RootNode\";\nTypes.register(RootNode.type, RootNode);\n\nRootNode.prototype.getType = function(){\n    return RootNode.type;\n};\n\nRootNode.prototype.toJSON = function(){\n    var res = RicciNode.prototype.toJSON.call(this);\n    res.iso = this.iso_value;\n    return res;\n};\nRootNode.fromJSON = function(json){\n    var res = new RootNode(json.ricci);\n    for(var i=0; i<json.children.length; ++i){\n        res.addChild(Types.fromJSON(json.children[i]));\n    }\n    return res;\n};\n\nRootNode.prototype.getIsoValue = function() {\n    return this.iso_value;\n};\nRootNode.prototype.setIsoValue = function(v) {\n    this.iso_value = v;\n};\n/**\n *  @return {number} The neutral value of this tree, ie the value of the field in empty region of space.\n *                   This is an API for external use and future development. For now it is hard set to 0.\n */\nRootNode.prototype.getNeutralValue = function() {\n    return 0;\n};\n\n// [Abstract] see Node.invalidAABB\nRootNode.prototype.invalidAABB = function() {\n    this.valid_aabb = false;\n};\n\n/**\n *  Basically perform a trim but keep track of trimmed elements.\n *  This is usefull if you want to trim, then untrim, then trim, etc...\n *  For example, this is very useful for evaluation optim\n *  @param {THREE.Box3} aabb\n */\nRootNode.prototype.internalTrim = function(aabb)\n{\n    if( !(this.trimmed.length === 0 && this.trim_parents.length === 0) ){\n        throw \"Error : you should not call internal trim if you have not untrimmed before. Call untrim or use externalTrim\";\n    }\n    this.trim(aabb, this.trimmed, this.trim_parents);\n};\n\n/**\n *  Wrapper for trim, will help programmers to make the difference between\n *  internal and external trim.\n *  @param {THREE.Box3} aabb\n *  @param {Array.<Element>} trimmed Array of trimmed Elements\n *  @param {Array.<Node>} parents Array of fathers from which each trimmed element has been removed.\n */\nRootNode.prototype.externalTrim = function(aabb, trimmed, parents){\n    this.trim(aabb, trimmed, parents);\n};\n\n/**\n *  Reset the full blobtree\n */\nRootNode.prototype.internalUntrim = function(){\n    this.untrim(this.trimmed, this.trim_parents);\n    this.trimmed.length = 0;\n    this.trim_parents.length = 0;\n};\n\n/**\n *  Reset the full blobtree given previous trimming data.\n *  Note : don't forget to recall prepareForEval if you want to perform evaluation.\n *  @param {Array.<Element>} trimmed Array of trimmed Elements\n *  @param {Array.<Node>} parents Array of fathers from which each trimmed element has been removed.\n */\nRootNode.prototype.untrim = function(trimmed, parents){\n    if( !(trimmed.length === parents.length) ){\n        throw \"Error : trimmed and parents arrays should have the same length\";\n    }\n    for(var i=0; i<trimmed.length; ++i){\n        parents[i].addChild(trimmed[i]);\n    }\n};\n\n/**\n *  Tell if the blobtree is empty\n *  @return true if blobtree is empty\n */\nRootNode.prototype.isEmpty = function(){\n    return this.children.length == 0;\n};\n\n/**\n *  @param {!THREE.Ray} ray Ray to cast for which intersection is seeked.\n *\n *  @param {Object} res The result of the intersection\n *  @param {number} res.distance distance from ray.origin to intersection point,\n *  @param {THREE.Vector3} res.point: intersection point,\n *  @param {THREE.Vector3} res.g: gradient at intersection, if required.\n *\n *  @param {number} maxDistance If the intersection is not located at a distance\n *                              lower than maxDistance, it will not be considered.\n *                              The smaller this is, the faster the casting will be.\n *  @param {number} precision Distance to the intersection under which we will\n *                            consider to be on the intersection point.\n *\n *  @return {boolean} True if an intersection has been found.\n */\nRootNode.prototype.intersectRayBlob = function()\n{\n    var curPos = new THREE.Vector3();\n    var marchingVector = new THREE.Vector3();\n    var currentStep = new THREE.Vector3();\n\n    var g = new THREE.Vector3();\n    var tmp_res = {\n        v:0,\n        g : g,\n        step:0\n    };\n    var conv_res = {\n        p : new THREE.Vector3(),\n        g : new THREE.Vector3(),\n        p_absc : 0.0\n    };\n    var previousStepLength=0;\n    var previousValue=0; // used for linear interp for a better guess\n    var dist=0;\n    var previousDist=0;\n\n    return function(ray,res,maxDistance,precision) {\n        curPos.copy(ray.origin);\n        marchingVector.copy(ray.direction);\n\n        marchingVector.normalize();\n        dist=0;\n        // compute first value to have next step length\n        tmp_res.g = null;\n        this.value(\n            curPos,\n            tmp_res);\n\n        // march\n        while ((tmp_res.v < this.iso_value) && (dist < maxDistance))\n        {\n            curPos.add(\n                currentStep.copy(marchingVector).multiplyScalar(tmp_res.step)\n            );\n            dist+=tmp_res.step;\n\n            previousStepLength=tmp_res.step;\n            previousValue = tmp_res.v;\n\n            this.value(\n                curPos,\n                tmp_res);\n        }\n        if (tmp_res.v >= this.iso_value)\n        {\n            // Convergence.dichotomy1D(\n                                        // this,\n                                        // curPos,\n                                        // marchingVector,\n                                        // previousStepLength,\n                                        // iso_value,\n                                        // previousStepLength/512.0,\n                                        // 10,\n                                        // conv_res\n                                        // );\n            // res.distance = dist + conv_res.absc;\n\n            Convergence.safeNewton1D(\n                                        this,\n                                        curPos,\n                                        marchingVector.multiplyScalar(-1.0),\n                                        0.0,\n                                        previousStepLength,\n                                        previousStepLength*(this.iso_value-tmp_res.v)/(previousValue-tmp_res.v), // linear approx of the first position\n                                        this.iso_value,\n                                        previousStepLength/512.0, //deltaPix*(dist-previousStepLength), // should be the size of a pixel at the previous curPos BROKEN?\n                                        10,\n                                        conv_res\n                                        );\n            res.distance = dist-conv_res.p_absc;\n\n            res.point = conv_res.p.clone();\n\n            // test wether the caller wanted to compute the gradient\n            // (we assume that if res.g is defined, it's a request)\n            if (res.g)\n            {\n                res.g.copy(conv_res.g);\n            }\n\n            return true;\n        }\n        else\n        {\n            // no intersection\n            return false;\n        }\n    };\n}();\n\n\n/**\n *  Kaiser function for some intersection and raycasting...\n *  Undocumented.\n *  TODO : check, it is probably an optimized intersection for blob intersection\n *         in X, Y or Z directions.\n */\nRootNode.prototype.intersectOrthoRayBlob = function() {\n// curpos and marching vector are only instanciated once,\n// we are using closure method\n    var curPos = new THREE.Vector3();\n    var resumePos = new THREE.Vector3();\n    var tmp_res = {step:0};\n    var g = new THREE.Vector3();\n    var dicho_res = {};\n    var previousStepLength=0;\n    var previousDist=0;\n    // to ensure that we're within the aabb\n    var epsilon = 0.0000001;\n    var within = -1;\n    return function(wOffset,hOffset,res,dim) {\n\n        if (dim.axis.z) {\n            curPos.set(this.aabb.min.x+wOffset,\n                       this.aabb.min.y+hOffset,\n                       this.aabb.min.z+epsilon);\n        }\n        else if (dim.axis.y) {\n            curPos.set(this.aabb.min.x+wOffset,\n                       this.aabb.min.y+epsilon,\n                       this.aabb.min.z+hOffset);\n        }\n        else if (dim.axis.z) {\n            curPos.set(this.aabb.min.x+epsilon,\n                       this.aabb.min.y+wOffset,\n                       this.aabb.min.z+hOffset);\n        }\n\n        // max depth step we can do (has to be set)\n        tmp_res.step= dim.get(this.aabb.max) - dim.get(this.aabb.min);\n\n        this.value(\n            curPos,\n            tmp_res);\n\n        previousStepLength=epsilon;\n\n        within=-1;\n\n        // we're looking for all intersection, we won't stop before that\n        while(dim.get(curPos) < dim.get(this.aabb.max))\n        {\n            // march\n            // the '=0' case is important, otherwise there's an infinite loop\n            while (((tmp_res.v - 1) * within >= 0) && (dim.get(curPos) < dim.get(this.aabb.max)))\n            {\n                // orthographic march\n                // our tmp_res.step is valid as we know it's within the aabb\n                dim.add(curPos,tmp_res.step);\n\n                previousStepLength=tmp_res.step;\n\n                // max depth step we can do (has to be set)\n                tmp_res.step=dim.get(this.aabb.max)-dim.get(curPos);\n                this.value(\n                    curPos,\n                    tmp_res);\n            }\n            // either a sign difference or we're out\n            if(dim.get(curPos) < dim.get(this.aabb.max))\n            {\n                // we ain't out, so it was a sign difference\n                within *= -1;\n                // keep track of our current position in order to resume marching later\n                resumePos.copy(curPos);\n                previousDist=dim.get(curPos);\n\n                // compute intersection\n                // dichotomia: first step is going back half of the previous distance\n                previousStepLength /= 2;\n\n                dim.add(curPos,-previousStepLength);\n\n                // we use dicho_res instead of tmp_res because we need\n                // to keep track of previous results in order to resume later\n\n                // dynamic number of dichotomia step\n                dicho_res.g = null;\n                while(previousStepLength>0.1)\n                {\n                    previousDist=dim.get(curPos);\n                    previousStepLength/=2;\n                    // not asking for the next step, which is always half of previous\n                    this.value(\n                        curPos,\n                        dicho_res);\n\n                    if ((dicho_res.v - 1) * within < 0)\n                        // forward\n                        dim.add(curPos,previousStepLength);\n                    else\n                        // backward\n                        dim.add(curPos,-previousStepLength);\n                }\n                // linear interpolation with previous dist\n                dim.add(curPos,previousDist);\n                dim.divide(curPos,2);\n                // get the gradient\n                dicho_res.g = g;\n                this.value(curPos,\n                           dicho_res);\n                res.push({\n                    point : curPos.clone(),\n                    gradient : dicho_res.g.clone()\n                    // point : curPos\n                });\n                // set variable in order to resume to where we were\n                curPos.copy(resumePos);\n            }\n        }\n    };\n}();\n\nmodule.exports = RootNode;\n","\"use strict\";\n\nconst THREE = require(\"three\");\nconst Types = require(\"./Types.js\");\nconst Node = require(\"./Node.js\");\nconst Convergence = require(\"../utils/Convergence.js\");\nconst Material = require(\"./Material.js\");\n\n/**\n *  This class implement a difference blending node.\n *  The scalar field of the second child of this node will be substracted to the first node field.\n *  The result is clamped to 0 to always keep a positive field value.\n *  @constructor\n *  @extends Node\n *  @param {!Node} node0 The first node\n *  @param {!Node} node1 The second node, its value will be substracted to the node 0 value.\n *  @param {number} alpha Power of the second field : the greater alpha the sharper the difference. Default is 1, must be > 1.\n */\nvar DifferenceNode = function (node0, node1, alpha) {\n\n    Node.call(this);\n\n    this.addChild(node0);\n    this.addChild(node1)\n\n    this.alpha = alpha || 1;\n\n    // For now, this field value is clamped to 0\n    this.clamped = 0.0;\n\n    // Tmp vars to speed up computation (no reallocations)\n    this.tmp_res0 = {v:0, g:new THREE.Vector3(0,0,0), m:new Material()};\n    this.tmp_res1 = {v:0, g:new THREE.Vector3(0,0,0), m:new Material()};\n    this.g0 = new THREE.Vector3();\n    this.m0 = new Material();\n    this.g1 = new THREE.Vector3();\n    this.m1 = new Material();\n\n    this.tmp_v_arr = new Float32Array(2);\n    this.tmp_m_arr = [\n        null,\n        null\n    ];\n\n\n};\n\nDifferenceNode.prototype = Object.create( Node.prototype );\nDifferenceNode.prototype.constructor = DifferenceNode;\n\nDifferenceNode.type = \"DifferenceNode\";\nTypes.register(DifferenceNode.type, DifferenceNode);\n\nDifferenceNode.prototype.getAlpha = function(){\n    return this.alpha;\n};\nDifferenceNode.prototype.setAlpha = function(alpha){\n    if(this.alpha != alpha){\n        this.alpha = alpha;\n        this.invalidAABB();\n    }\n};\n\nDifferenceNode.prototype.toJSON = function(){\n    var res = Node.prototype.toJSON.call(this);\n    res.alpha = this.alpha;\n    return res;\n};\n\nDifferenceNode.fromJSON = function(json){\n    var res = new DifferenceNode();\n    this.children[0] = Types.fromJSON(json.children[0]);\n    this.children[1] = Types.fromJSON(json.children[1]);\n    return res;\n};\n\n// [Abstract] see Node for a complete description\nDifferenceNode.prototype.prepareForEval = function()\n{\n    if(!this.valid_aabb){\n        this.children[0].prepareForEval();\n        this.children[1].prepareForEval();\n        // Bounding box of this node is the same as the one of the positive children,\n        // Since negative values will be clamped to 0.\n        this.aabb.copy(this.children[0].getAABB());\n\n        this.valid_aabb = true;\n    }\n};\n\n// [Abstract] see Node for more details.\nDifferenceNode.prototype.value = function(p,res)\n{\n    var l = this.children.length;\n    var v_arr = this.tmp_v_arr;\n    var m_arr = this.tmp_m_arr;\n\n    var tmp0 = this.tmp_res0;\n    var tmp1 = this.tmp_res1;\n\n    tmp0.g = res.g ? this.g0 : null;\n    tmp0.m = res.m ? this.m0 : null;\n    tmp1.g = res.g ? this.g1 : null;\n    tmp1.m = res.m ? this.m1 : null;\n\n    // Init res\n    res.v = 0;\n    tmp1.v = 0;\n    tmp0.v = 0;\n    if(res.m)  {\n        res.m.copy(Material.defaultMaterial);\n        tmp1.m.copy(Material.defaultMaterial);\n        tmp0.m.copy(Material.defaultMaterial);\n    }if(res.g) {\n        res.g.set(0,0,0);\n        tmp1.g.set(0,0,0);\n        tmp0.g.set(0,0,0);\n    }else if (res.step !== undefined) {\n        // that, is the max distance\n        // we want a value that loose any 'min'\n        res.step = 1000000000;\n    }\n\n    if(this.aabb.containsPoint(p)){\n        if( this.children[0].aabb.containsPoint(p) ) {\n            this.children[0].value(p,tmp0);\n            if( this.children[1].aabb.containsPoint(p) ) {\n                this.children[1].value(p,tmp1);\n            }\n            if( tmp1.v === 0 ){\n                res.v = tmp0.v;\n                if(res.g){\n                    res.g.copy(tmp0.g);\n                }\n                if(res.m){\n                    res.m.copy(tmp0.m);\n                }\n            }else{\n                var v_pow = Math.pow(tmp1.v,this.alpha);\n                res.v = Math.max(this.clamped,tmp0.v - tmp1.v*Math.pow(tmp1.v,this.alpha-1.0));\n                if(res.g){\n                    if(res.v === this.clamped){\n                        res.g.set(0,0,0);\n                    }else{\n                        tmp1.g.multiplyScalar(v_pow);\n                        res.g.subVectors(tmp0.g, tmp1.g);\n                    }\n                }\n                if(res.m){\n                    v_arr[0] = tmp0.v;\n                    v_arr[1] = tmp1.v;\n                    m_arr[0] = tmp0.m;\n                    m_arr[1] = tmp1.m;\n                    res.m.weightedMean(m_arr,v_arr,2);\n                }\n            }\n        }\n    }\n    else if (res.step !== undefined) {\n        // return distance to aabb such that next time we'll hit from within the aabbb\n        res.step = this.aabb.distanceToPoint(p) + 0.3;\n    }\n};\n\n// Trim must be redefined for DifferenceNode since in this node we cannot trim one of the 2 nodes without trimming the other.\nDifferenceNode.prototype.trim = function(aabb, trimmed, parents)\n{\n    // Trim remaining nodes\n    for (var i=0; i<this.children.length; i++) {\n        this.children[i].trim(aabb,trimmed,parents);\n    }\n};\n\nmodule.exports = DifferenceNode;\n","\"use strict\";\n\nconst THREE = require(\"three\");\nconst Types = require(\"./Types.js\");\nconst Node = require(\"./Node.js\");\nconst Convergence = require(\"../utils/Convergence.js\");\nconst Material = require(\"./Material.js\");\n\n/**\n *  This class implement a Min node.\n *  It will return the minimum value of the field of each primitive.\n *  Return 0 in regioin were no primitive is present.\n *  @constructor\n *  @extends Node\n *\n *  @param {Array.<Node>} children The children to add to this node. Just a convenient parameter, you can do it manually using addChild.\n */\nvar MinNode = function (children) {\n\n    Node.call(this);\n\n    if(children){\n        var self = this;\n        children.forEach(function(c){\n            self.addChild(c);\n        });\n    }\n\n    // temp vars to speed up evaluation by avoiding allocations\n    this.tmp_res = {v:0,g:null,m:null};\n    this.tmp_g = new THREE.Vector3();\n    this.tmp_m = new Material();\n\n};\n\nMinNode.prototype = Object.create( Node.prototype );\nMinNode.prototype.constructor = MinNode;\n\nMinNode.type = \"MinNode\";\nTypes.register(MinNode.type, MinNode);\n\nMinNode.prototype.getType = function(){\n    return MinNode.type;\n};\n\nMinNode.fromJSON = function(json){\n    var res = new MinNode();\n    for(var i=0; i<json.children.length; ++i){\n        res.addChild(Types.fromJSON(json.children[i]));\n    }\n    return res;\n};\n\n// [Abstract] see Node for a complete description\nMinNode.prototype.prepareForEval = function()\n{\n    if(!this.valid_aabb){\n        this.aabb = new THREE.Box3();  // Create empty BBox\n        for(var i=0; i<this.children.length; ++i){\n            var c = this.children[i];\n            c.prepareForEval();\n            this.aabb.union(c.getAABB());     // new aabb is computed according to remaining children aabb\n        }\n\n        this.valid_aabb = true;\n    }\n};\n\n// [Abstract] see Node for more details.\nMinNode.prototype.value = function(p,res)\n{\n    // TODO : check that all bounding box of all children and subchildrens are valid\n    //        This enable not to do it in prim and limit the number of assert call (and string built)\n\n    var l = this.children.length;\n    var tmp = this.tmp_res;\n    tmp.g = res.g ? this.tmp_g : null;\n    tmp.m = res.m ? this.tmp_m : null;\n\n    // Init res\n    res.v = 0;\n    if(res.m)  {\n        res.m.copy(Material.defaultMaterial);\n    }if(res.g) {\n        res.g.set(0,0,0);\n    }else if (res.step !== undefined) {\n        // that, is the max distance\n        // we want a value that loose any 'min'\n        res.step = 1000000000;\n    }\n\n    if(this.aabb.containsPoint(p) && l !== 0){\n        res.v = Number.MAX_VALUE;\n        for(var i=0; i<l; ++i)\n        {\n            this.children[i].value(p,tmp);\n            if(tmp.v < res.v){\n                res.v = tmp.v;\n                if(res.g) {\n                    res.g.copy(tmp.g);\n                }\n                if(res.m){\n                    res.m.copy(tmp.m);\n                }\n                // within primitive potential\n                if (res.step || res.stepOrtho){\n                    throw \"Not implemented\";\n                }\n            }\n            res.v = Math.min(res.v,tmp.v);\n        }\n    }\n    else if (res.steo || res.stepOrtho) {\n        throw \"Not implemented\";\n    }\n\n};\n\n// Trim must be redefined for DifferenceNode since in this node we cannot trim one of the 2 nodes without trimming the other.\nMinNode.prototype.trim = function(aabb, trimmed, parents)\n{\n    // Trim remaining nodes\n    for (var i=0; i<this.children.length; i++) {\n        this.children[i].trim(aabb,trimmed,parents);\n    }\n};\n\nmodule.exports = MinNode;\n","'use strict';\n\nconst Element = require(\"./Element.js\");\nconst Types = require(\"./Types.js\");\n\n/**\n *  Represent a blobtree primitive.\n *\n *  @constructor\n *  @extends {Element}\n */\nvar Primitive = function() {\n    Element.call(this);\n\n    /** @type {!Array.<!Material>} */\n    this.materials = [];\n};\n\nPrimitive.prototype = Object.create(Element.prototype);\nPrimitive.prototype.constructor = Primitive;\n\nPrimitive.type = \"Primitive\";\nTypes.register(Primitive.type, Primitive);\n\nPrimitive.prototype.toJSON= function(mats) {\n    var res = Element.prototype.toJSON.call(this);\n    res.materials = [];\n    for(var i=0; i<this.materials.length; ++i){\n        res.materials.push(this.materials[i].toJSON());\n    }\n    return res;\n};\n\n/**\n*  @param {Array.<!Material>} mats Array of materials to set. they will be copied to the primitive materials\n*/\nPrimitive.prototype.setMaterials = function(mats) {\n    if(mats.length !== this.materials.length){\n        throw \"Error : trying to set \" + mats.length + \" materials on a primitive with only \" + this.materials.length;\n    }\n    for(var i=0; i<mats.length; ++i) {\n        if (!mats[i].equals(this.materials[i])) {\n            this.materials[i].copy(mats[i]);\n            this.invalidAABB();\n        }\n    }\n};\n\n/**\n*  @return {Array.<!Material>} Current primitive materials\n*/\nPrimitive.prototype.getMaterials = function() {\n     return this.materials;\n};\n\n// Abstract : default AABB computation for primitive\nPrimitive.prototype.computeAABB = function() {\n    throw \"Primitive.prototype.computeAABB  Must be reimplemented in all inherited class.\";\n};\n\n/**\n *  @abstract\n *  Destroy the current primitive and remove it from the blobtree (basically\n *  clean up the links between blobtree elements).\n */\nPrimitive.prototype.destroy = function() {\n    if(this.parentNode !== null){\n        this.parentNode.removeChild(this);\n    }\n};\n\n// Abstract\nPrimitive.prototype.getAreas = function() {\n    throw \"ERROR : getAreas is an abstract function, should be re-implemented in all primitives(error occured in \" + this.getType() + \" primitive)\";\n    return [];\n};\n\n// Abstract\nPrimitive.prototype.computeHelpVariables = function() {\n    throw \"ERROR : computeHelpVariables is a virtual function, should be re-implemented in all primitives(error occured in \" + this.getType() + \" primitive)\";\n}; // to override\n\n// [Abstract]\nPrimitive.prototype.count = function(cls){\n    return this instanceof cls ? 1 : 0;\n};\n\nmodule.exports = Primitive;\n\n\n","'use strict';\n\n\n/**\n *  @global ScalisMath Contains some maths constant and functions for Scalis primitives.\n *          We use CompactPolynomial6 with 2.0 as Scale. Those parameters will be used by main primitives.\n *  @type {Object}\n *  @property {number} KS Kernel Scale\n *  @property {number} KS2 Kernel Scale Squared\n *  @property {number} KIS2 Kernel Inverse Scale Squared\n *  @property {} Poly6Eval\n */\nvar ScalisMath = {};\n\nScalisMath.KS = 2.0;\nScalisMath.KIS = 1/ScalisMath.KS;\nScalisMath.KS2 = 4.0;\nScalisMath.KIS2 = 1/(ScalisMath.KS*ScalisMath.KS);\n/**\n *  Compact Polynomial of degree 6 evaluation function\n *  @param {number} r Radius (ie distance)\n */\nScalisMath.Poly6Eval = function(r)\n{\n    var aux = 1.0-ScalisMath.KIS2*r*r;\n\n    if(aux > 0.0)\n    {\n        return aux*aux*aux;\n    }else{\n        return 0.0;\n    }\n};\n/**\n *  Compact Polynomial of degree 6 evaluation function from a squared radius.\n *  (avoid square roots in some cases)\n *  @param {number} r2 Radius squared (ie distance squared)\n */\nScalisMath.Poly6EvalSq = function(r2)\n{\n    var aux = 1.0-ScalisMath.KIS2*r2;\n\n    if(aux > 0.0)\n    {\n        return aux*aux*aux;\n    }else{\n        return 0.0;\n    }\n};\n\n/**\n *  Compute the iso value at a given distance for a given polynomial degree\n *  and scale in 0 dimension (point)\n *\n *  @param {number} degree  Polynomial degree of the kernel\n *  @param {number} scale   Kernel scale\n *  @param {number} dist    Distance\n *  @return {number} The iso value at a given distance for a given polynomial degree and scale\n */\nScalisMath.GetIsoValueAtDistanceGeom0D = function(degree, scale, dist)\n{\n    if(degree%2!==0){\n        throw \"degree should be even\";\n    }\n\n    if(dist < scale)\n    {\n        var func_dist_scale = 1.0 - (dist*dist) / (scale*scale);\n        return Math.pow(func_dist_scale, degree/2.0);\n    }\n    else\n    {\n        return 0.0;\n    }\n};\n\n/**\n * @global\n * @type {number} Normalization Factor for polynomial 4 in 0 dimension\n * @const\n */\nScalisMath.Poly4NF0D = 1.0/ScalisMath.GetIsoValueAtDistanceGeom0D(4,ScalisMath.KS,1.0);\n/**\n * @global\n * @type {number} Normalization Factor for polynomial 6 in 0 dimension\n * @const\n */\nScalisMath.Poly6NF0D = 1.0/ScalisMath.GetIsoValueAtDistanceGeom0D(6,ScalisMath.KS,1.0);\n\n/**\n *  Compute the iso value at a given distance for a given polynomial degree\n *  and scale in 1 dimension\n *\n *  @param {number} degree  Polynomial degree of the kernel\n *  @param {number} scale   Kernel scale\n *  @param {number} dist    Distance\n *  @return {number} The iso value at a given distance for a given polynomial degree and scale\n */\nScalisMath.GetIsoValueAtDistanceGeom1D = function (degree, scale, dist)\n{\n    if(degree%2!==0){\n        throw \"degree should be even\";\n    }\n\n    if(dist < scale)\n    {\n        var func_dist_scale = 1.0 - (dist*dist) / (scale*scale);\n        var iso_for_dist = 2.0 * scale * Math.sqrt(func_dist_scale);\n        var k = 0;\n        while(k!=degree)\n        {\n            k += 2;\n            iso_for_dist *= k / (1.0 + k) * func_dist_scale;\n        }\n        return iso_for_dist;\n    }\n    else\n    {\n        return 0.0;\n    }\n};\n/**\n * @global\n * @type {number} Normalization Factor for polynomial 4 in 1 dimension\n * @const\n */\nScalisMath.Poly4NF1D = 1.0/ScalisMath.GetIsoValueAtDistanceGeom1D(4,ScalisMath.KS,1.0);\n/**\n * @global\n * @type {number} Normalization Factor for polynomial 6 in 1 dimension\n * @const\n */\nScalisMath.Poly6NF1D = 1.0/ScalisMath.GetIsoValueAtDistanceGeom1D(6,ScalisMath.KS,1.0);\n\n/**\n *  Compute the iso value at a given distance for a given polynomial degree\n *  and scale in 2 dimensions\n *\n *  @param {number} degree  Polynomial degree of the kernel\n *  @param {number} scale   Kernel scale\n *  @param {number} dist    Distance\n *  @return {number} The iso value at a given distance for a given polynomial degree and scale\n */\nScalisMath.GetIsoValueAtDistanceGeom2D = function (degree, scale, dist)\n{\n    if(dist < scale)\n    {\n        var i_p_2 = degree+2;\n        var func_dist_scale = 1.0 - (dist*dist) / (scale*scale);\n        return (2.0 * Math.PI / i_p_2) * scale*scale * Math.pow(func_dist_scale, i_p_2 * 0.5);\n    }\n    else\n    {\n        return 0.0;\n    }\n};\n/**\n * @global\n * @type {number} Normalization Factor for polynomial 4 in 2 dimension\n * @const\n */\nScalisMath.Poly4NF2D = 1.0/ScalisMath.GetIsoValueAtDistanceGeom2D(4,ScalisMath.KS,1.0);\n/**\n * @global\n * @type {number} Normalization Factor for polynomial 6 in 2 dimension\n * @const\n */\nScalisMath.Poly6NF2D = 1.0/ScalisMath.GetIsoValueAtDistanceGeom2D(6,ScalisMath.KS,1.0);\n\nmodule.exports = ScalisMath;\n\n\n\n\n","'use strict';\n\nconst Types = require(\"../Types.js\");\nconst Primitive = require(\"../Primitive.js\");\n\n/**\n *  Represent an implicit primitive respecting the SCALIS model developped by Cedrric Zanni\n *\n *  @constructor\n *  @extends {Primitive}\n */\nvar ScalisPrimitive = function() {\n    Primitive.call(this);\n\n    // Type of volume (convolution or distance funtion)\n    this.volType = ScalisPrimitive.DIST;\n\n    /** @type {!Array.<!ScalisVertex>}\n     *  @private\n     */\n    this.v = []; // vertex array\n};\n\nScalisPrimitive.DIST = \"dist\";\nScalisPrimitive.CONVOL = \"convol\";\n\nScalisPrimitive.prototype = Object.create(Primitive.prototype);\nScalisPrimitive.prototype.constructor = ScalisPrimitive;\n\nScalisPrimitive.type = \"ScalisPrimitive\";\nTypes.register(ScalisPrimitive.type, ScalisPrimitive);\n\nScalisPrimitive.prototype.getType = function(){\n    return ScalisPrimitive.type;\n};\n\nScalisPrimitive.prototype.toJSON= function() {\n    var res = Primitive.prototype.toJSON.call(this);\n    res.v = [];\n    res.volType = this.volType;\n    for(var i=0; i<this.v.length; ++i){\n        res.v.push(this.v[i].toJSON());\n    }\n    return res;\n};\n\n/**\n *  @abstract Specify if the voltype can be changed\n *  @return {boolean} True if and only if the VolType can be changed.\n */\nScalisPrimitive.prototype.mutableVolType = function() {\n    return false;\n};\n\n/**\n *  @param {string} vt New VolType to set (Only for SCALIS primitives)\n */\nScalisPrimitive.prototype.setVolType = function(vt) {\n    if(vt !== this.volType){\n        this.volType = vt;\n        this.invalidAABB();\n    }\n};\n/**\n *  @return {string} Current volType\n */\nScalisPrimitive.prototype.getVolType = function() {\n    return this.volType;\n};\n\n// Abstract : default AABB computation for ScalisPrimitive\nScalisPrimitive.prototype.computeAABB = function() {\n    this.aabb.makeEmpty();\n    for (var i=0; i<this.v.length; i++) {\n        this.aabb.union(this.v[i].getAABB());\n    }\n};\n\nmodule.exports = ScalisPrimitive;\n\n\n\n\n","\"use strict\";\n\nconst THREE = require(\"three\");\n\nconst ScalisMath = require(\"./ScalisMath.js\");\n\nvar verticesIds = 0;\n\n/**\n *  A scalis ScalisVertex. Basically a point and a wanted thickness.\n *  @constructor\n *  @param {!THREE.Vector3} pos A position in space, as a THREE.Vector3\n *  @param {number} thickness Wanted thickness at this point. Misnamed parameter : this is actually half the thickness.\n */\nvar ScalisVertex = function(pos, thickness) {\n    this.pos       = pos.clone();\n    this.thickness = thickness;\n\n    // Only used for quick fix Zanni Correction. Should be removed as soon as it's not useful anymore.\n    this.id = verticesIds++;\n\n    // The primitive using this vertex\n    this.prim = null;\n\n    this.aabb = new THREE.Box3();\n    this.valid_aabb = false;\n};\n\n/**\n *  Set an internal pointer to the primitive using this vertex.\n *  Should be called from primitive constructor.\n */\nScalisVertex.prototype.setPrimitive = function(prim){\n    if(this.prim === null){\n        this.prim = prim;\n    }\n};\n\nScalisVertex.prototype.toJSON = function() {\n    return {\n        position:{\n            x:this.pos.x,\n            y:this.pos.y,\n            z:this.pos.z\n        },\n        thickness:this.thickness\n    };\n};\nScalisVertex.fromJSON = function(json) {\n    return new ScalisVertex(new THREE.Vector3(json.position.x,json.position.y,json.position.z), json.thickness);\n};\n\n/**\n *  Set a new position.\n *  @param {!THREE.Vector3} pos A position in space, as a THREE.Vector3\n */\nScalisVertex.prototype.setPos = function(pos) {\n    this.valid_aabb = false;\n    this.pos.copy(pos);\n    this.prim.invalidAABB();\n};\n\n/**\n *  Set a new thickness\n *  @param {number} thickness The new thickness\n */\nScalisVertex.prototype.setThickness = function(thickness) {\n    this.valid_aabb = false;\n    this.thickness = thickness;\n    this.prim.invalidAABB();\n};\n\n/**\n *  Set a both position and thickness\n *  @param {number} thickness The new thickness\n *  @param {!THREE.Vector3} pos A position in space, as a THREE.Vector3\n */\nScalisVertex.prototype.setAll = function(pos, thickness)\n{\n    this.valid_aabb = false;\n    this.pos = pos;\n    this.thickness = thickness;\n    this.prim.invalidAABB();\n};\n\n/**\n *  Get the current position\n *  @return {!THREE.Vector3} Current position, as a THREE.Vector3\n */\nScalisVertex.prototype.getPos = function() {\n    return this.pos;\n};\n\n/**\n *  Get the current Thickness\n *  @return {number} Current Thickness\n */\nScalisVertex.prototype.getThickness = function() {\n    return this.thickness;\n};\n\n/**\n *  Get the current AxisAlignedBoundingBox\n *  @return {THREE.Box3} The AABB of this vertex.\n */\nScalisVertex.prototype.getAABB = function() {\n    if (!this.valid_aabb) {\n        this.computeAABB();\n        this.valid_aabb = true;\n    }\n    return this.aabb;\n};\n\n/**\n *  Compute the current AABB.\n *  @protected\n */\nScalisVertex.prototype.computeAABB = function() {\n    var pos = this.getPos();\n    var boundSupport = this.getThickness()*ScalisMath.KS;\n    this.aabb.set(new THREE.Vector3(\n                    pos.x-boundSupport,\n                    pos.y-boundSupport,\n                    pos.z-boundSupport\n                  ),\n                  new THREE.Vector3(\n                      pos.x+boundSupport,\n                      pos.y+boundSupport,\n                      pos.z+boundSupport\n                  )\n    );\n};\n\n/**\n *  Check equality between 2 vertices\n *  @return {boolean}\n */\nScalisVertex.prototype.equals = function(other) {\n    return this.pos.equals(other.pos) && this.thickness === other.thickness;\n};\n\nmodule.exports = ScalisVertex;\n\n"," 'use strict';\n\n/**\n *  Bounding area for a primitive\n *  It is the same for DIST and CONVOL primitives since the support of the convolution\n *  kernel is the same as the support for the distance field.\n *\n *  The Area must be able to return accuracy needed in a given zone (Sphere for now,\n *  since box intersections with such a complex shape are not trivial), and also\n *  propose an intersection test.\n *\n * @constructor\n */\nvar Area = function()\n{\n\n};\n\n/**\n *  [Abstract]\n *  Test intersection of the shape with a sphere\n *  @return {boolean} true if the sphere and the area intersect\n *\n *  @param {!{radius:number,c:!THREE.Vector3}} sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n *\n */\nArea.prototype.sphereIntersect = function(sphere)\n{\n    throw \"Error : sphereIntersect is abstract, should have been overwritten\";\n};\n\n/**\n * [Asbtract]\n *  Test if p is in the area.\n *\n *  @return {boolean} true if p is in the area, false otherwise.\n *\n *  @param {!THREE.Vector3} p A point in space\n *\n */\nArea.prototype.contains = function(p)\n{\n    throw \"Error : contains is abstract, should have been overwritten\";\n};\n\n/**\n *  @abstract\n *  Return the minimum accuracy needed in the intersection of the sphere and the area.\n *         This function is a generic function used in both getNiceAcc and getRawAcc.\n *\n *  @return {number} the accuracy needed in the intersection zone, as a ratio of the linear variation\n *         of the radius along (this.p0,this.p1)\n *\n *  @param {!{radius:number,c:!THREE.Vector3}} sphere  A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n *  @param {number}  factor  the ratio to determine the wanted accuracy.\n *                   Example : for an AreaScalisSeg, if thick0 is 1 and thick1 is 2, a sphere\n *                      centered at (p0+p1)/2 and of radius 0.2\n *                      will show its minimum accuracy at p0+0.3*unit_dir.\n *                      The linear interpolation of weights at this position\n *                      will give a wanted radius of 1.3\n *                      This function will return factor*1.3\n *\n */\nArea.prototype.getAcc = function(sphere, factor)\n{\n    throw \"Error : getAcc is abstract, should have been overwritten\";\n};\n\n/**\n *  @abstract\n *  Convenience function, just call getAcc with Nice Accuracy parameters.\n *  @param {!{radius:number,c:!THREE.Vector3}} sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n *  @return {number} The Nice accuracy needed in the intersection zone\n */\nArea.prototype.getNiceAcc = function(sphere)\n{\n    throw \"Error : getNiceAcc is abstract, should have been overwritten\";\n};\n/**\n *  @abstract\n *  Convenience function, just call getAcc with Current Accuracy parameters.\n *  @param {!{radius:number,c:!THREE.Vector3}} sphere A sphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n *  @return {number} The Current accuracy needed in the intersection zone\n */\nArea.prototype.getCurrAcc = function(sphere)\n{\n    throw \"Error : getCurrAcc is abstract, should have been overwritten\";\n};\n\n/**\n *  @abstract\n *  Convenience function, just call getAcc with Raw Accuracy parameters.\n *  @param {!{radius:number,c:!THREE.Vector3}} sphere A sphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n *  @return {number} The raw accuracy needed in the intersection zone\n */\nArea.prototype.getRawAcc = function(sphere)\n{\n    throw \"Error : getRawAcc is abstract, should have been overwritten\";\n};\n\n/**\n *  @abstract\n *  @return {number} the minimum accuracy needed in the whole area\n */\nArea.prototype.getMinAcc = function()\n{\n    throw \"Error : getRawAcc is abstract, should have been overwritten\";\n};\n/**\n *  @abstract\n *  @return {number} the minimum raw accuracy needed in the whole area\n */\nArea.prototype.getMinRawAcc = function()\n{\n    throw \"Error : getRawAcc is abstract, should have been overwritten\";\n};\n\nmodule.exports = Area;\n","\"use strict\";\n\n/**\n * @global\n * @type {Object} Accuracies Contains the accuracies needed in Areas. Can be changed when importing blobtree.js.\n *                For classic segments and sphere, we setteled for a raw accuracy being proportional to\n *                the radii. 1/3 of the radius is considered nice, 1 radius is considered raw.\n *                For new primitives, feel free to create your own accuracies factors depending on the features.\n *\n * @property {number} nice Factor for the nice accuracy needed to represent the features nicely\n * @property {number} raw Factor for the raw accuracy needed to represent the features roughly\n * @property {number} curr Current accuracy factor, should be between Accuracies.nice and Accuracies.raw.\n *                         It will be the one used by rendering algorithms to decide to stop even if nice accuracy has not been reached.\n */\nvar Accuracies = {};\n\nAccuracies.nice = 0.3;\nAccuracies.raw = 1.0;\nAccuracies.curr = 0.3;\n\nmodule.exports = Accuracies;\n","\"use strict\";\n\nconst THREE = require(\"three\");\nconst ScalisMath = require(\"../scalis/ScalisMath.js\");\nconst Area = require(\"./Area.js\");\nconst Accuracies = require(\"../accuracies/Accuracies.js\");\n\n/**\n *  AreaSphere is a general representation of a spherical area.\n *  See Primitive.getArea for more details.\n *\n *  @constructor\n *  @extends {Area}\n *\n *  @param {!THREE.Vector3} p Point to locate the area\n *  @param {number} r Radius of the area\n *  @param {number} accFactor Accuracy factor. By default SphereArea will use global Accuracies parameters. However, you can setup a accFactor.\n *                            to change that. You will usually want to have accFactor between 0 (excluded) and 1. Default to 1.0.\n *                            Be careful not to set it too small as it can increase the complexity of some algorithms up to the crashing point.\n *\n */\nvar AreaSphere = function( p, r, accFactor )\n{\n    Area.call(this);\n\n    this.p = new THREE.Vector3(p.x,p.y,p.z);\n    this.r = r;\n\n    this.accFactor = accFactor || 1.0;\n};\n\nAreaSphere.prototype = Object.create(Area.prototype);\nAreaSphere.prototype.constructor = AreaSphere;\n\n/**\n *  Test intersection of the shape with a sphere\n *  @return {boolean} true if the sphere and the area intersect\n *\n *  @param {!{r:number,c:!THREE.Vector3}} sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n */\nAreaSphere.prototype.sphereIntersect = (function(){\n    var v = new THREE.Vector3();\n    return function(sphere)\n    {\n        v.subVectors(sphere.center,this.p);\n        var tmp = sphere.radius+this.radius;\n        return v.lengthSq() < tmp*tmp;\n    };\n})();\n\n/**\n *  Test if p is in the area.\n *\n *  @return {boolean} true if p is in th area, false otherwise.\n *\n *  @param {!Object} p A point in space, must comply to THREE.Vector3 API.\n *\n */\nAreaSphere.prototype.contains = (function(){\n    var v = new THREE.Vector3();\n    return function(p)\n    {\n        v.subVectors(p,this.p);\n        return v.lengthSq() < this.r*this.r;\n    };\n})();\n\n/**\n *  Return the minimum accuracy needed in the intersection of the sphere and the area.\n *         This function is a generic function used in both getNiceAcc and getRawAcc.\n *\n *  @return {number} the accuracy needed in the intersection zone\n *\n *  @param {!{r:number,c:!THREE.Vector3}}  sphere  A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n *  @param {number}  factor  the ratio to determine the wanted accuracy.\n */\nAreaSphere.prototype.getAcc = function(sphere, factor)\n{\n    return this.radius*factor;\n};\n\n/**\n *  Convenience function, just call getAcc with Nice Accuracy parameters.\n *  @param {!{r:number,c:!THREE.Vector3}}  sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n *  @return {number} The Nice accuracy needed in the intersection zone\n */\nAreaSphere.prototype.getNiceAcc = function(sphere)\n{\n    return this.getAcc(sphere,Accuracies.nice*this.accFactor);\n};\n/**\n *  Convenience function, just call getAcc with Curr Accuracy parameters.\n *  @param {!{r:number,c:!THREE.Vector3}}  sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n *  @return {number} The Curr accuracy needed in the intersection zone\n */\nAreaSphere.prototype.getCurrAcc = function(sphere)\n{\n    return this.getAcc(sphere,Accuracies.curr*this.accFactor);\n};\n/**\n *  Convenience function, just call getAcc with Raw Accuracy parameters.\n *  @param {!{r:number,c:!THREE.Vector3}}  sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n *  @return {number} The raw accuracy needed in the intersection zone\n */\nAreaSphere.prototype.getRawAcc = function(sphere)\n{\n    return this.getAcc(sphere,Accuracies.raw*this.accFactor);\n};\n\n/**\n *  @return {number} the minimum accuracy needed for this primitive\n */\nAreaSphere.prototype.getMinAcc = function()\n{\n    return Accuracies.curr*this.r*this.accFactor;\n};\n\n/**\n *  @return {number} the minimum raw accuracy needed for this primitive\n */\nAreaSphere.prototype.getMinRawAcc = function()\n{\n    return Accuracies.raw*this.r*this.accFactor;\n};\n\n/**\n *  Return the minimum accuracy required at some point on the given axis.\n *  The returned accuracy is the one you would need when stepping in the axis\n *  direction when you are on the axis at coordinate t.\n *  @param {string} axis x, y or z\n *  @param {number} t Coordinate on the axis\n *  @return {number} The step you can safely do in axis direction\n */\nAreaSphere.prototype.getAxisProjectionMinStep = function(axis,t){\n    var step = 100000000;\n    var diff = t-this.p[axis];\n    if(diff<-2*this.r){\n        step = Math.min(\n            step,\n            Math.max(\n                Math.abs(diff+this.r),\n                Accuracies.curr*this.r*this.accFactor\n            )\n        );\n    }else if(diff<2*this.r){\n        step = Math.min(\n            step,\n            Accuracies.curr*this.r*this.accFactor\n        );\n    }// else the area is behind us\n    return step;\n};\n\nmodule.exports = AreaSphere;\n\n","\"use strict\";\n\nconst THREE = require(\"three\");\nconst Types = require(\"../Types.js\");\nconst Material = require(\"../Material.js\");\nconst ScalisPrimitive = require(\"./ScalisPrimitive.js\");\nconst ScalisVertex = require(\"./ScalisVertex.js\");\nconst ScalisMath = require(\"./ScalisMath.js\");\nconst AreaSphere = require(\"../areas/AreaSphere.js\");\nconst Accuracies = require(\"../accuracies/Accuracies.js\");\n\n// AreaScalisPoint is deprecated since the more genreal AreaSphere is now supposed to do the job.\n// Uncomment if you see any difference.\n// const AreaScalisPoint = require(\"../areas/deprecated/AreaScalisPoint.js\");\n\n/**\n *  @constructor\n *  @extends ScalisPrimitive\n *\n *  @param {!ScalisVertex} vertex The vertex with point parameters.\n *  @param {string} volType The volume type wanted for this primitive.\n *                          Note : \"convolution\" does not make sens for a point, so technically,\n *                                 ScalisPrimitive.DIST or ScalisPrimitive.CONVOL will give the same results.\n *                                 However, since this may be a simple way of sorting for later blending,\n *                                 you can still choose between the 2 options.\n *  @param {number} density Implicit field density.\n *                          Gives afiner control of the created implicit field.\n *  @param {!Material} mat Material for the point\n */\nvar ScalisPoint = function(vertex, volType, density, mat) {\n    ScalisPrimitive.call(this);\n\n    this.v.push(vertex);\n    this.v[0].setPrimitive(this);\n\n    this.volType     = volType;\n    this.density     = density;\n    this.materials.push(mat);\n\n    // Temporary for eval\n    // TODO : should be wrapped in the eval function scope if possible (ie not precomputed)\n    this.v_to_p =  new THREE.Vector3();\n};\n\nScalisPoint.prototype = Object.create(ScalisPrimitive.prototype);\nScalisPoint.prototype.constructor = ScalisPoint;\n\nScalisPoint.type = \"ScalisPoint\";\nTypes.register(ScalisPoint.type, ScalisPoint);\n\nScalisPoint.prototype.getType = function(){\n    return ScalisPoint.type;\n};\n\nScalisPoint.prototype.toJSON = function() {\n    var res = ScalisPrimitive.prototype.toJSON.call(this);\n    res.density = this.density;\n    return res;\n};\nScalisPoint.fromJSON = function(json){\n    var v = ScalisVertex.fromJSON(json.v[0]);\n    var m = Material.fromJSON(json.materials[0]);\n    return new ScalisPoint(v, json.volType, json.density, m);\n};\n\n/**\n *  @param {number} d New density to set\n */\nScalisPoint.prototype.setDensity = function(d) {\n    this.density = d;\n    this.invalidAABB();\n};\n\n/**\n *  @return {number} Current density\n */\nScalisPoint.prototype.getDensity = function() {\n    return this.density;\n};\n\n/**\n *  Set material for this point\n *  @param {!Material} m\n */\nScalisPoint.prototype.setMaterial = function(m) {\n    this.materials[0].copy(m);\n    this.invalidAABB();\n};\n\n// [Abstract] see ScalisPrimitive.computeHelpVariables\nScalisPoint.prototype.computeHelpVariables = function() {\n    this.computeAABB();\n};\n\n// [Abstract] see ScalisPrimitive.prepareForEval\nScalisPoint.prototype.prepareForEval = function() {\n    if(!this.valid_aabb)\n    {\n        this.computeHelpVariables();\n        this.valid_aabb = true;\n    }\n};\n\n// [Abstract] see ScalisPrimitive.getArea\nScalisPoint.prototype.getAreas = function() {\n    if(!this.valid_aabb) {\n        throw \"ERROR : Cannot get area of invalid primitive\";\n        return [];\n    }else{\n        return [{\n            aabb:this.aabb,\n            bv: new AreaSphere(this.v[0].getPos(),ScalisMath.KS*this.v[0].getThickness(), ScalisMath.KIS),\n            // AreaScalisPoint is deprecated and AreaSphere should be used instead. Uncomment if you notice accuracy issues.\n            // bv: new AreaScalisPoint(this.v[0].getPos(),this.v[0].getThickness()),\n            obj: this\n        }];\n    }\n};\n\n// [Abstract] see ScalisPrimitive.heuristicStepWithin\nScalisPoint.prototype.heuristicStepWithin = function() {\n    return this.v[0].getThickness() / 3;\n};\n\n// [Abstract] see ScalisPrimitive.value\nScalisPoint.prototype.value = function(p,res) {\n    if(!this.valid_aabb){\n        throw \"Error : PrepareForEval should have been called\";\n    }\n\n    var thickness = this.v[0].getThickness();\n\n    // Eval itself\n    this.v_to_p.subVectors(p,this.v[0].getPos());\n    var r2 = this.v_to_p.lengthSq()/(thickness*thickness);\n    var tmp = 1.0-ScalisMath.KIS2*r2;\n    if(tmp > 0.0)\n    {\n        res.v = this.density*tmp*tmp*tmp*ScalisMath.Poly6NF0D;\n\n        if(res.g)\n        {\n            // Gradient computation is easy since the\n            // gradient is radial. We use the analitical solution\n            // to directionnal gradient (differential in this.v_to_p length)\n            var tmp2 = -this.density * ScalisMath.KIS2 * 6.0 * this.v_to_p.length() * tmp * tmp * ScalisMath.Poly6NF0D/(thickness*thickness);\n            res.g.copy(this.v_to_p).normalize().multiplyScalar(tmp2);\n        }\n        if(res.m)  { res.m.copy(this.materials[0]); }\n    }\n    else\n    {\n        res.v = 0.0;\n        if(res.g) { res.g.set(0,0,0); }\n        if(res.m)  { res.m.copy(Material.defaultMaterial); }\n    }\n\n};\n\n// [Abstract]\nScalisPoint.prototype.distanceTo = function(p) {\n    // return distance point/segment\n    // don't take thickness into account\n    return p.distanceTo(this.v[0].getPos());\n    // return p.distanceTo(this.v[0].getPos()) - this.v[0].getThickness();\n};\n\nmodule.exports = ScalisPoint;\n","\"use strict\";\n\nconst THREE = require(\"three\");\nconst ScalisMath = require(\"../scalis/ScalisMath.js\");\nconst Area = require(\"./Area.js\");\nconst Accuracies = require(\"../accuracies/Accuracies.js\");\n\n/**\n *  Bounding area for the segment.\n *  It is the same for DIST and CONVOL primitives since the support of the convolution\n *  kernel is the same as the support for the distance field.\n *  The resulting volume is a clipped cone with spherical extremities, wich is\n *  actually the support of the primitive.\n *\n *  The Area must be able to return accuracy needed in a given zone (Sphere fr now,\n *  since box intersections with such a complex shape are not trivial), and also\n *  propose an intersection test.\n *\n *  @extends {Area}\n *\n *  @param {!THREE.Vector3} p0     first point of the shape\n *  @param {!THREE.Vector3} p1     second point of the shape\n *  @param {number}  thick0 radius at p0\n *  @param {number}  thick1 radius at p1\n *\n *  @todo should be possible to replace with an AreaCapsule\n *\n * @constructor\n */\nvar AreaScalisSeg = function(p0, p1, thick0, thick1)\n{\n    Area.call(this);\n\n    this.p0 = new THREE.Vector3(p0.x,p0.y,p0.z);\n    this.p1 = new THREE.Vector3(p1.x,p1.y,p1.z);\n    this.thick0 = thick0;\n    this.thick1 = thick1;\n\n    this.unit_dir = new THREE.Vector3().subVectors(p1,p0);\n    this.length = this.unit_dir.length();\n    this.unit_dir.normalize();\n\n    // tmp var for functions below\n    this.vector = new THREE.Vector3();\n    this.p0_to_p = this.vector; // basically the same as above + smart name\n    this.p0_to_p_sqrnorm = 0;\n    this.x_p_2D = 0;\n    this.y_p_2D = 0;\n    this.y_p_2DSq = 0;\n    this.ortho_vec_x = this.thick0 - this.thick1; // direction orthogonal to the \"line\" getting from one weight to the other. Precomputed\n    this.ortho_vec_y = this.length;\n    this.p_proj_x = 0;\n    this.p_proj_y = 0;\n\n    this.abs_diff_thick = Math.abs(this.ortho_vec_x);\n};\n\nAreaScalisSeg.prototype = Object.create(Area.prototype);\nAreaScalisSeg.prototype.constructor = AreaScalisSeg;\n\n/**\n *  Compute some of the tmp variables.\n *  Used to factorized other functions code.\n *  @param {!THREE.Vector3} p A point as a THREE.Vector3\n *\n *  @protected\n */\nAreaScalisSeg.prototype.proj_computation = function(p)\n{\n    this.p0_to_p = this.vector;\n    this.p0_to_p.subVectors(p, this.p0);\n    this.p0_to_p_sqrnorm = this.p0_to_p.lengthSq();\n    this.x_p_2D = this.p0_to_p.dot(this.unit_dir);\n    // pythagore inc.\n    this.y_p_2DSq = this.p0_to_p_sqrnorm - this.x_p_2D*this.x_p_2D;\n    this.y_p_2D = this.y_p_2DSq>0 ? Math.sqrt(this.y_p_2DSq) : 0; // because of rounded errors tmp can be <0 and this causes the next sqrt to return NaN...\n\n    var t = -this.y_p_2D/this.ortho_vec_y;\n    // P proj is the point at the intersection of:\n    //              - the local X axis (computation in the unit_dir basis)\n    //                  and\n    //              - the line defined by P and the vector orthogonal to the weight line\n    this.p_proj_x = this.x_p_2D + t*this.ortho_vec_x;\n    this.p_proj_y = 0.0;\n};\n\n/**\n *  Sea documentation in parent class Area\n *  TODO :\n *      Check the Maths (Ask Cedric Zanni?)\n */\nAreaScalisSeg.prototype.sphereIntersect = function(sphere)\n{\n    this.proj_computation(sphere.center);\n\n    if(this.p_proj_x<0.0){\n        return (Math.sqrt(this.p0_to_p_sqrnorm)-sphere.radius < this.thick0*ScalisMath.KS);\n    }else{\n        if(this.p_proj_x>this.length)\n        {\n            this.vector.subVectors(sphere.center, this.p1);\n            return (Math.sqrt(this.vector.lengthSq())-sphere.radius < this.thick1*ScalisMath.KS);\n        }else{\n            var sub1 = this.x_p_2D-this.p_proj_x;\n            //var sub2 = this.y_p_2D-this.p_proj_y; //this.p_proj_y is set at 0 by definition\n            //var dist = Math.sqrt(sub1*sub1 +this.y_p_2DSq);//sub2*sub2);\n            var dist = sub1*sub1 +this.y_p_2DSq;//sub2*sub2);\n            var tt = this.p_proj_x/this.length;\n            var inter_w = this.thick0*(1.0-tt) + tt*this.thick1;\n            var tmp = sphere.radius + inter_w*ScalisMath.KS;\n            //return (dist-sphere.radius < inter_w*ScalisMath.KS);\n            return (dist<tmp*tmp);\n        }\n    }\n};\n\n/**\n *  Sea documentation in parent class Area\n */\nAreaScalisSeg.prototype.contains = function(p)\n{\n    this.proj_computation(p);\n    // P proj is the point at the intersection of:\n    //              - the X axis\n    //                  and\n    //              - the line defined by P and the vector orthogonal to the weight line\n    if(this.p_proj_x<0.0){\n        // Proj is before the line segment beginning defined by P0: spherical containment\n        return this.p0_to_p_sqrnorm < this.thick0*this.thick0*ScalisMath.KS2;\n    }else{\n        if(this.p_proj_x>this.length)\n        {\n            // Proj is after the line segment beginning defined by P1: spherical containment\n            this.vector.subVectors(p, this.p1);\n            return this.vector.lengthSq() < this.thick1*this.thick1*ScalisMath.KS2;\n        }else{\n            // Proj is in between the line segment P1-P0: Linear kind of containment\n            var sub1 = this.x_p_2D-this.p_proj_x;\n            var sub2 = this.y_p_2D-this.p_proj_y;\n            var dist2 = sub1*sub1+sub2*sub2;\n            var tt = this.p_proj_x/this.length;\n            var inter_w = this.thick0*(1.0-tt) + tt*this.thick1;\n            return dist2 < inter_w*inter_w*ScalisMath.KS2;\n        }\n    }\n};\n\n/**\n *\n *  TODO :\n *      check the Maths\n */\nAreaScalisSeg.prototype.getAcc = function(sphere, factor)\n{\n    this.proj_computation(sphere.center);\n/*\n    // Following is a modified bit that improves acc computation outside of segments.\n    // However, it appears that we are losing some quality in the models\n    // (as the other computation gives a lower min acc bound by design)\n    // TODO: decide if we uncomment or delete this\n\n    // Get the point at the intersection of the line defined by the center of the sphere and of vector dir orthovec\n    // and the weight line going through (0,thick0)  and orthogonal to orthovec\n    var t = (thick0*this.ortho_vec_y - this.p_proj_x*this.ortho_vec_x)/(this.ortho_vec_x*this.ortho_vec_x+this.ortho_vec_y*this.ortho_vec_y);\n    var inter_proj_x = this.p_proj_x +t*this.ortho_vec_x;\n    var inter_proj_y = t*this.ortho_vec_y;\n    // If inside the min acc is found according to the sphere normal radius\n    var newR = sphere.radius;\n    if (this.y_p_2D > inter_proj_y) {\n        // If we are outside the segment, the sphere intersection with the weight line is computed\n        var sub1 = this.x_p_2D-inter_proj_x;\n        var sub2 = this.y_p_2D-inter_proj_y;\n        var dist = Math.sqrt(sub1*sub1 +sub2*sub2);\n        // Pythagore this\n        newR = Math.sqrt(sphere.radius*sphere.radius-dist*dist);\n    }\n    var tmp = this.abs_diff_thick/this.length;\n    var half_delta = newR*Math.sqrt(1+tmp*tmp)*0.5;\n*/\n    // Thales between two triangles that have the same angles gives us the dist of:\n    // side A = sphere.radius*this.abs_diff_thick/this.length;\n    // Then pythagore this shit up as A² + sphere.radius² = delta²\n    // i.e delta² = (sphere.radius*this.abs_diff_thick/this.length)² + sphere.radius²\n    // <=> delta = sphere.radius*Math.sqrt(1+(this.abs_diff_thick/this.length)²);\n\n    var tmp = this.abs_diff_thick/this.length;\n    var half_delta = sphere.radius*Math.sqrt(1+tmp*tmp)*0.5;\n\n    // we check only the direction where the weight is minimum since\n    // we will return minimum accuracy needed in the area.\n    var absc = this.p_proj_x;\n    absc += this.thick0 > this.thick1 ? half_delta : -half_delta;\n\n    if(absc<0.0){\n        return this.thick0*factor;\n    }else if(absc>this.length)\n    {\n        return this.thick1*factor;\n    }else{\n\n        var tt = absc/this.length;\n        var inter_w = this.thick0*(1.0-tt) + tt*this.thick1;\n        return inter_w*factor;\n    }\n};\n\n/**\n *  Sea documentation in parent class Area\n */\nAreaScalisSeg.prototype.getNiceAcc = function(sphere)\n{\n    return this.getAcc(sphere,Accuracies.nice);\n};\n/**\n *  Sea documentation in parent class Area\n */\nAreaScalisSeg.prototype.getCurrAcc = function(sphere)\n{\n    return this.getAcc(sphere,Accuracies.curr);\n};\n/**\n *  Sea documentation in parent class Area\n */\nAreaScalisSeg.prototype.getRawAcc = function(sphere)\n{\n    return this.getAcc(sphere,Accuracies.raw);\n};\n\n/**\n *  Sea documentation in parent class Area\n */\nAreaScalisSeg.prototype.getMinAcc = function()\n{\n    return Accuracies.curr*Math.min(this.thick0, this.thick1);\n};\n/**\n *  Sea documentation in parent class Area\n */\nAreaScalisSeg.prototype.getMinRawAcc = function()\n{\n    return Accuracies.raw*Math.min(this.thick0, this.thick1);\n};\n\n/**\n *  Return the minimum accuracy required at some point on the given axis, according to Accuracies.curr\n *  The returned accuracy is the one you would need when stepping in the axis\n *  direction when you are on the axis at coordinate t.\n *  @param {string} axis x, y or z\n *  @param {number} t Coordinate on the axis\n *  @return {number} The step you can safely do in axis direction\n */\nAreaScalisSeg.prototype.getAxisProjectionMinStep = function(axis,t){\n    var step = Number.MAX_VALUE;\n    var p0 = this.p0[axis] < this.p1[axis] ? this.p0 : this.p1;\n    var p1, thick0, thick1;\n    if(p0 === this.p0){\n        p1 = this.p1;\n        thick0 = this.thick0;\n        thick1 = this.thick1;\n    }else{\n        p1 = this.p0;\n        thick0 = this.thick1;\n        thick1 = this.thick0;\n    }\n\n    var diff = t-p0[axis];\n    if(diff<-2*thick0){\n        step = Math.min(step,Math.max(Math.abs(diff+2*thick0),Accuracies.curr*thick0));\n    }else if(diff<2*thick0){\n        step = Math.min(step,Accuracies.curr*thick0);\n    }// else the vertex is behind us\n    diff = t-p1[axis];\n    if(diff<-2*thick1){\n        step = Math.min(step,Math.max(Math.abs(diff+2*thick1),Accuracies.curr*thick1));\n    }else if(diff<2*thick1){\n        step = Math.min(step,Accuracies.curr*thick1);\n    }// else the vertex is behind us\n\n    var tbis = t-p0[axis];\n    var axis_l = p1[axis]-p0[axis];\n    if(tbis>0 && tbis<axis_l && axis_l!==0){\n        // t is in p0p1\n        step = Math.min(step,Accuracies.curr*(thick0 + (tbis/axis_l)*(thick1 - thick0)));\n    }\n\n    return step;\n};\n\nmodule.exports = AreaScalisSeg;\n\n\n","\"use strict\";\n\nconst THREE = require(\"three\");\nconst Types = require(\"../Types.js\");\nconst Material = require(\"../Material.js\");\nconst ScalisPrimitive = require(\"./ScalisPrimitive.js\");\nconst ScalisVertex = require(\"./ScalisVertex.js\");\nconst ScalisMath = require(\"./ScalisMath.js\");\nconst AreaScalisSeg = require(\"../areas/AreaScalisSeg.js\");\nconst Accuracies = require(\"../accuracies/Accuracies.js\");\n\n/**\n *  Implicit segment class in the blobtree.\n *\n *  @constructor\n *  @extends ScalisPrimitive\n *\n *  @param {!ScalisVertex} v0 First vertex for the segment\n *  @param {!ScalisVertex} v1 Second vertex for the segment\n *  @param {!string} volType Volume type, can be ScalisPrimitive.CONVOL\n *                 (homothetic convolution surfaces, Zanni and al), or\n *                 ScalisPrimitive.DIST (classic weighted distance field)\n *  @param {number} density Density is another constant to modulate the implicit\n *                  field. Used only for DIST voltype.\n *  @param {!Array.<Material>} mats Material for this primitive.\n *                                   Use [Material.defaultMaterial.clone(), Material.defaultMaterial.clone()] by default.\n *\n */\nvar ScalisSegment = function(v0, v1, volType, density, mats) {\n    ScalisPrimitive.call(this);\n\n    this.v.length   = 2;\n    this.v[0]       = v0;\n    this.v[1]       = v1;\n    v0.setPrimitive(this);\n    v1.setPrimitive(this);\n\n    this.volType     = volType;\n    this.density     = density;\n    this.materials   = mats;\n\n    // Temporary for eval\n    // TODO : should be wrapped in the eval function scope if possible (ie not precomputed)\n    // CONVOL\n    this.clipped_l1 = 1.0;\n    this.clipped_l2 = 0.0;\n    this.vector = new THREE.Vector3();\n    this.cycle  = new THREE.Vector3();\n    this.proj   = new THREE.Vector3();\n    // helper attributes\n    this.v0_p = this.v[0].getPos();\n    this.v1_p = this.v[1].getPos(); // this one is probably useless to be kept for eval since not used....\n    this.dir = new THREE.Vector3();\n    this.lengthSq = 0;\n    this.length = 0;\n    this.unit_dir = new THREE.Vector3();\n    // weight_p1 is convol's weight_p2 ( >_< )\n    this.weight_p1 = 0;\n    // c0 and c1 are convol's weight_coeff\n    this.c0 = 0;\n    this.c1 = 0;\n\n    this.increase_unit_dir = new THREE.Vector3();\n    this.p_min = new THREE.Vector3();\n    this.weight_min = 0;\n    this.inv_weight_min = 0;\n    this.unit_delta_weight = 0;\n\n    var bound_supp0 = 0;\n    var bound_supp1 = 0;\n    this.maxbound = 0;\n    this.maxboundSq = 0;\n    this.cyl_bd0 = 0;\n    this.cyl_bd1 = 0;\n    this.f0f1f2 = new THREE.Vector3();\n\n    this.tmpVec1 = new THREE.Vector3();\n    this.tmpVec2 = new THREE.Vector3();\n\n    this.computeHelpVariables();\n};\n\nScalisSegment.prototype = Object.create(ScalisPrimitive.prototype);\nScalisSegment.constructor = ScalisSegment;\n\nScalisSegment.type = \"ScalisSegment\";\nTypes.register(ScalisSegment.type, ScalisSegment);\n\nScalisSegment.prototype.getType = function(){\n    return ScalisSegment.type;\n};\n\nScalisSegment.prototype.toJSON = function() {\n    var res = ScalisPrimitive.prototype.toJSON.call(this);\n    res.density = this.density;\n    return res;\n};\nScalisSegment.fromJSON = function(json){\n    var v0 = ScalisVertex.fromJSON(json.v[0]);\n    var v1 = ScalisVertex.fromJSON(json.v[1]);\n    var m = [\n        Material.fromJSON(json.materials[0]),\n        Material.fromJSON(json.materials[1])\n    ];\n    return new ScalisSegment(v0, v1, json.volType, json.density, m);\n};\n\n//  [Abstract] See ScalisPrimitive.mutableVolType for more details\nScalisSegment.prototype.mutableVolType = function() {\n    return true;\n};\n\n/**\n *  @param {number} d The new density\n */\nScalisSegment.prototype.setDensity = function(d) {\n    this.density = d;\n    this.invalidAABB();\n};\n\n/**\n *  @return {number} The current density\n */\nScalisSegment.prototype.getDensity = function() {\n    return this.density;\n};\n\n// [Abstract] See Primitive.setVolType for more details\nScalisSegment.prototype.setVolType = function(vt)\n{\n    if( !(vt == ScalisPrimitive.CONVOL || vt == ScalisPrimitive.DIST) ){\n        throw \"ERROR : volType must be set to ScalisPrimitive.CONVOL or ScalisPrimitive.DIST\";\n    }\n\n    if(this.volType != vt){\n        this.volType = vt;\n        this.invalidAABB();\n    }\n};\n\n// [Abstract] See Primitive.getVolType for more details\nScalisSegment.prototype.getVolType = function()\n{\n    return this.volType;\n};\n\n// [Abstract] See Primitive.prepareForEval for more details\nScalisSegment.prototype.prepareForEval = function() {\n    if(!this.valid_aabb)\n    {\n        this.computeHelpVariables();\n        this.valid_aabb = true;\n    }\n};\n\n// [Abstract] See Primtive.getArea for more details\nScalisSegment.prototype.getAreas = function() {\n    if(!this.valid_aabb){\n        throw \"ERROR : Cannot get area of invalid primitive\";\n        return [];\n    }else{\n        return [{\n            aabb:this.aabb,\n            //new THREE.Box3(-256, -256, -256, 256,256,256),\n            //new THREE.Box3(this.aabb.min_x-min_thick,this.aabb.min_y-min_thick,this.aabb.min_z-min_thick,\n            //this.aabb.max_x+min_thick,this.aabb.max_y+min_thick,this.aabb.max_z+min_thick),\n            bv: new AreaScalisSeg(\n                this.v[0].getPos(),\n                this.v[1].getPos(),\n                this.v[0].getThickness(),\n                this.v[1].getThickness(),\n                this.length,\n                this.unit_dir),\n            obj: this\n        }];\n    }\n};\n\n// [Abstract] See Primitive.computeHelpVariables for more details\nScalisSegment.prototype.computeHelpVariables = function() {\n    this.v0_p = this.v[0].getPos();\n    this.v1_p = this.v[1].getPos(); // this one is probably useless to be kept for eval since not used....\n\n    this.dir.subVectors(this.v1_p,this.v0_p);\n    this.lengthSq = this.dir.lengthSq();\n    this.length = Math.sqrt(this.lengthSq);\n    this.unit_dir.copy(this.dir).normalize();\n\n    this.weight_p1 = this.v[1].getThickness();\n    this.c0 = this.v[0].getThickness();\n    this.c1 = this.v[1].getThickness() - this.v[0].getThickness();\n\n    // Bounding property\n    // bounding box is axis aligned so the bounding is not very tight.\n    var bound_supp0 = this.v[0].getThickness()*ScalisMath.KS;\n    var bound_supp1 = this.v[1].getThickness()*ScalisMath.KS;\n\n    this.maxbound = Math.max(bound_supp0,bound_supp1);\n    this.maxboundSq = this.maxbound*this.maxbound;\n\n    // Speed up var for cylinder bounding\n    // Used only in evalConvol\n    this.cyl_bd0 = Math.min(-bound_supp0, this.length-bound_supp1);\n    this.cyl_bd1 = Math.max(this.length+bound_supp1, bound_supp0);\n\n    this.increase_unit_dir.copy(this.unit_dir);\n    // weight help variables\n    if (this.c1 < 0)\n    {\n        this.p_min.copy(this.v1_p);\n        this.weight_min = this.weight_p1;\n        this.inv_weight_min = 1 / this.weight_p1;\n        this.increase_unit_dir.negate();\n        this.unit_delta_weight = -this.c1 / this.length;\n    }\n    else\n    {\n        this.p_min.copy(this.v0_p);\n        // weight_p0 is c0\n        this.weight_min = this.c0;\n        this.inv_weight_min = 1 / this.c0;\n        this.unit_delta_weight = this.c1/ this.length;\n    }\n\n    this.computeAABB();\n};\n\n// [Abstract] See Primitive.value for more details\nScalisSegment.prototype.value = function(p,res) {\n    switch(this.volType){\n    case ScalisPrimitive.DIST:\n        this.evalDist(p,res);\n        break;\n    case ScalisPrimitive.CONVOL:\n        this.evalConvol(p,res);\n        break;\n    default:\n        throw \"Unknown volType, cannot evaluate.\";\n        break;\n    }\n};\n\n///////////////////////////////////////////////////////////////////////////\n// Distance Evaluation functions and auxiliaary functions\n// Note : for the mech primitive we use a CompactPolynomial6 kernel.\n//        TODO : the orga should use the same for better smoothness\n\n/**\n *  value function for Distance volume type (distance field).\n */\nScalisSegment.prototype.evalDist = (function(){\n    var ev_eps = {v:0};\n    var p_eps = new THREE.Vector3();\n    return function(p,res) {\n\n        var p0_to_p = this.vector;\n        p0_to_p.subVectors(p,this.v[0].getPos());\n\n        // Documentation : see DistanceHomothetic.pdf in convol/Documentation/Convol-Core/\n        var orig_p_scal_dir = p0_to_p.dot(this.dir);\n        var orig_p_sqr = p0_to_p.lengthSq();\n\n        var denum = this.lengthSq * this.c0 + orig_p_scal_dir * this.c1;\n        var t = (this.c1<0) ? 0 : 1;\n        if(denum > 0.0)\n        {\n            t = orig_p_scal_dir * this.c0 + orig_p_sqr * this.c1;\n            t = (t<0.0) ? 0.0 : ((t>denum) ? 1.0 : t/denum) ; // clipping (nearest point on segment not line)\n        }\n\n        // Optim the below code... But keep the old code it's more understandable\n        var proj_p_l = Math.sqrt(t*(t*this.lengthSq-2*orig_p_scal_dir)+orig_p_sqr);\n        //var proj_to_point = this.proj;\n        //proj_to_point.set(\n        //    t*this.dir.x - p0_to_p.x,\n        //    t*this.dir.y - p0_to_p.y,\n        //    t*this.dir.z - p0_to_p.z\n        //);\n        //var proj_p_l = proj_to_point.length();\n\n        var weight_proj = this.c0 + t*this.c1;\n        res.v = this.density*ScalisMath.Poly6Eval(proj_p_l/weight_proj)*ScalisMath.Poly6NF0D;\n\n        ///////////////////////////////////////////////////////////////////////\n        // Material computation : by orthogonal projection\n        if(res.m){\n            this.evalMat(p,res);\n        }\n\n        // IMPORTANT NOTE :\n        // We should use an analytical gradient here. It should be possible to\n        // compute.\n        if(res.g){\n            var epsilon = 0.00001;\n            var d_over_eps = this.density/epsilon;\n            p_eps.copy(p);\n            p_eps.x += epsilon;\n            this.evalDist(p_eps, ev_eps);\n            res.g.x = d_over_eps*(ev_eps.v-res.v);\n            p_eps.x -= epsilon;\n\n            p_eps.y += epsilon;\n            this.evalDist(p_eps,ev_eps);\n            res.g.y = d_over_eps*(ev_eps.v-res.v);\n            p_eps.y -= epsilon;\n\n            p_eps.z += epsilon;\n            this.evalDist(p_eps,ev_eps);\n            res.g.z = d_over_eps*(ev_eps.v-res.v);\n        }\n    };\n})();\n\n/**\n *\n * @param {THREE.Vector3} p Evaluation point\n * @param {Object} res Resulting material will be in res.m\n */\nScalisSegment.prototype.evalMat = function(p,res){\n    var p0_to_p = this.vector;\n    p0_to_p.subVectors(p,this.v[0].getPos());\n    var udir_dot = this.unit_dir.dot(p0_to_p);\n    var s = (udir_dot/this.length);\n\n    // Material interpolation\n    if(s>1.0)\n    {\n        res.m.copy(this.materials[1]);\n    }\n    else\n    {\n        if(s<=0.0)\n        {\n            res.m.copy(this.materials[0]);\n        }\n        else\n        {\n            // (1-s)*m0 + s*m1\n            res.m.copy(this.materials[0]);\n            res.m.lerp(this.materials[1], s);\n        }\n    }\n};\n\n/**\n *  @param {!THREE.Vector3} w special_coeff\n *  @return {boolean}\n */\nScalisSegment.prototype.HomotheticClippingSpecial = function(w)\n{\n    // we search solution t \\in [0,1] such that at^2-2bt+c<=0\n    var a = -w.z;\n    var b = -w.y;\n    var c = -w.x;\n\n    var delta = b*b - a*c;\n    if(delta>=0.0)\n    {\n        var b_p_sqrt_delta = b+Math.sqrt(delta);\n        if( (b_p_sqrt_delta<0.0) || (this.length*b_p_sqrt_delta<c) )\n        {\n            return false;\n        }\n        else\n        {\n            var main_root = c / b_p_sqrt_delta;\n            this.clipped_l1 = (main_root<0.0) ? 0.0 : main_root;\n            var a_r = a*main_root;\n            this.clipped_l2 = (2.0*b<a_r+a*this.length) ? c/(a_r) : this.length;\n            return true;\n        }\n    }\n    return false;\n};\n\n// [Abstract] see ScalisPrimitive.heuristicStepWithin\nScalisSegment.prototype.heuristicStepWithin = function() {\n        return this.weight_min / 3;\n};\n\n///////////////////////////////////////////////////////////////////////////\n// Convolution Evaluation functions and auxiliaary functions\n/**\n *  value function for Convol volume type (Homothetic convolution).\n */\nScalisSegment.prototype.evalConvol = function(p, res) {\n    if(!this.valid_aabb){\n        throw \"Error : prepareForEval should have been called\";\n    }\n    // init\n    if(res.g)\n        res.g.set(0,0,0);\n    res.v=0;\n\n    var p_min_to_point = this.tmpVec1;\n    p_min_to_point.subVectors(p,this.p_min);\n\n    var uv = this.increase_unit_dir.dot(p_min_to_point);\n    var d2 = p_min_to_point.lengthSq();\n\n    var special_coeff = this.tmpVec2;\n    special_coeff.set(\n        this.weight_min*this.weight_min - ScalisMath.KIS2 * d2,\n            -this.unit_delta_weight*this.weight_min - ScalisMath.KIS2 * uv ,\n        this.unit_delta_weight*this.unit_delta_weight - ScalisMath.KIS2 );\n\n    // clipped_l1, clipped_l2 are members of segment\n    if(this.HomotheticClippingSpecial(special_coeff))\n    {\n        var inv_local_min_weight = 1.0 / (this.weight_min + this.clipped_l1 * this.unit_delta_weight);\n        special_coeff.x = 1.0 - ScalisMath.KIS2 * ( this.clipped_l1*(this.clipped_l1-2.0*uv) + d2 ) * inv_local_min_weight*inv_local_min_weight;\n        special_coeff.y = - this.unit_delta_weight - ScalisMath.KIS2*(uv-this.clipped_l1) * inv_local_min_weight;\n\n        if (res.g) //both grad and value\n        {\n            if(this.unit_delta_weight >= 0.06) { // ensure a maximum relative error of ??? (for degree i up to 8)\n                this.HomotheticCompactPolynomial_segment_FGradF_i6( (this.clipped_l2-this.clipped_l1) *\n                                                                    inv_local_min_weight,\n                                                                    this.unit_delta_weight,\n                                                                    special_coeff);\n            }else{\n                this.HomotheticCompactPolynomial_approx_segment_FGradF_i6( (this.clipped_l2-this.clipped_l1) *\n                                                                           inv_local_min_weight,\n                                                                           this.unit_delta_weight,\n                                                                           this.inv_weight_min,\n                                                                           special_coeff);\n            }\n\n\n            res.v = ScalisMath.Poly6NF1D * this.f0f1f2.x;\n            this.f0f1f2.y *= inv_local_min_weight;\n            res.g\n                .copy(this.increase_unit_dir)\n                .multiplyScalar(this.f0f1f2.z + this.clipped_l1 * this.f0f1f2.y)\n                .sub(p_min_to_point.multiplyScalar(this.f0f1f2.y))\n                .multiplyScalar(ScalisMath.Poly6NF1D*6.0*ScalisMath.KIS2*inv_local_min_weight);\n        }\n        else //value only\n        {\n            if(this.unit_delta_weight >= 0.06) { // ensure a maximum relative error of ??? (for degree i up to 8)\n                res.v=ScalisMath.Poly6NF1D *\n                    this.HomotheticCompactPolynomial_segment_F_i6( (this.clipped_l2-this.clipped_l1) *\n                                                                   inv_local_min_weight,\n                                                                   this.unit_delta_weight,\n                                                                   special_coeff);\n            }else{\n                res.v=ScalisMath.Poly6NF1D *\n                    this.HomotheticCompactPolynomial_approx_segment_F_i6( (this.clipped_l2-this.clipped_l1) *\n                                                                          inv_local_min_weight,\n                                                                          this.unit_delta_weight,\n                                                                          inv_local_min_weight,\n                                                                          special_coeff);\n            }\n        }\n\n        if(res.m){\n            this.evalMat(p,res);\n        }\n    }\n};\n\n/**\n *  Clamps a number. Based on Zevan's idea: http://actionsnippet.com/?p=475\n *  @param {number} a\n *  @param {number} b\n *  @param {number} c\n *  @return {number} Clamped value\n *  Author: Jakub Korzeniowski\n *  Agency: Softhis\n *  http://www.softhis.com\n */\nScalisSegment.prototype.clamp = function (a,b,c){return Math.max(b,Math.min(c,a));};\n\n// [Abstract] see ScalisPrimitive.distanceTo\nScalisSegment.prototype.distanceTo = function ()\n{\n    var tmpVector = new THREE.Vector3();\n    var tmpVectorProj = new THREE.Vector3();\n    return function(p) {\n        // var thickness = Math.min(this.c0,this.c0+this.c1);\n\n        // return distance point/segment\n        // don't take thickness into account\n        var t = tmpVector.subVectors(p,this.v[0].getPos())\n            .dot(this.dir) / this.lengthSq;\n\n        // clamp is our own function declared there\n        t=this.clamp(t,0,1);\n        tmpVectorProj.copy(this.dir)\n            .multiplyScalar(t)\n            .add(this.v[0].getPos());\n        return p.distanceTo(tmpVectorProj);\n    };\n}();\n\n/**\n *  Sub-function for optimized convolution value computation (Homothetic Compact Polynomial).*\n *  Function designed by Cedric Zanni, optimized for C++ using matlab.\n *  @param {number} l\n *  @param {number} d\n *  @param {!Object} w\n *  @return {number} the value\n */\nScalisSegment.prototype.HomotheticCompactPolynomial_segment_F_i6 = function( l,  d,  w)\n{\n    var t6247 = d * l + 0.1e1;\n    var t6241 = 0.1e1 / t6247;\n    var t6263 = t6247 * t6247;\n    var t2 = t6263 * t6263;\n    var t6244 = 0.1e1 / t2;\n    var t6252 = w.y;\n    var t6249 = t6252 * t6252;\n    var t6273 = 0.12e2 * t6249;\n    var t6258 = 0.1e1 / d;\n    var t6271 = t6252 * t6258;\n    var t6264 = t6247 * t6263;\n    var t6257 = l * l;\n    var t6260 = t6257 * t6257;\n    var t6259 = l * t6257;\n    var t6254 = l * t6260;\n    var t6253 = w.x;\n    var t6251 = w.z;\n    var t6250 = t6253 * t6253;\n    var t6248 = t6251 * t6251;\n    var t3 = t6264 * t6264;\n    var t6246 = 0.1e1 / t3;\n    var t6245 = t6241 * t6244;\n    var t6243 = 0.1e1 / t6264;\n    var t6242 = 0.1e1 / t6263;\n    var t71 = Math.log(t6247);\n    var t93 = t6259 * t6259;\n    return  -t6248 * (((((-(t6241 - 0.1e1) * t6258 - l * t6242) * t6258 - t6257 * t6243) * t6258 - t6259 * t6244) * t6258 - t6260 * t6245) * t6258 - t6254 * t6246) * t6271 + (-t6253 * (t6246 - 0.1e1) * t6258 / 0.6e1 - (-(t6245 - 0.1e1) * t6258 / 0.5e1 - l * t6246) * t6271) * t6250 + ((t6253 * t6273 + 0.3e1 * t6251 * t6250) * (0.2e1 / 0.5e1 * (-(t6244 - 0.1e1) * t6258 / 0.4e1 - l * t6245) * t6258 - t6257 * t6246) + (0.3e1 * t6248 * t6253 + t6251 * t6273) * (0.4e1 / 0.5e1 * (0.3e1 / 0.4e1 * (0.2e1 / 0.3e1 * (-(t6242 - 0.1e1) * t6258 / 0.2e1 - l * t6243) * t6258 - t6257 * t6244) * t6258 - t6259 * t6245) * t6258 - t6260 * t6246) + t6251 * t6248 * (0.6e1 / 0.5e1 * (0.5e1 / 0.4e1 * (0.4e1 / 0.3e1 * (0.3e1 / 0.2e1 * (0.2e1 * (t71 * t6258 - l * t6241) * t6258 - t6257 * t6242) * t6258 - t6259 * t6243) * t6258 - t6260 * t6244) * t6258 - t6254 * t6245) * t6258 - t93 * t6246) + (-0.12e2 * t6251 * t6253 - 0.8e1 * t6249) * (0.3e1 / 0.5e1 * ((-(t6243 - 0.1e1) * t6258 / 0.3e1 - l * t6244) * t6258 / 0.2e1 - t6257 * t6245) * t6258 - t6259 * t6246) * t6252) * t6258 / 0.6e1;\n};\n\n/**\n *  Sub-function for optimized convolution value computation (Homothetic Compact Polynomial).\n *  (Approximation? Faster?).\n *  Function designed by Cedric Zanni, optimized for C++ using matlab.\n *  @param {number} l\n *  @param {number} d\n *  @param {number} q\n *  @param {!Object} w\n */\nScalisSegment.prototype.HomotheticCompactPolynomial_approx_segment_F_i6 = function ( l,  d,  q,  w)\n{\n    var t6386 = q * d;\n    var t6361 = t6386 + 0.1e1;\n    var t6387 = 0.1e1 / t6361;\n    var t1 = t6361 * t6361;\n    var t2 = t1 * t1;\n    var t6359 = t6387 / t2 / t1;\n    var t6363 = w.z;\n    var t6364 = w.y;\n    var t6365 = w.x;\n    var t6366 = l * l;\n    var t6356 = t6363 * t6366 - 0.2e1 * t6364 * l + t6365;\n    var t9 = t6364 * t6364;\n    var t6357 = t6363 * t6365 - t9;\n    var t6358 = t6363 * l - t6364;\n    var t6377 = t6365 * t6365;\n    var t6381 = t6364 * t6377;\n    var t6369 = t6356 * t6356;\n    var t6383 = t6358 * t6369;\n    var t6362 = 0.1e1 / t6363;\n    var t6384 = t6357 * t6362;\n    var t6385 = 0.6e1 / 0.35e2 * (0.4e1 / 0.3e1 * (0.2e1 * t6357 * l + t6358 * t6356 + t6364 * t6365) * t6384 + t6383 + t6381) * t6384 + t6356 * t6383 / 0.7e1 + t6365 * t6381 / 0.7e1;\n    var t6380 = t6362 * t6385;\n    var t6360 = t6387 * t6359;\n    var t6355 = t6369 * t6369;\n    var t27 = t6377 * t6377;\n    var t6353 = t6364 * t6380 + t6355 / 0.8e1 - t27 / 0.8e1;\n    var t6352 = -l * t6355 + (-0.10e2 * t6364 * t6353 + t6365 * t6385) * t6362;\n    var t65 = q * q;\n    return  t6380 - 0.7e1 * d * t6353 * t6362 + (-0.1111111111e0 * (0.3e1 * t6359 - 0.300e1 + 0.7e1 * (0.2e1 + t6360) * t6386) * t6352 - 0.1000000000e0 * (0.2e1 - 0.200e1 * t6359 - 0.7e1 * (0.1e1 + t6360) * t6386) / q * (-0.1e1 * t6366 * t6355 + (0.1333333333e1 * t6364 * t6352 + 0.2e1 * t6365 * t6353) * t6362)) * t6362 / t65;\n};\n\n/**\n *  Sub-function for optimized convolution value and gradient computation (Homothetic Compact Polynomial).\n *  Function designed by Cedric Zanni, optimized for C++ using matlab.\n *  Result is stored in this.f0f1f2\n *  @param {number} l\n *  @param {number} d\n *  @param {!Object} w\n *\n */\nScalisSegment.prototype.HomotheticCompactPolynomial_segment_FGradF_i6 = function( l,  d,  w)\n{\n    var t6320 = d * l + 0.1e1;\n    var t6314 = 0.1e1 / t6320;\n    var t6336 = t6320 * t6320;\n    var t2 = t6336 * t6336;\n    var t6317 = 0.1e1 / t2;\n    var t6325 = w.y;\n    var t6322 = t6325 * t6325;\n    var t6351 = 0.2e1 * t6322;\n    var t6324 = w.z;\n    var t6326 = w.x;\n    var t6350 = t6324 * t6326 / 0.3e1 + 0.2e1 / 0.3e1 * t6322;\n    var t6321 = t6324 * t6324;\n    var t6349 = t6321 / 0.6e1;\n    var t6348 = -0.2e1 / 0.3e1 * t6324;\n    var t6337 = t6320 * t6336;\n    var t6316 = 0.1e1 / t6337;\n    var t6318 = t6314 * t6317;\n    var t7 = t6337 * t6337;\n    var t6319 = 0.1e1 / t7;\n    var t6330 = l * l;\n    var t6331 = 0.1e1 / d;\n    var t6332 = l * t6330;\n    var t6309 = 0.3e1 / 0.5e1 * ((-(t6316 - 0.1e1) * t6331 / 0.3e1 - l * t6317) * t6331 / 0.2e1 - t6330 * t6318) * t6331 - t6332 * t6319;\n    var t6347 = t6309 * t6325;\n    var t6311 = -(t6318 - 0.1e1) * t6331 / 0.5e1 - l * t6319;\n    var t6323 = t6326 * t6326;\n    var t6346 = t6323 * t6311;\n    var t6310 = 0.2e1 / 0.5e1 * (-(t6317 - 0.1e1) * t6331 / 0.4e1 - l * t6318) * t6331 - t6330 * t6319;\n    var t6345 = t6326 * t6310;\n    var t6344 = -t6323 * (t6319 - 0.1e1) / 0.6e1;\n    var t6333 = t6330 * t6330;\n    var t6327 = l * t6333;\n    var t6315 = 0.1e1 / t6336;\n    var t6308 = 0.4e1 / 0.5e1 * (0.3e1 / 0.4e1 * (0.2e1 / 0.3e1 * (-(t6315 - 0.1e1) * t6331 / 0.2e1 - l * t6316) * t6331 - t6330 * t6317) * t6331 - t6332 * t6318) * t6331 - t6333 * t6319;\n    var t6307 = ((((-(t6314 - 0.1e1) * t6331 - l * t6315) * t6331 - t6330 * t6316) * t6331 - t6332 * t6317) * t6331 - t6333 * t6318) * t6331 - t6327 * t6319;\n    var t81 = t6332 * t6332;\n    var t92 = Math.log(t6320);\n    this.f0f1f2.x = (t6326 * t6344 - t6325 * t6346 + t6345 * t6351 - 0.4e1 / 0.3e1 * t6322 * t6347 + (t6323 * t6310 / 0.2e1 + t6308 * t6351 - 0.2e1 * t6326 * t6347) * t6324 + (t6326 * t6308 / 0.2e1 - t6325 * t6307 + (-t81 * t6319 / 0.6e1 + (-t6327 * t6318 / 0.5e1 + (-t6333 * t6317 / 0.4e1 + (-t6332 * t6316 / 0.3e1 + (-t6330 * t6315 / 0.2e1 + (t92 * t6331 - l * t6314) * t6331) * t6331) * t6331) * t6331) * t6331) * t6324) * t6321) * t6331;\n    this.f0f1f2.y = (t6344 + t6310 * t6350 + t6308 * t6349 + (-0.2e1 / 0.3e1 * t6326 * t6311 + t6309 * t6348) * t6325) * t6331;\n    this.f0f1f2.z = (t6346 / 0.6e1 + t6309 * t6350 + t6307 * t6349 + (-0.2e1 / 0.3e1 * t6345 + t6308 * t6348) * t6325) * t6331;\n};\n\n/**\n *  Sub-function for optimized convolution value and gradient computation (Homothetic Compact Polynomial).\n *  Function designed by Cedric Zanni, optimized for C++ using matlab.\n *  Result is stored in this.f0f1f2\n *  @param {number} l\n *  @param {number} d\n *  @param {!Object} w\n */\nScalisSegment.prototype.HomotheticCompactPolynomial_approx_segment_FGradF_i6 = function ( l,  d,  q,  w)\n{\n    var t6478 = q * d;\n    var t6443 = t6478 + 0.1e1;\n    var t6479 = 0.1e1 / t6443;\n    var t1 = q * q;\n    var t6449 = 0.1e1 / t1;\n    var t2 = t6443 * t6443;\n    var t3 = t2 * t2;\n    var t6441 = t6479 / t3 / t2;\n    var t6448 = w.x;\n    var t6477 = 0.2e1 * t6448;\n    var t6446 = w.z;\n    var t6444 = 0.1e1 / t6446;\n    var t6476 = d * t6444;\n    var t6447 = w.y;\n    var t6451 = l * l;\n    var t6438 = t6446 * t6451 - 0.2e1 * t6447 * l + t6448;\n    var t6455 = t6438 * t6438;\n    var t6437 = t6438 * t6455;\n    var t6463 = t6448 * t6448;\n    var t6445 = t6448 * t6463;\n    var t10 = t6447 * t6447;\n    var t6439 = t6446 * t6448 - t10;\n    var t6440 = t6446 * l - t6447;\n    var t6470 = t6439 * t6444;\n    var t6433 = 0.4e1 / 0.3e1 * (0.2e1 * t6439 * l + t6440 * t6438 + t6447 * t6448) * t6470 + t6440 * t6455 + t6447 * t6463;\n    var t6473 = t6433 / 0.5e1;\n    var t6432 = t6447 * t6444 * t6473 + t6437 / 0.6e1 - t6445 / 0.6e1;\n    var t6429 = -l * t6437 + (-0.8e1 * t6447 * t6432 + t6448 * t6473) * t6444;\n    var t6469 = t6451 * t6437;\n    var t6427 = -t6469 + (0.10e2 / 0.7e1 * t6447 * t6429 + t6432 * t6477) * t6444;\n    var t6475 = -t6427 / 0.8e1;\n    var t6474 = 0.6e1 / 0.35e2 * t6433 * t6470 + t6440 * t6437 / 0.7e1 + t6447 * t6445 / 0.7e1;\n    var t6442 = t6479 * t6441;\n    var t6472 = (0.3e1 * t6441 - 0.300e1 + 0.7e1 * (0.2e1 + t6442) * t6478) * t6449;\n    var t6471 = (0.2e1 - 0.200e1 * t6441 - 0.7e1 * (0.1e1 + t6442) * t6478) / q * t6449;\n    var t6468 = t6444 * t6472;\n    var t6467 = t6444 * t6471;\n    var t6466 = t6444 * t6474;\n    var t6436 = t6455 * t6455;\n    var t57 = t6463 * t6463;\n    var t6430 = t6447 * t6466 + t6436 / 0.8e1 - t57 / 0.8e1;\n    var t6428 = -l * t6436 + (-0.10e2 * t6447 * t6430 + t6448 * t6474) * t6444;\n    this.f0f1f2.x = t6466 - 0.7e1 * t6430 * t6476 - t6428 * t6468 / 0.9e1 - (-t6451 * t6436 + (0.4e1 / 0.3e1 * t6447 * t6428 + t6430 * t6477) * t6444) * t6467 / 0.10e2;\n    this.f0f1f2.y = (t6473 - 0.7e1 * d * t6432 - t6429 * t6472 / 0.7e1 + t6471 * t6475) * t6444;\n    this.f0f1f2.z = t6432 * t6444 + t6429 * t6476 + t6468 * t6475 - (-l * t6469 + (0.3e1 / 0.2e1 * t6447 * t6427 - 0.3e1 / 0.7e1 * t6448 * t6429) * t6444) * t6467 / 0.9e1;\n};\n// End of organic evaluation functions\n////////////////////////////////////////////////////////////////////////////\n\nmodule.exports = ScalisSegment;\n","'use strict';\n\nconst THREE = require(\"three\");\n\n\nvar EPSILON = 0.000001;\n\nvar TriangleUtils = {};\n\n/*\n  ! Triangle extends Primitive and must have the following properties in constructor: !\n\n    this.p0p1  = new THREE.Vector3();\n    this.p1p2 = new THREE.Vector3();\n    this.p2p0 = new THREE.Vector3();\n    this.unit_normal = new THREE.Vector3();\n    this.unit_p0p1 = new THREE.Vector3();\n    this.unit_p1p2 = new THREE.Vector3();\n    this.unit_p2p0 = new THREE.Vector3();\n    this.length_p0p1 = 0;\n    this.length_p1p2 = 0;\n    this.length_p2p0 = 0;\n    this.diffThick_p0p1 = 0;\n    this.diffThick_p0p1 = 0;\n    this.diffThick_p0p1 = 0;\n    this.main_dir = new THREE.Vector3();\n    this.point_iso_zero = new THREE.Vector3();\n    this.ortho_dir      = new THREE.Vector3();\n    this.unsigned_ortho_dir = new THREE.Vector3();\n    this.proj_dir       = new THREE.Vector3();\n    this.equal_weights = false; // Use to skip computations for a specific case\n\n    this.coord_max           = 0;\n    this.coord_middle        = 0;\n    this.unit_delta_weight   = 0;\n    this.longest_dir_special = 0;\n    this.max_seg_length      = 0;\n    this.half_dir_1 = new THREE.Vector3();\n    this.point_half = new THREE.Vector3();\n    this.half_dir_2 = new THREE.Vector3();\n    this.point_min = new THREE.Vector3();\n    this.weight_min = 0;\n\n*/\n\n// intermediary functions used in computeVectorsDirs\nvar cleanIndex = function(ind, lengthArray) {\n    var res =ind;\n    if (lengthArray === 0 ){\n        throw \"Lenght of the array should not be null\";\n        return res;\n    }\n    if (lengthArray ===1){\n        return 0;\n    }\n    // negative index are looped back at the end of the array\n    if (ind < 0) res = (lengthArray+ind) % lengthArray;\n    // index greater than the array length are looped back at the beginning\n    if (ind >= lengthArray) {\n        res = ind % lengthArray;\n    }\n    return res;\n};\n\n/**\n *  Compute some internal vars for triangle\n *  @param {!Object} triangle The triangle to compute vars for (blobtree or skel)\n */\nTriangleUtils.computeVectorsDirs = function(triangle){\n\n    var v0_p = triangle.v[0].getPos();\n    var v1_p = triangle.v[1].getPos();\n    var v2_p = triangle.v[2].getPos();\n\n    triangle.p0p1.subVectors(v1_p,v0_p);\n    triangle.p1p2.subVectors(v2_p,v1_p);\n    triangle.p2p0.subVectors(v0_p,v2_p);\n\n    //triangle.unit_normal.crossVectors(triangle.p0p1,triangle.p1p2);\n    triangle.unit_normal.crossVectors(triangle.p0p1,triangle.p2p0);\n    triangle.unit_normal.normalize();\n\n    triangle.length_p0p1 = triangle.p0p1.length();\n    triangle.unit_p0p1.copy(triangle.p0p1);\n    triangle.unit_p0p1.divideScalar(triangle.length_p0p1);\n    triangle.diffThick_p0p1 = triangle.v[0].getThickness()-triangle.v[1].getThickness();\n\n    triangle.length_p1p2 = triangle.p1p2.length();\n    triangle.unit_p1p2.copy(triangle.p1p2);\n    triangle.unit_p1p2.divideScalar(triangle.length_p1p2);\n    triangle.diffThick_p1p2 = triangle.v[1].getThickness()-triangle.v[2].getThickness();\n\n    triangle.length_p2p0 = triangle.p2p0.length();\n    triangle.unit_p2p0.copy(triangle.p2p0);\n    triangle.unit_p2p0.divideScalar(triangle.length_p2p0);\n    triangle.diffThick_p2p0 = triangle.v[2].getThickness()-triangle.v[0].getThickness();\n\n    // Precomputation Used in mech computation\n    // So we first find the direction of maximum weight variation.\n\n    var sortingArr = [];\n    sortingArr.push({ vert: triangle.v[0].getPos(), thick: triangle.v[0].getThickness(), idx:0});\n    sortingArr.push({ vert: triangle.v[1].getPos(), thick: triangle.v[1].getThickness(), idx:1});\n    sortingArr.push({ vert: triangle.v[2].getPos(), thick: triangle.v[2].getThickness(), idx:2});\n\n    // sort by the min thickness\n    sortingArr.sort(function(a, b) { return a.thick - b.thick;});\n    triangle.point_min = sortingArr[0].vert;\n    triangle.weight_min = sortingArr[0].thick;\n    // Cycle throught the other points\n    var idx = cleanIndex(sortingArr[0].idx+1,3);\n    var point_1 = triangle.v[idx].getPos();\n    var weight_1 = triangle.v[idx].getThickness();\n    idx = cleanIndex(sortingArr[0].idx+2,3);\n    var point_2 = triangle.v[idx].getPos();\n    var weight_2 = triangle.v[idx].getThickness();\n    var dir_1 = new THREE.Vector3();\n    dir_1 = dir_1.subVectors(point_1, triangle.point_min);\n    var dir_2 = new THREE.Vector3();\n    dir_2 = dir_2.subVectors(point_2, triangle.point_min);\n    var delta_1 = weight_1 - triangle.weight_min;\n    var delta_2 = weight_2 - triangle.weight_min;\n    if(delta_1 < EPSILON || delta_2 < EPSILON)\n    {\n        if(delta_1 < delta_2)\n        { //delta_1 is closer to 0\n            triangle.ortho_dir = dir_1.clone();\n            triangle.ortho_dir.normalize();\n\n            // direction of fastest variation of weight\n            triangle.main_dir.crossVectors(triangle.ortho_dir, triangle.unit_normal);\n            triangle.main_dir.normalize();\n            if( (triangle.main_dir.dot(dir_2)) < 0.0) {\n                triangle.main_dir.multiplyScalar( -1.0);\n            }\n            var coord_iso_zero_dir = - triangle.weight_min / delta_2;\n            triangle.point_iso_zero = new THREE.Vector3( triangle.point_min.x + coord_iso_zero_dir*dir_2.x,\n                                                triangle.point_min.y + coord_iso_zero_dir*dir_2.y,\n                                                triangle.point_min.z + coord_iso_zero_dir*dir_2.z);\n        }\n        else\n        { //delta_2 is closer to 0\n            triangle.ortho_dir = dir_2.clone();\n            triangle.ortho_dir.normalize();\n\n            // direction of fastest variation of weight\n            triangle.main_dir.crossVectors(triangle.ortho_dir, triangle.unit_normal);\n            triangle.main_dir.normalize();\n            if( (triangle.main_dir.dot(dir_1)) < 0.0) {\n                triangle.main_dir.multiplyScalar( -1.0);\n            }\n            var coord_iso_zero_dir = - triangle.weight_min / delta_1;\n            triangle.point_iso_zero = new THREE.Vector3(triangle.point_min.x + coord_iso_zero_dir*dir_1.x,\n                                                triangle.point_min.y + coord_iso_zero_dir*dir_1.y,\n                                                triangle.point_min.z + coord_iso_zero_dir*dir_1.z);\n        }\n        if(Math.abs(delta_1-delta_2)< EPSILON) {\n            triangle.proj_dir = triangle.unit_normal.clone().multiplyScalar(-1);\n            triangle.equal_weights = true;\n        }\n    }\n    else\n    { // WARNING : numerically instable if delta_ close to zero !\n        // find the point were weight equal zero along the two edges that leave from point_min\n        var coord_iso_zero_dir1 = - triangle.weight_min / delta_1;\n        var point_iso_zero1 = new THREE.Vector3(triangle.point_min.x + coord_iso_zero_dir1*dir_1.x,\n                                            triangle.point_min.y + coord_iso_zero_dir1*dir_1.y,\n                                            triangle.point_min.z + coord_iso_zero_dir1*dir_1.z);\n        triangle.point_iso_zero = point_iso_zero1;\n        var coord_iso_zero_dir2 = - triangle.weight_min / delta_2;\n        var point_iso_zero2 = new THREE.Vector3(triangle.point_min.x + coord_iso_zero_dir2*dir_2.x,\n                                            triangle.point_min.y + coord_iso_zero_dir2*dir_2.y,\n                                            triangle.point_min.z + coord_iso_zero_dir2*dir_2.z);\n\n        // along ortho_dir the weight are const\n        triangle.ortho_dir.subVectors(point_iso_zero2, point_iso_zero1);\n        triangle.ortho_dir.normalize();\n\n        // direction of fastest variation of weight\n        triangle.main_dir.crossVectors(triangle.ortho_dir, triangle.unit_normal);\n        triangle.main_dir.normalize();\n        if( (triangle.main_dir.dot(dir_1)) < 0.0 || (triangle.main_dir.dot(dir_2)) < 0.0) {\n            triangle.main_dir.multiplyScalar( -1.0);\n        }\n    }\n\n    var coord_1 = dir_1.dot(triangle.main_dir);    // not normalized !\n    var coord_2 = dir_2.dot(triangle.main_dir);    // not normalized !\n\n    // due to previous approximation for stability\n    coord_1 = (coord_1<0.0) ? 0.0 : coord_1;\n    coord_2 = (coord_2<0.0) ? 0.0 : coord_2;\n\n    var longest_dir = null;\n    if(coord_1 > coord_2)\n    {\n        longest_dir = dir_1;\n\n        triangle.half_dir_1 = dir_2;\n        triangle.point_half = point_2;\n        triangle.half_dir_2 = point_1.clone().subVectors(point_1,point_2);\n\n        triangle.coord_max = coord_1;\n        triangle.coord_middle = (coord_2/coord_1) * triangle.coord_max;\n\n        triangle.unit_delta_weight = delta_1 / triangle.coord_max;\n    }\n    else\n    {\n        longest_dir = dir_2;\n\n        triangle.half_dir_1 = dir_1;\n        triangle.point_half = point_1;\n        triangle.half_dir_2 = point_2.clone().subVectors(point_2,point_1);\n\n        triangle.coord_max = coord_2;\n        triangle.coord_middle = (coord_1/coord_2) * triangle.coord_max;\n\n        triangle.unit_delta_weight = delta_2 / triangle.coord_max;\n    }\n\n    triangle.longest_dir_special = longest_dir.divideScalar(triangle.coord_max);\n\n    // Length of the longest segment during numerical integration\n    var tmp = new THREE.Vector3();\n    tmp.subVectors(triangle.half_dir_1, triangle.longest_dir_special.clone().multiplyScalar(triangle.coord_middle));\n    triangle.max_seg_length = tmp.length();\n    triangle.unsigned_ortho_dir = triangle.ortho_dir.clone();\n    if( (triangle.ortho_dir.dot(tmp)) < 0.0 ) {\n        triangle.ortho_dir.multiplyScalar(-1.0);\n    }\n};\n\n/**\n *  @param {!Object} triangle\n *     u parametrisation of the point to compute along the axis V0->V1\n *     v parametrisation of the point to compute along the axis V0->V2\n *  @return {{pos:!THREE.Vector3, thick:number}} An object with the computed pos and thickness\n */\nTriangleUtils.getParametrisedVertexAttr = function(triangle, u, v){\n    var meanThick = TriangleUtils.getMeanThick(triangle, u, v);\n    // create new point\n    var pos = new THREE.Vector3();\n    var uAdd = pos.subVectors(triangle.v[1].getPos(), triangle.v[0].getPos()).multiplyScalar(u);\n    var vAdd = pos.clone().subVectors(triangle.v[2].getPos(), triangle.v[0].getPos()).multiplyScalar(v);\n    pos.addVectors(triangle.v[0].getPos(), uAdd);\n    pos.addVectors(pos, vAdd);\n\n    return {\"pos\": pos, \"thick\": meanThick};\n};\n\n/**\n *  @param {!Object} triangle The concerned triangle\n *  @param {number} u u coordinate\n *  @param {number} v v coordinate\n *  @return {number}\n */\nTriangleUtils.getMeanThick = function(triangle, u, v){\n    return triangle.v[0].getThickness()*(1-u-v) + triangle.v[1].getThickness()*u + triangle.v[2].getThickness()*v;\n};\n\n/**\n *  @param {!Object} triangle The concerned triangle\n *  @param {number} u u coordinate\n *  @param {number} v v coordinate\n *  @return {!Material} Interpolated material\n */\nTriangleUtils.getMeanMat = function(triangle, u, v){\n    var res = new Material();\n    var m_arr = triangle.materials === null?\n        [triangle.v[0].getMaterial(),triangle.v[0].getMaterial(),triangle.v[0].getMaterial()] :\n        [triangle.materials[0],triangle.materials[1],triangle.materials[2]];\n    res.weightedMean(\n        m_arr,\n        [1-u-v,u,v]\n    );\n    return res;\n};\n\n\n/*  Cf. http://math.stackexchange.com/questions/148199/equation-for-non-orthogonal-projection-of-a-point-onto-two-vectors-representing\n    eq1: W=uU+vV with u and v the parametrisation and V and U the basis vectors\n     -> eq 1.dot(U) gives us eq A/   and eq 1.dot(V) gives us eq B/\n\n    A/ u(U⋅U)+v(U⋅V)=W⋅U\n    B/ u(V⋅U)+v(V⋅V)=W⋅V\n    <=>\n    u*a + v*b = c;\n    u*d + v*e = f;\n    <=>\n    v = (f-d*(c/a))*(1/(e-d*b/a));\n    u = (c-v*b)/a;\n    with:\n    a = U.lengthSq();\n    b = U.dot(V);\n    c = p.dot(U);\n    d = V.dot(U);\n    e = V.lengthSq();\n    f = W.dot(V);\n*/\n/**\n *  Get the triangle barycenter coordinates. The projection is non orthogonal.\n *  WTF is that? Barycentirc coordinates are 3 components, not 2 !\n *  @param {!THREE.Vector3} p0p1 Vector from p0 to p1\n *  @param {!THREE.Vector3} p2p0 Vector from p2 to p0\n *  @param {!THREE.Vector3} p0 Point 0 in triangle\n *  @param {!THREE.Vector3} p Point in space\n *\n *  @return {{u:number,v:number}} Coordinate of barycenter\n */\nTriangleUtils.getTriBaryCoord = function(p0p1, p2p0, p0, p){\n    var U = p0p1;\n    var V = p2p0.clone().multiplyScalar(-1);\n    var W = new THREE.Vector3().subVectors(p, p0);\n\n    // b == d\n    var a = U.lengthSq();\n    var b = U.dot(V);\n    var c = W.dot(U);\n    var d = V.lengthSq();\n    var e = W.dot(V);\n    var v = (a*e-b*c)/(a*d-b*b);\n    var u = (c-v*b)/a;\n    return {\"u\":u, \"v\":v};\n};\n\nTriangleUtils.getUVCoord = function(U, V, p0, p){\n    var W = new THREE.Vector3();\n    W.crossVectors(U,V);\n    var mat = new THREE.Matrix4();\n    mat.set(U.x, V.x, W.x,0,\n            U.y, V.y, W.y,0,\n            U.z, V.z, W.z,0,\n              0,   0,   0,1);\n    var mat1 = new THREE.Matrix4();\n    mat1.copy(mat).invert();\n    var vec = new THREE.Vector3().subVectors(p, p0);\n    vec.applyMatrix4(mat1);\n\n    return {u:vec.x,v:vec.y};\n};\n\nmodule.exports = TriangleUtils;\n","'use strict';\n\nconst THREE = require(\"three\");\nconst ScalisMath = require(\"../scalis/ScalisMath.js\");\nconst Area = require(\"./Area.js\");\nconst TriangleUtils = require(\"../../utils/TriangleUtils.js\");\nconst Accuracies = require(\"../accuracies/Accuracies.js\");\nconst AreaScalisSeg = require(\"./AreaScalisSeg\");\n\n/**\n *  Bounding area for the triangle.\n *  It is the same for DIST and CONVOL primitives since the support of the convolution\n *  kernel is the same as the support for the distance field.\n *\n *  The Area must be able to return accuracy needed in a given zone (Sphere fr now,\n *  since box intersections with such a complex shape are not trivial), and also\n *  propose an intersection test.\n *\n *  @extends {Area}\n *\n *  @param {Array.<!ScalisVertex>} v Array or vertices\n *  @param {!THREE.Vector3} unit_normal Normal to the plane made by the 3 vertices, as a THREE.Vector3\n *  @param {!THREE.Vector3} main_dir Main direction dependeing on thicknesses\n *  @param {!Object}  segParams\n *  @param {number}  min_thick Minimum thickness in the Triangle\n *  @param {number} max_thick Maximum thickness in the triangle\n *\n * @constructor\n */\nvar AreaScalisTri = function(v,unit_normal,main_dir,segParams,min_thick,max_thick)\n{\n    Area.call(this);\n\n    this.tmpVect = new THREE.Vector3();\n    this.min_thick = min_thick;\n    this.max_thick = max_thick;\n    this.v = v;\n    this.p0p1 = this.tmpVect.clone().subVectors(this.v[1].getPos(), this.v[0].getPos());\n    this.p2p0 = this.tmpVect.clone().subVectors(this.v[0].getPos(), this.v[2].getPos());\n    this.unit_normal = unit_normal; // Normal computed from crossVectors of p0p1 and P2p1\n    this.main_dir = main_dir;\n    var delta_1 = Math.abs(this.v[0].getThickness() - this.v[1].getThickness());\n    var delta_2 = Math.abs(this.v[1].getThickness() - this.v[2].getThickness());\n    this.equal_weights = (delta_1/Math.abs(this.v[0].getThickness()+this.v[1].getThickness()) < 0.001\n                         && delta_2/Math.abs(this.v[1].getThickness()+this.v[2].getThickness()) < 0.001);\n    /* segParams is defined as: (e.g for segment p0p1)\n    segParams.push({\"norm\":         this.length_p0p1,\n                    \"diffThick\":    this.diffThick_p0p1,\n                    \"dir\":          this.unit_p0p1,\n                    \"v\":            [this.v[0], this.v[1]],\n                    \"ortho_vec_x\":  this.v[0].getThickness() - this.v[1].getThickness(),\n                    \"ortho_vec_y\":  this.length_p0p1});\n    */\n    this.segParams = segParams;\n\n    // Store tmp computation parameters when doing computation on one segment of the triangle\n    this.segAttr = {\"p0_to_p\": 0,\n                    \"p0_to_p_sqrnorm\": 0,\n                    \"x_p_2D\": 0,\n                    \"y_p_2D\": 0,\n                    \"y_p_2DSq\": 0,\n                    \"p_proj_x\": 0 };\n\n\n    // Construct the triangular prism going through each vertices\n    var n1 = this.tmpVect.clone().crossVectors(this.segParams[0].dir, this.unit_normal ).normalize();\n    var n2 = this.tmpVect.clone().crossVectors(this.segParams[1].dir, this.unit_normal ).normalize();\n    var n3 = this.tmpVect.clone().crossVectors(this.segParams[2].dir, this.unit_normal ).normalize();\n    // Compute the prism vertices\n    this.tmpVect.copy(this.unit_normal);\n    var pri = [];\n    pri.push(this.tmpVect.clone().addVectors(this.v[0].getPos(), this.tmpVect.multiplyScalar(this.v[0].getThickness()*ScalisMath.KS)));\n    this.tmpVect.copy(this.unit_normal);\n    pri.push(this.tmpVect.clone().addVectors(this.v[1].getPos(), this.tmpVect.multiplyScalar(this.v[1].getThickness()*ScalisMath.KS)));\n    this.tmpVect.copy(this.unit_normal);\n    pri.push(this.tmpVect.clone().addVectors(this.v[2].getPos(), this.tmpVect.multiplyScalar(this.v[2].getThickness()*ScalisMath.KS)));\n    this.tmpVect.copy(this.unit_normal);\n    pri.push(this.tmpVect.clone().addVectors(this.v[0].getPos(), this.tmpVect.multiplyScalar(-this.v[0].getThickness()*ScalisMath.KS)));\n    this.tmpVect.copy(this.unit_normal);\n    pri.push(this.tmpVect.clone().addVectors(this.v[1].getPos(), this.tmpVect.multiplyScalar(-this.v[1].getThickness()*ScalisMath.KS)));\n    this.tmpVect.copy(this.unit_normal);\n    pri.push(this.tmpVect.clone().addVectors(this.v[2].getPos(), this.tmpVect.multiplyScalar(-this.v[2].getThickness()*ScalisMath.KS)));\n    // Compute the normals of top and bottom faces of the prism\n    var tmp2 = new THREE.Vector3();\n    this.tmpVect.subVectors(pri[1], pri[0]);\n    tmp2.subVectors(pri[2], pri[0]);\n    var n4 = this.tmpVect.clone().crossVectors(this.tmpVect, tmp2).normalize();\n    this.tmpVect.subVectors(pri[5], pri[3]);\n    tmp2.subVectors(pri[4], pri[3]);\n    var n5 = this.tmpVect.clone().crossVectors(this.tmpVect, tmp2).normalize();\n\n    // planeParams contains the definition of the prism 5 faces {normal, orig}\n    this.planeParams = [];\n    this.planeParams.push({\"orig\":this.v[0].getPos(), \"n\":n1});\n    this.planeParams.push({\"orig\":this.v[1].getPos(), \"n\":n2});\n    this.planeParams.push({\"orig\":this.v[2].getPos(), \"n\":n3});\n    this.planeParams.push({\"orig\":pri[0], \"n\":n4});\n    this.planeParams.push({\"orig\":pri[3], \"n\":n5});\n\n    // use segments areas to factoirize some code.\n    this.segAreas = [];\n    for(var i=0; i<3; ++i){\n        this.segAreas.push(\n            new AreaScalisSeg(\n                this.segParams[i].v[0].getPos(),this.segParams[i].v[1].getPos(),\n                this.segParams[i].v[0].getThickness(), this.segParams[i].v[1].getThickness(),\n                this.segParams[i].norm, this.segParams[i].dir)\n        );\n    }\n\n};\n\nAreaScalisTri.prototype = Object.create(Area.prototype);\nAreaScalisTri.prototype.constructor = AreaScalisTri;\n\n\n/**\n *  Compute projection (used in other functions)\n *  @param {!THREE.Vector3} p Point to proj\n *  @param {!Object} segParams A seg param object\n *\n *  @protected\n */\nAreaScalisTri.prototype.proj_computation = function(p, segParams){\n    this.segAttr.p0_to_p = this.tmpVect;\n    this.segAttr.p0_to_p.subVectors(p, segParams.v[0].getPos());\n    this.segAttr.p0_to_p_sqrnorm = this.segAttr.p0_to_p.lengthSq();\n    this.segAttr.x_p_2D = this.segAttr.p0_to_p.dot(segParams.dir);\n    // pythagore inc.\n    this.segAttr.y_p_2DSq = this.segAttr.p0_to_p_sqrnorm - this.segAttr.x_p_2D*this.segAttr.x_p_2D;\n    this.segAttr.y_p_2D = this.segAttr.y_p_2DSq>0 ? Math.sqrt(this.segAttr.y_p_2DSq) : 0; // because of rounded errors tmp can be <0 and this causes the next sqrt to return NaN...\n\n    var t = -this.segAttr.y_p_2D/segParams.ortho_vec_y;\n    // P proj is the point at the intersection of:\n    //              - the local X axis (computation in the unit_dir basis)\n    //                  and\n    //              - the line defined by P and the vector orthogonal to the weight line\n    this.segAttr.p_proj_x = this.segAttr.x_p_2D + t*segParams.ortho_vec_x;\n    //this.segAttr.p_proj_y = 0.0;\n};\n\n/**\n *  Test intersection of the shape with a sphere\n *  @return {boolean} true if the sphere and the area intersect\n *\n *  @param {!{r:number,c:!THREE.Vector3}} sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n *\n */\nAreaScalisTri.prototype.sphereIntersect = function(sphere)\n{\n    // First: Test the intersection of the sphere to all three segments as they are included in the triangle bv\n    for(var i=0; i<3; i++) {\n        var intersectSeg = this.sphereIntersectSegment(sphere, this.segParams[i], ScalisMath.KS);\n        // The sphere intersecting ones the angle means the sphere intersect the Bounding Volume\n        if (intersectSeg) {return true;}\n    }\n    // Second: Test the intersection of the sphere with the triangular prism defined by\n    // the 2D triangle constructed from the vertices and of half heights Ti*KS along the unit_normal for each vertices Vi\n    for (var i=0, inside = true; i<5; i++) {\n        this.tmpVect.subVectors(sphere.center, this.planeParams[i].orig);\n        // Get the signed dist to the plane\n        var dist = this.tmpVect.dot(this.planeParams[i].n);\n        // if the dist to the plane is positive, we are in the part where the normal is\n        inside = inside && (dist+sphere.r>0); // Modulation by the sphere radius\n    }\n    // If the sphere is outside one of the plane-> BLAM OUTSIDE SON\n    return inside;\n};\n\n/**\n *  Adapted from the segment sphere intersection. Could be factorised!\n *  @return {boolean} true if the sphere and the area intersect\n *\n *  @param {!{r:number,c:!THREE.Vector3}} sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n *  @param {!Object} segParams A segParams object containing data for a segment\n *  @param {number} KS Kernel Scale, ie ScalisMath.KS (Why is it a parameter, its global!?)\n *\n */\nAreaScalisTri.prototype.sphereIntersectSegment = function(sphere, segParams, KS)\n{\n    this.proj_computation(sphere.center, segParams);\n\n    var thick0 = segParams.v[0].getThickness();\n    var thick1 = segParams.v[1].getThickness();\n    if(this.segAttr.p_proj_x<0.0){\n        return (Math.sqrt(this.segAttr.p0_to_p_sqrnorm)-sphere.r < thick0*KS);\n    }else{\n        if( this.segAttr.p_proj_x > segParams.norm)\n        {\n            this.segAttr.p0_to_p.subVectors(sphere.center, segParams.v[1].getPos());\n            return this.segAttr.p0_to_p.length()-sphere.r < thick1*KS;\n        }else{\n            var sub1 = this.segAttr.x_p_2D - this.segAttr.p_proj_x;\n            var dist = sub1*sub1 + this.segAttr.y_p_2DSq;\n            var tt = this.segAttr.p_proj_x/segParams.norm;\n            var inter_w = thick0*(1.0-tt) + tt*thick1;\n            var tmp = sphere.r + inter_w*KS;\n            return (dist<tmp*tmp);\n        }\n    }\n};\n\n/**\n *  Test if p is in the area.\n *\n *  @return {boolean} true if p is in th area, false otherwise.\n *\n *  @param {!THREE.Vector3} p A point in space\n *\n */\nAreaScalisTri.prototype.contains = function(p)\n{\n    var sphere = {r:0, c:p};\n    return this.sphereIntersect(sphere);\n};\n\n/**\n *  Copied from AreaSeg.getAcc\n *\n *  @param {!{r:number,c:!THREE.Vector3}} sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n *  @param {!Object} segParams A segParams object containing data for a segment area\n *\n *  @return {!Object} Object containing intersect (boolean) and currAcc (number) attributes\n */\nAreaScalisTri.prototype.getAccSegment = function(sphere, segParams)\n{\n    var allReturn = {intersect:false, currAcc:Accuracies.nice*this.min_thick};\n    if (this.sphereIntersectSegment(sphere, segParams, 1)) {\n        // Thales between two triangles that have the same angles gives us the dist of:\n        // side A = sphere.r*this.abs_diff_thick/this.length;\n        // Then pythagore this shit up as A² + sphere.r² = delta²\n        // i.e delta² = (sphere.r*this.abs_diff_thick/this.length)² + sphere.r²\n        // <=> delta = sphere.r*Math.sqrt(1+(this.abs_diff_thick/this.length)²);\n        var tmp = Math.abs(segParams.diffThick)/segParams.norm;\n        var half_delta = sphere.r*Math.sqrt(1+tmp*tmp)*0.5;\n\n        var thick0 = segParams.v[0].getThickness();\n        var thick1 = segParams.v[1].getThickness();\n        // we check only the direction where the weight is minimum since\n        // we will return minimum accuracy needed in the area.\n        var absc = this.segAttr.p_proj_x;\n        absc += thick0 > thick1 ? half_delta : -half_delta;\n\n        if(absc<=0.0){\n            allReturn.currAcc   = thick0;\n        }else if(absc>=segParams.norm)\n        {\n            allReturn.currAcc   = thick1;\n        }else{\n            var tt = absc/segParams.norm;\n            allReturn.currAcc = thick0*(1.0-tt) + tt*thick1;\n        }\n        allReturn.intersect = true;\n    }\n    return allReturn;\n};\n\n/**\n *  Get accuracy for the inner triangle (do not consider segment edges)\n *  @param {!{r:number,c:!THREE.Vector3}} sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n */\nAreaScalisTri.prototype.getAccTri = function(sphere)\n{\n    // Inequal thickness triangle case:\n    if (!this.equal_weights) {\n        var v0 = this.v[0].getPos(); // Should be the min thickness point on the triangle\n        // Get the main dir furthest point\n        var main_dir_point = this.tmpVect.addVectors(sphere.center, this.main_dir.clone().multiplyScalar(sphere.r));\n        // Get the proj of this point\n        // 1/ get the ortho coord 2D wise\n        this.tmpVect.subVectors(main_dir_point, v0);\n        var distLineSq = this.tmpVect.lengthSq();\n        // Get the dist to the plane (signed)\n        var y_p_2D = this.tmpVect.dot(this.unit_normal); // Should do some test here to know if we are above or below the plane\n        var x_p_2D = Math.sqrt(distLineSq - y_p_2D*y_p_2D);\n        // Get the ortho proj point in the triangle plane\n        // Cf. http://geomalgorithms.com/a04-_planes.html\n        var proj_ortho_point = this.tmpVect.clone().addVectors(sphere.center, this.unit_normal.clone().multiplyScalar(-y_p_2D));\n        // Get the thickness at this point\n        var params = TriangleUtils.getTriBaryCoord(this.p0p1, this.p2p0, this.v[0].getPos(), proj_ortho_point);\n        var thick_ortho_point = TriangleUtils.getMeanThick(this, params.u, params.v);\n        // Ortho vector to the weight varies along where the sphere is relative to the plane\n        thick_ortho_point = y_p_2D>=0? thick_ortho_point: -thick_ortho_point;\n        var ortho_vec_x = this.v[0].getThickness() - thick_ortho_point;\n        var ortho_vec_y = x_p_2D;\n        var t = -y_p_2D/ortho_vec_y;\n        // P proj is the point at the intersection of:\n        //              - the local X axis (computation in the unit_dir basis)\n        //                  and\n        //              - the line defined by P and the vector orthogonal to the weight line\n        var p_proj_x = x_p_2D + t*ortho_vec_x;\n\n        var dirVect = this.tmpVect.subVectors(v0, proj_ortho_point).normalize();\n        var p_proj = this.tmpVect.addVectors(proj_ortho_point, dirVect.multiplyScalar(x_p_2D-p_proj_x));\n        // Get the barycentric parameters of the non orthogonal point\n        params = TriangleUtils.getTriBaryCoord(this.p0p1, this.p2p0, this.v[0].getPos(), p_proj);\n        if (params.u<=1 && params.v <=1 && params.u+ params.v <=1 && params.u >= 0 && params.v >= 0 ) {\n            // Return the barycentered thickness (yes barycentered is a proper english terminology)\n            return TriangleUtils.getMeanThick(this, params.u, params.v);\n        } else {\n            return this.max_thick*10000;\n        }\n    } else {\n        // Case of equal weights\n        return this.min_thick;\n    }\n};\n\n/**\n *  Return the minimum accuracy needed in the intersection of the sphere and the area.\n *         This function is a generic function used in both getNoceAcc and getRawAcc.\n *\n *  @return {number} the accuracy needed in the intersection zone, as a ratio of the linear variation\n *         of the radius in the triangle\n *\n *  @param {!{r:number,c:!THREE.Vector3}} sphere  A aphere object, must define sphere.r (radius) and sphere.center (center, as a THREE.Vector3)\n *  @param {number}  factor  the ratio to determine the wanted accuracy.\n */\nAreaScalisTri.prototype.getAcc = function(sphere, factor) {\n\n    // First: Test the intersection of the sphere to all three segments to get the min Acc for segments\n    for(var i=0, minForSeg=this.max_thick*100000; i<3; i++) {\n        var intersectSeg = this.getAccSegment(sphere, this.segParams[i]);\n        // The sphere intersecting ones the angle means the sphere intersect the Bounding Volume\n        if (intersectSeg.intersect) {\n            minForSeg = minForSeg > intersectSeg.currAcc ? intersectSeg.currAcc: minForSeg;\n        }\n    }\n    // Second: Test the inner triangle\n    var minForTri = this.max_thick*100000;\n    if (minForSeg !== this.min_thick) {\n        minForTri = this.getAccTri(sphere);\n    }\n\n    var minThick = Math.min(minForSeg, minForTri);\n    if (minThick !== this.max_thick*100000) {\n        //minThick = Math.min(Math.max(minThick, this.min_thick), this.max_thick);\n        return minThick*factor;\n    } else {\n        // Sphere does not intersect with the segments, or the inner triangle\n        return this.max_thick*factor;\n    }\n\n    //return this.min_thick*factor;\n};\n\n/**\n *  Convenience function, just call getAcc with Nice Accuracy parameters.\n *  @param {!{r:number,c:!THREE.Vector3}} sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n *  @return {number} The Nice accuracy needed in the intersection zone\n */\nAreaScalisTri.prototype.getNiceAcc = function(sphere)\n{\n    return this.getAcc(sphere,Accuracies.nice);\n};\n/**\n *  Convenience function, just call getAcc with Curr Accuracy parameters.\n *  @param {!{r:number,c:!THREE.Vector3}} sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n *  @return {number} The Current accuracy needed in the intersection zone\n */\nAreaScalisTri.prototype.getCurrAcc = function(sphere)\n{\n    return this.getAcc(sphere,Accuracies.curr);\n};\n/**\n *  Convenience function, just call getAcc with Raw Accuracy parameters.\n *  @param {!{r:number,c:!THREE.Vector3}} sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n *  @return {number} The raw accuracy needed in the intersection zone\n */\nAreaScalisTri.prototype.getRawAcc = function(sphere)\n{\n    return this.getAcc(sphere,Accuracies.raw);\n};\n\n/**\n *  @return {number} the minimum accuracy needed for the triangle\n */\nAreaScalisTri.prototype.getMinAcc = function()\n{\n    return Accuracies.curr*this.min_thick;\n};\n\n/**\n *  @return {number} the minimum accuracy needed for the triangle\n */\nAreaScalisTri.prototype.getMinRawAcc = function()\n{\n    return Accuracies.raw*this.min_thick;\n};\n\n/**\n *  Return the minimum accuracy required at some point on the given axis.\n *  The returned accuracy is the one you would need when stepping in the axis\n *  direction when you are on the axis at coordinate t.\n *  @param {string} axis x, y or z\n *  @param {number} t Coordinate on the axis\n *  @return {number} The step you can safely do in axis direction\n */\nAreaScalisTri.prototype.getAxisProjectionMinStep = function(axis,t){\n    var step = Number.MAX_VALUE;\n    for(var i=0;i<3;++i){\n        step = Math.min(step,this.segAreas[i].getAxisProjectionMinStep(axis,t));\n    }\n    return step;\n};\n\nmodule.exports = AreaScalisTri;\n","'use strict';\n\nconst THREE = require(\"three\");\nconst Types = require(\"../Types.js\");\nconst Material = require(\"../Material.js\");\nconst ScalisPrimitive = require(\"./ScalisPrimitive.js\");\nconst ScalisVertex = require(\"./ScalisVertex.js\");\nconst ScalisMath = require(\"./ScalisMath.js\");\nconst AreaScalisTri = require(\"../areas/AreaScalisTri.js\");\nconst Accuracies = require(\"../accuracies/Accuracies.js\");\n\nconst TriangleUtils = require(\"../../utils/TriangleUtils.js\");\n\n// Number of sample in the Simpsons integration.\nvar sampleNumber = 10;\n\n/**\n *  This class implements a ScalisTriangle primitive.\n *  CONVOL Evaluation is not exact so we use simpsons numerical integration.\n *\n *  @constructor\n *  @param {!Array.<!ScalisVertex>} v the 3 vertices for the triangle\n *  @param {string} volType type of volume\n *  @param {number} density Density like for other Scalis Primitives. This parameter is here only to ensure signature consistancy.\n *                          It is not implemented for now and will therefore be set to 1.0.\n *  @param {!Array.<!Material>} mats the triangle materials per vertices\n *  @extends ScalisPrimitive\n */\nvar ScalisTriangle = function(v, volType, density, mats) {\n    // Calling parent class initialize function\n    ScalisPrimitive.call(this);\n\n    if(density !== 1.0){\n        throw \"Error in ScalisTriangle : cannot use a density different from 1.0, not implemented.\";\n    }\n\n    this.volType = volType;\n    this.materials     = mats !== null? mats : [Material.defaultMaterial.clone(), Material.defaultMaterial.clone(), Material.defaultMaterial.clone()];\n\n    this.v = v;\n    this.v[0].setPrimitive(this);\n    this.v[1].setPrimitive(this);\n    this.v[2].setPrimitive(this);\n    this.min_thick = Math.min(this.v[0].getThickness(), this.v[1].getThickness(), this.v[2].getThickness());\n    this.max_thick = Math.max(this.v[0].getThickness(), this.v[1].getThickness(), this.v[2].getThickness());\n\n    // Temporary for eval\n    // TODO : should be wrapped in the eval function scope if possible (ie not precomputed)\n    this.res_gseg = {};\n    this.tmp_res_gseg = {};\n\n    this.p0p1  = new THREE.Vector3();\n    this.p1p2 = new THREE.Vector3();\n    this.p2p0 = new THREE.Vector3();\n    this.unit_normal = new THREE.Vector3();\n    this.unit_p0p1 = new THREE.Vector3();\n    this.unit_p1p2 = new THREE.Vector3();\n    this.unit_p2p0 = new THREE.Vector3();\n    this.length_p0p1 = 0;\n    this.length_p1p2 = 0;\n    this.length_p2p0 = 0;\n    this.diffThick_p0p1 = 0;\n    this.diffThick_p0p1 = 0;\n    this.diffThick_p0p1 = 0;\n    this.main_dir       = new THREE.Vector3();\n    this.point_iso_zero = new THREE.Vector3();\n    this.ortho_dir      = new THREE.Vector3();\n    this.unsigned_ortho_dir= new THREE.Vector3();\n    this.proj_dir       = new THREE.Vector3();\n    this.equal_weights = false; // Use to skip computations for a specific case\n\n    this.coord_max           = 0;\n    this.coord_middle        = 0;\n    this.unit_delta_weight   = 0;\n    this.longest_dir_special = 0;\n    this.max_seg_length      = 0;\n    this.half_dir_1 = new THREE.Vector3();\n    this.point_half = new THREE.Vector3();\n    this.half_dir_2 = new THREE.Vector3();\n    this.point_min = new THREE.Vector3();\n    this.weight_min = 0;\n\n    this.valid_aabb = false;\n};\n\n// inherits from Primitive\nScalisTriangle.prototype = Object.create(ScalisPrimitive.prototype);\nScalisTriangle.prototype.constructor = ScalisTriangle;\n\nScalisTriangle.type = \"ScalisTriangle\";\nTypes.register(ScalisTriangle.type, ScalisTriangle);\n\nScalisTriangle.prototype.getType = function(){\n    return ScalisTriangle.type;\n};\n\nScalisTriangle.prototype.toJSON = function() {\n    var res = ScalisPrimitive.prototype.toJSON.call(this);\n    return res;\n};\nScalisTriangle.fromJSON = function(json){\n    var v = [\n        ScalisVertex.fromJSON(json.v[0]),\n        ScalisVertex.fromJSON(json.v[1]),\n        ScalisVertex.fromJSON(json.v[2])\n    ];\n    var m = [\n        Material.fromJSON(json.materials[0]),\n        Material.fromJSON(json.materials[1]),\n        Material.fromJSON(json.materials[2])\n    ];\n    return new ScalisTriangle(v, json.volType, 1.0, m);\n};\n\n// [Abstract] See Primitive.prepareForEval for more details\nScalisTriangle.prototype.prepareForEval = function() {\n    if(!this.valid_aabb)\n    {\n        this.computeHelpVariables();\n        this.valid_aabb = true;\n    }\n};\n\n\n// [Abstract] See Primtive.getArea for more details\nScalisTriangle.prototype.getAreas = function() {\n    if(!this.valid_aabb){\n        console.log(\"ERROR : Cannot get area of invalid primitive\");\n        return [];\n    }else{\n        var segParams = [];\n        segParams.push({\"norm\":         this.length_p0p1,\n                        \"diffThick\":    this.diffThick_p0p1,\n                        \"dir\":          this.unit_p0p1,\n                        \"v\":            [this.v[0], this.v[1]],\n                        \"ortho_vec_x\":  this.v[0].getThickness() - this.v[1].getThickness(),\n                        \"ortho_vec_y\":  this.length_p0p1});\n        segParams.push({\"norm\":         this.length_p1p2,\n                        \"diffThick\":    this.diffThick_p1p2,\n                        \"dir\":          this.unit_p1p2,\n                        \"v\":            [this.v[1], this.v[2]],\n                        \"ortho_vec_x\":  this.v[1].getThickness() - this.v[2].getThickness(),\n                        \"ortho_vec_y\":  this.length_p1p2});\n        segParams.push({\"norm\":         this.length_p2p0,\n                        \"diffThick\":    this.diffThick_p2p0,\n                        \"dir\":          this.unit_p2p0,\n                        \"v\":            [this.v[2], this.v[0]],\n                        \"ortho_vec_x\":  this.v[2].getThickness() - this.v[0].getThickness(),\n                        \"ortho_vec_y\":  this.length_p2p0});\n        return [{\n            aabb:this.aabb,\n            bv: new AreaScalisTri(this.v,\n                                this.unit_normal,\n                                this.main_dir,\n                                segParams,\n                                this.min_thick,\n                                this.max_thick),\n            obj: this\n        }];\n    }\n};\n\n// [Abstract] See Primitive.computeHelpVariables for more details\nScalisTriangle.prototype.computeHelpVariables = function() {\n    TriangleUtils.computeVectorsDirs(this);\n    // Compute the AABB from the union of the BBox of the vertices\n    this.computeAABB();\n};\n\n// [Abstract] See ScalisPrimitive.mutableVolType for more details\nScalisTriangle.prototype.mutableVolType = function() {\n    return true;\n};\n\n// [Abstract] See Primitive.setVolType for more details\nScalisTriangle.prototype.setVolType = function(vt)\n{\n    if( !(vt == ScalisPrimitive.CONVOL || vt == ScalisPrimitive.DIST) ){\n        throw \"ERROR : volType must be set to ScalisPrimitive.CONVOL or ScalisPrimitive.DIST\";\n    }\n\n    if(this.volType != vt){\n        this.volType = vt;\n        this.invalidAABB();\n    }\n};\n\n// [Abstract] See Primitive.getVolType for more details\nScalisTriangle.prototype.getVolType = function()\n{\n    return this.volType;\n};\n\n/**\n *  Clamps a number. Based on Zevan's idea: http://actionsnippet.com/?p=475\n *  @param {number} a\n *  @param {number} b\n *  @param {number} c\n *  @return {number} Clamped value\n *  Author: Jakub Korzeniowski\n *  Agency: Softhis\n *  http://www.softhis.com\n */\nScalisTriangle.prototype.clamp = function (a,b,c){\n    return Math.max(b,Math.min(c,a));\n};\n\n// [Abstract] See Primitive.distanceTo for more details\nScalisTriangle.prototype.distanceTo = (function() {\n    var p0p = new THREE.Vector3();\n    var p1p = new THREE.Vector3();\n    var p2p = new THREE.Vector3();\n    var tmp = new THREE.Vector3();\n    return function(p) {\n\n        p0p.subVectors(p,this.v[0].getPos());\n        p1p.subVectors(p,this.v[1].getPos());\n        p2p.subVectors(p,this.v[2].getPos());\n        if( tmp.crossVectors(this.p0p1,p0p).dot(this.unit_normal)>0 &&\n            tmp.crossVectors(this.p1p2,p1p).dot(this.unit_normal)>0 &&\n            tmp.crossVectors(this.p2p0,p2p).dot(this.unit_normal)>0)\n        {\n            // p is in the triangle\n            return Math.abs(p0p.dot(this.unit_normal));\n        }else{\n            var t0 = p0p.dot(this.p0p1) / this.length_p0p1;\n            // clamp is our own function declared there\n            t0=this.clamp(t0,0,1);\n            tmp.copy(this.p0p1)\n                .multiplyScalar(t0)\n                .add(this.v[0].getPos());\n            t0 = p.distanceToSquared(tmp);\n\n            var t1 = p1p.dot(this.p1p2) / this.length_p1p2;\n            // clamp is our own function declared there\n            t1=this.clamp(t1,0,1);\n            tmp.copy(this.p1p2)\n                .multiplyScalar(t1)\n                .add(this.v[1].getPos());\n            t1 = p.distanceToSquared(tmp);\n\n            var t2 = p2p.dot(this.p2p0) / this.length_p2p0;\n            // clamp is our own function declared there\n            t2=this.clamp(t2,0,1);\n            tmp.copy(this.p2p0)\n                .multiplyScalar(t2)\n                .add(this.v[2].getPos());\n            t2 = p.distanceToSquared(tmp);\n\n            return Math.sqrt(Math.min(Math.min(t0,t1),t2));\n        }\n    };\n})();\n\n// [Abstract] See Primitive.heuristicStepWithin for more details\nScalisTriangle.prototype.heuristicStepWithin = function() {\n    return this.weight_min/3;\n};\n\n// [Abstract] See Primitive.value for more details\nScalisTriangle.prototype.value = function(p,res) {\n    switch(this.volType){\n        case ScalisPrimitive.DIST:\n            return this.evalDist(p,res);\n        case ScalisPrimitive.CONVOL:\n            // for now rings are just evaluated as distance surface\n            return this.evalConvol(p,res);\n        default:\n            throw \"Unknown volType, use Orga\";\n        break;\n    }\n};\n\n/**\n *  value function for Distance volume type (distance field).\n */\n// jshint maxstatements:150\nScalisTriangle.prototype.evalDist = (function(){\n    var ev_eps = {v:0};\n    var p_eps = new THREE.Vector3();\n    return function(p,res)\n    {\n    /*\n        // bounding box check (could/should be done in the node ?)\n        if( p.x > this.aabb.min_x && p.x < this.aabb.max_x &&\n            p.y > this.aabb.min_y && p.y < this.aabb.max_y &&\n            p.z > this.aabb.min_z && p.z < this.aabb.max_z\n            )\n        {\n    */\n            // First compute the distance to the triangle and find the nearest point\n            // Code taken from EuclideanDistance functor, can be optimized.\n            var p0_to_p = new THREE.Vector3();\n            p0_to_p.subVectors(p,this.v[0].getPos());\n            var normal_inv = this.unit_normal.clone().multiplyScalar(-1);\n            ///////////////////////////////////////////////////////////////////////\n            // We must generalize the principle used for the segment\n            if(!this.equal_weights){\n\n                // Now look for the point equivalent to the Z point for the segment.\n                // This point Z is the intersection of 3 orthogonal planes :\n                //      plane 1 : triangle plane\n                //      plane 2 : n = ortho_dir, passing through point\n                //      plane 3 : n = main_dir, passing through point_iso_zero_dir1 and point_iso_zero_dir2\n                // Formula for a unique intersection of 3 planes : http://geomalgorithms.com/a05-_intersect-1.html\n                //  Plane equation from a normal n and a point p0 : <n.(x,y,z)> - <n.p0> = 0\n                //\n                // TODO : this formula can probably be optimized :\n                //        - some elements can be stored\n                //        - some assertion are verified and may help to simplify the computation, for example : n3 = n2%n1\n                var n1 = normal_inv;\n                var n2 = this.unsigned_ortho_dir;\n                var n3 = this.main_dir.clone().multiplyScalar(-1);\n                var d1 = -this.v[0].getPos().dot(n1);\n                var d2 = -p.dot(n2);\n                var d3 = -this.point_iso_zero.dot(n3);\n\n                var d1n2n3 = new THREE.Vector3();\n                d1n2n3.crossVectors(n2,n3);\n                d1n2n3.multiplyScalar(-d1);\n                var d2n3n1 = new THREE.Vector3();\n                d2n3n1.crossVectors(n3,n1);\n                d2n3n1.multiplyScalar(-d2);\n                var d3n1n2 = new THREE.Vector3();\n                d3n1n2.crossVectors(n1,n2);\n                d3n1n2.multiplyScalar(-d3);\n                var n2cn3 = new THREE.Vector3();\n                n2cn3.crossVectors(n2,n3);\n                var Z = new THREE.Vector3(  d1n2n3.x+d2n3n1.x+d3n1n2.x,\n                                            d1n2n3.y+d2n3n1.y+d3n1n2.y,\n                                            d1n2n3.z+d2n3n1.z+d3n1n2.z);\n                Z.divideScalar(n1.dot(n2cn3));\n\n                // Now we want to project in the direction orthogonal to (pZ) and ortho_dir\n                var pz = new THREE.Vector3(Z.x-p.x,Z.y-p.y,Z.z-p.z);\n\n                // set proj_dir\n                this.proj_dir = new THREE.Vector3();\n                this.proj_dir.crossVectors(pz,this.unsigned_ortho_dir);\n                this.proj_dir.normalize(); // should be useless\n            }\n\n            // Project along the given direction\n            var non_ortho_proj = new THREE.Vector3();\n            non_ortho_proj.copy(this.proj_dir);\n            non_ortho_proj.multiplyScalar( -p0_to_p.dot(normal_inv)/this.proj_dir.dot(normal_inv));\n            non_ortho_proj.add(p);\n\n            var tmp_vec = new THREE.Vector3();\n            var tmp_vec0 = new THREE.Vector3();\n            var tmp_vec1 = new THREE.Vector3();\n            var tmp_vec2 = new THREE.Vector3();\n            tmp_vec0.subVectors(non_ortho_proj,this.v[0].getPos());\n            tmp_vec1.subVectors(non_ortho_proj,this.v[1].getPos());\n            tmp_vec2.subVectors(non_ortho_proj,this.v[2].getPos());\n\n            if( tmp_vec.crossVectors(this.unit_p0p1,tmp_vec0).dot(normal_inv) > 0.0 &&\n                tmp_vec.crossVectors(this.unit_p1p2,tmp_vec1).dot(normal_inv) > 0.0 &&\n                tmp_vec.crossVectors(this.unit_p2p0,tmp_vec2).dot(normal_inv) > 0.0)\n            {\n                tmp_vec.subVectors(p,non_ortho_proj);\n                res.v = tmp_vec.lengthSq();\n\n                // get barycentric coordinates of nearest_point (which is necessarily in the triangle\n                var p0 = this.v[0].getPos();\n                var p1 = this.v[1].getPos();\n                var p2 = this.v[2].getPos();\n\n                var tmp_vec_bis = new THREE.Vector3();\n                tmp_vec.subVectors(p1,p0);\n                tmp_vec_bis.subVectors(p2,p0);\n                var n = new THREE.Vector3();\n                n.crossVectors(tmp_vec,tmp_vec_bis);\n                tmp_vec.subVectors(p2,p1);\n                var n1 = new THREE.Vector3();\n                n1.crossVectors(tmp_vec,tmp_vec1);\n                tmp_vec.subVectors(p0,p2);\n                var n2 = new THREE.Vector3();\n                n2.crossVectors(tmp_vec,tmp_vec2);\n                tmp_vec.subVectors(p1,p0);\n                var n3 = new THREE.Vector3();\n                n3.crossVectors(tmp_vec,tmp_vec0);\n\n                var nsq = n.lengthSq();\n                var a1 = n.dot(n1);\n                var a2 = n.dot(n2);\n                var a3 = n.dot(n3);\n\n                var inter_weight = (a1*this.v[0].getThickness()+a2*this.v[1].getThickness()+a3*this.v[2].getThickness())/nsq;\n\n                res.v = ScalisMath.Poly6Eval(Math.sqrt(res.v)/inter_weight)*ScalisMath.Poly6NF0D;\n\n                if(res.m){\n                    res.m.triMean(this.materials[0],this.materials[1],this.materials[2],a1,a2,a3,nsq);\n                }\n            }\n            else\n            {\n                // Use to keep the case selected in case we need to compute the material\n                var seg_case = 0;\n                // do the same as for a segment on all triangle sides\n                this.GenericSegmentComputation(\n                    p,\n                    this.v[0].getPos(),\n                    this.p0p1,\n                    this.length_p0p1,\n                    this.length_p0p1*this.length_p0p1,\n                    this.v[0].getThickness(),\n                    this.v[1].getThickness()-this.v[0].getThickness(),\n                    this.res_gseg\n                );\n\n                this.res_gseg.sqrdist = this.res_gseg.proj_to_p.lengthSq();\n                this.res_gseg.ratio = this.res_gseg.sqrdist/(this.res_gseg.weight_proj*this.res_gseg.weight_proj);\n\n                this.GenericSegmentComputation(\n                    p,\n                    this.v[1].getPos(),\n                    this.p1p2,\n                    this.length_p1p2,\n                    this.length_p1p2*this.length_p1p2,\n                    this.v[1].getThickness(),\n                    this.v[2].getThickness()-this.v[1].getThickness(),\n                    this.tmp_res_gseg\n                );\n                this.tmp_res_gseg.sqrdist = this.tmp_res_gseg.proj_to_p.lengthSq();\n                this.tmp_res_gseg.ratio = this.tmp_res_gseg.sqrdist/(this.tmp_res_gseg.weight_proj*this.tmp_res_gseg.weight_proj);\n                if(this.res_gseg.ratio>this.tmp_res_gseg.ratio){\n                    this.res_gseg.sqrdist         = this.tmp_res_gseg.sqrdist;\n                    this.res_gseg.proj_to_p       = this.tmp_res_gseg.proj_to_p;\n                    this.res_gseg.weight_proj     = this.tmp_res_gseg.weight_proj;\n                    this.res_gseg.ratio           = this.tmp_res_gseg.ratio;\n                    this.res_gseg.t               = this.tmp_res_gseg.t;\n                    seg_case = 1;\n                }\n\n                this.GenericSegmentComputation(\n                    p,\n                    this.v[2].getPos(),\n                    this.p2p0,\n                    this.length_p2p0,\n                    this.length_p2p0*this.length_p2p0,\n                    this.v[2].getThickness(),\n                    this.v[0].getThickness()-this.v[2].getThickness(),\n                    this.tmp_res_gseg\n                );\n                this.tmp_res_gseg.sqrdist = this.tmp_res_gseg.proj_to_p.lengthSq();\n                this.tmp_res_gseg.ratio = this.tmp_res_gseg.sqrdist/(this.tmp_res_gseg.weight_proj*this.tmp_res_gseg.weight_proj);\n                if(this.res_gseg.ratio>this.tmp_res_gseg.ratio){\n                    this.res_gseg.sqrdist         = this.tmp_res_gseg.sqrdist;\n                    this.res_gseg.proj_to_p       = this.tmp_res_gseg.proj_to_p;\n                    this.res_gseg.weight_proj     = this.tmp_res_gseg.weight_proj;\n                    this.res_gseg.ratio           = this.tmp_res_gseg.ratio;\n                    this.res_gseg.t               = this.tmp_res_gseg.t;\n                    seg_case = 2;\n                }\n\n                res.v = ScalisMath.Poly6Eval(Math.sqrt(this.res_gseg.sqrdist)/this.res_gseg.weight_proj)*ScalisMath.Poly6NF0D;\n\n\n\n\n\n                ////////////////////////////////////////////////////////////////\n                // Material computation\n                if(res.m){\n                    switch(seg_case){\n                        case 0:\n                            res.m.copy(this.materials[0]);\n                            res.m.lerp(this.materials[1], this.res_gseg.t);\n                        break;\n                        case 1:\n                            res.m.copy(this.materials[1]);\n                            res.m.lerp(this.materials[2], this.res_gseg.t);\n                        break;\n                        case 2:\n                            res.m.copy(this.materials[2]);\n                            res.m.lerp(this.materials[0], this.res_gseg.t);\n                        break;\n                        default:\n                            throw \"Error : seg_case unknown\";\n                        break;\n                    }\n                }\n                //////////////////////////////////////////////////////////////\n            }\n            // IMPORTANT NOTE :\n            // We should use an analytical gradient here. It should be possible to\n            // compute.\n            if(res.g)\n            {\n                var epsilon = 0.00001;\n                p_eps.copy(p);\n                p_eps.x += epsilon;\n                this.evalDist(p_eps, ev_eps);\n                res.g.x = (ev_eps.v-res.v)/epsilon;\n                p_eps.x -= epsilon;\n\n                p_eps.y += epsilon;\n                this.evalDist(p_eps, ev_eps);\n                res.g.y = (ev_eps.v-res.v)/epsilon;\n                p_eps.y -= epsilon;\n\n                p_eps.z += epsilon;\n                this.evalDist(p_eps, ev_eps);\n                res.g.z = (ev_eps.v-res.v)/epsilon;\n            }\n    /*\n        }else{\n            res.v = 0;\n        }\n    */\n    };\n})();\n\n\n/**\n *\n *  Segment computations used in Distance triangle evaluation.\n *\n *  @param {!THREE.Vector3} point Point where value is wanted, as a THREE.Vector3\n *  @param {!THREE.Vector3} p1 Segment first point, as a THREE.Vector3\n *  @param {!THREE.Vector3} p1p2 Segment first to second point, as a THREE.Vector3\n *  @param {number} length Length of the segment\n *  @param {number} sqr_length Squared length of the segment\n *  @param {number} weight_1 Weight for the first point of the segment\n *  @param {number} delta_weight weight_2 - weight_1\n *  @param {!Object} res {proj_to_p, weight_proj}\n *\n */\nScalisTriangle.prototype.GenericSegmentComputation = function(\n                                            point,\n                                            p1,\n                                            p1p2,\n                                            length,\n                                            sqr_length,\n                                            weight_1,\n                                            delta_weight, // = weight_2-weight_1\n                                            res)\n{\n    var origin_to_p = new THREE.Vector3();\n    origin_to_p.subVectors(point,p1);\n\n    var orig_p_scal_dir = origin_to_p.dot(p1p2);\n    var orig_p_sqr = origin_to_p.lengthSq();\n\n    var denum = sqr_length * weight_1 + orig_p_scal_dir * delta_weight;\n    var t = (delta_weight<0.0) ? 0.0 : 1.0;\n    if(denum > 0.0)\n    {\n        t = (orig_p_scal_dir * weight_1 + orig_p_sqr * delta_weight) /denum;\n        t = (t<0.0) ? 0.0 : ((t>1.0) ? 1.0 : t) ; // clipping (nearest point on segment not line)\n    }\n\n    res.proj_to_p = new THREE.Vector3(  t*p1p2.x - origin_to_p.x,\n                                        t*p1p2.y - origin_to_p.y,\n                                        t*p1p2.z - origin_to_p.z);\n    res.weight_proj = weight_1 + t*delta_weight;\n\n    res.t = t;\n\n    return res;\n};\n\n///////////////////////////////////////////////////////////////////////////\n// Convolution Evaluation functions and auxiliaary functions\n\n/**\n *  value function for Distance volume type (distance field).\n */\nScalisTriangle.prototype.evalConvol = (function() {\n\n    var g = new THREE.Vector3();\n    var m = new Material();\n    var tmpRes = {v:0,g:null,m:null};\n    var g2 = new THREE.Vector3();\n    var m2 = new Material();\n    var tmpRes2 = {v:0,g:null,m:null};\n\n    return function (p, res) {\n\n        tmpRes.g = res.g ? g : null;\n        tmpRes.m = res.m ? m : null;\n\n        // Compute closest point (t parameter) on the triangle in \"warped space\" as well as clipping\n        var clipped = {l1: 0, l2: 0};\n        if (this.ComputeTParam(p, clipped)) {\n            var t_low = clipped.l1;\n            var t_high = clipped.l2;\n            // Compute local warp coordinates\n            var w_local = this.weight_min + t_low * this.unit_delta_weight;\n            var local_t_max = this.warpAbscissa((t_high - t_low) / w_local);\n\n            // Compute the required number of sample\n            var nb_samples = 2 * (0.5 * sampleNumber * local_t_max + 1.0);\n            var d_step_size = local_t_max / nb_samples;\n\n            // Perform Simpson scheme\n            var t = d_step_size;\n            d_step_size *= 2.0;\n            var res_odd = 0.0;\n            var grad_odd = new THREE.Vector3();\n\n            for (var i = 1; i < nb_samples; i += 2) {\n                this.computeLineIntegral(this.unwarpAbscissa(t) * w_local + t_low, p, tmpRes);\n                res_odd += tmpRes.v;\n                if (res.g) {\n                    grad_odd.addVectors(grad_odd, tmpRes.g);\n                }\n                t += d_step_size;\n            }\n\n            var res_even = 0.0;\n            var grad_even = new THREE.Vector3();\n            t = 0.0;\n            for (var i = 2; i < nb_samples; i += 2) {\n                t += d_step_size;\n                this.computeLineIntegral(this.unwarpAbscissa(t) * w_local + t_low, p, tmpRes);\n                if (res.g) {\n                    grad_even.addVectors(grad_even, tmpRes.g);\n                }\n                res_even += tmpRes.v;\n            }\n\n            tmpRes2.g = res.g ? g2 : null;\n            tmpRes2.m = res.m ? m2 : null;\n\n            var res_low = this.computeLineIntegral(t_low, p, tmpRes);\n            var res_high = this.computeLineIntegral(t_high, p, tmpRes2);\n\n            res.v = res_low.v + 4.0 * res_odd + 2.0 * res_even + res_low.v;\n            var factor = ( local_t_max / (3.0 * (nb_samples)) ) * ScalisMath.Poly6NF2D;\n            res.v *= factor;\n            if (res.g) {\n                var grad_res = new THREE.Vector3();\n                grad_res.addVectors(grad_res, res_low.g);\n                grad_res.addVectors(grad_res, grad_odd.multiplyScalar(4.0));\n                grad_res.addVectors(grad_res, grad_even.multiplyScalar(2.0));\n                grad_res.addVectors(grad_res, res_high.g);\n                res.g = grad_res.multiplyScalar(factor);\n            }\n        } else {\n            res.v = 0.0;\n            res.g = new THREE.Vector3();\n        }\n        if (res.m) {\n            tmpRes.g = null;\n            this.evalDist(p, tmpRes);\n            res.m.copy(tmpRes.m);\n        }\n    };\n})();\n/**\n *  @param {number} t\n *  @return {number} Warped value\n */\nScalisTriangle.prototype.warpAbscissa = function (t) {\n    // Compute approx of ln(d*l+1)/d\n    var dt = t * this.unit_delta_weight;\n    var inv_dtp2 = 1.0 / (dt + 2.0);\n    var sqr_dt_divdlp2 = dt * inv_dtp2;\n    sqr_dt_divdlp2 *= sqr_dt_divdlp2;\n    var serie_approx = 1.0 + sqr_dt_divdlp2*(\n                                   (1.0/3.0) + sqr_dt_divdlp2*(\n                                        (1.0/5.0) + sqr_dt_divdlp2*(\n                                            (1.0/7.0) + sqr_dt_divdlp2*(\n                                                (1.0/9.0) + sqr_dt_divdlp2*(\n                                                    (1.0/11.0) + sqr_dt_divdlp2*(1.0/13.0) )))));\n    return 2.0 * t * inv_dtp2 * serie_approx;\n};\n\n/**\n *  @param {number} t\n *  @return {number} Unwarped value\n */\nScalisTriangle.prototype.unwarpAbscissa = function (t) {\n    // Compute approx of (exp(d*l)-1)/d\n    var dt = t * this.unit_delta_weight;\n    return t * ( 1.0 + dt *( 1.0/2.0 + dt * ( 1.0/6.0 + dt * ( 1.0/24.0 + dt * ( 1.0/120.0 + dt * 1.0/720.0 ))))) ;\n};\n\n/**\n *  @param {number} t\n *  @param {!THREE.Vector3} p point, as a THREE.Vector3\n *  @param {Object} res result containing the wanted elements like res.v for the value, res.g for the gradient, res.m for the material.\n *  @return the res parameter, filled with proper values\n */\nScalisTriangle.prototype.computeLineIntegral = function (t, p, res) {\n\n    var weight = this.weight_min + t * this.unit_delta_weight;\n    var p_1 = new THREE.Vector3();\n    p_1.addVectors(this.point_min, this.longest_dir_special.clone().multiplyScalar(t));\n\n    var length = (t<this.coord_middle) ? (t/this.coord_middle) * this.max_seg_length\n                                           : ((this.coord_max-t)/(this.coord_max - this.coord_middle)) * this.max_seg_length;\n    if (res.g) {\n        this.consWeightEvalGradForSeg( p_1, weight, this.ortho_dir, length, p, res);\n    } else {\n        this.consWeightEvalForSeg( p_1, weight, this.ortho_dir, length, p, res);\n    }\n\n    return res;\n};\n\n\n/**\n * \"Select\" the part of a segment that is inside (in the homothetic space) of a clipping \"sphere\".\n *          This function use precomputed values given as parameter (prevent redundant computation during convolution\n *          computation for instance)\n *          This function is used in Eval function of CompactPolynomial kernel which use a different parametrization for a greater stability.\n *\n *\n *  @param {!THREE.Vector3} w special_coeff, x, y and z attributes must be defined\n *  @param {number} length\n *  @param {!Object} clipped Result if clipping occured, in l1 and l2, returned\n *                           values are between 0.0 and length/weight_min\n *\n *  @return {boolean} true if clipping occured\n *\n *  @protected\n */\nScalisTriangle.prototype.homotheticClippingSpecial = function(w, length, clipped)\n{\n    // we search solution t \\in [0,1] such that at^2-2bt+c<=0\n    var a = -w.z;\n    var b = -w.y;\n    var c = -w.x;\n\n    var delta = b*b - a*c;\n    if(delta>=0.0)\n    {\n        var b_p_sqrt_delta = b+Math.sqrt(delta);\n        if( (b_p_sqrt_delta<0.0) || (length*b_p_sqrt_delta<c) )\n        {\n            return false;\n        }\n        else\n        {\n            var main_root = c / b_p_sqrt_delta;\n            clipped.l1 = (main_root<0.0) ? 0.0 : main_root;\n            var a_r = a*main_root;\n            clipped.l2 = (2.0*b<a_r+a*length) ? c/(a_r) : length;\n            return true;\n        }\n    }\n    return false;\n};\n\n/**\n *  @param {!THREE.Vector3} p_1\n *  @param {number} w_1\n *  @param {!THREE.Vector3} unit_dir\n *  @param {number} length\n *  @param {!THREE.Vector3} point\n *  @return {!Object} Object defining v attribute with the computed value\n *\n *  @protected\n */\nScalisTriangle.prototype.consWeightEvalForSeg = function( p_1, w_1, unit_dir, length, point, res) {\n    var p_min_to_point = new THREE.Vector3();\n    p_min_to_point.subVectors( point, p_1 );\n    var uv = unit_dir.dot(p_min_to_point);\n    var d2 = p_min_to_point.lengthSq();\n\n    var special_coeff = new THREE.Vector3();\n    special_coeff.set( w_1*w_1  - ScalisMath.KIS2 * d2,\n                       - ScalisMath.KIS2 * uv,\n                       - ScalisMath.KIS2 );\n    var clipped = {l1: 0, l2:0};\n    if(this.homotheticClippingSpecial(special_coeff, length, clipped))\n    {\n        var inv_local_min_weight = 1.0 / w_1;\n        special_coeff.x = 1.0 - ScalisMath.KIS2 * ( clipped.l1*(clipped.l1-2.0*uv) + d2 ) * inv_local_min_weight*inv_local_min_weight;\n        special_coeff.y = - ScalisMath.KIS2*(uv-clipped.l1) * inv_local_min_weight;\n\n        res.v = this.homotheticCompactPolynomial_segment_F_i6_cste( (clipped.l2-clipped.l1) * inv_local_min_weight,\n                                                                                                  special_coeff );\n    }else{\n        res = 0;\n    }\n\n    return res;\n};\n\n/**\n *  @param {!THREE.Vector3} p_1\n *  @param {number} w_1\n *  @param {!THREE.Vector3} unit_dir\n *  @param {number} length\n *  @param {!THREE.Vector3} point\n *  @return {!Object} Object defining v attribute with the computed value\n *\n *  @protected\n */\nScalisTriangle.prototype.consWeightEvalGradForSeg = function( p_1, w_1, unit_dir, length, point, res) {\n\n    var p_min_to_point = new THREE.Vector3();\n    p_min_to_point.subVectors( point, p_1 );\n    var uv = unit_dir.dot(p_min_to_point);\n    var d2 = p_min_to_point.lengthSq();\n\n    var special_coeff = new THREE.Vector3();\n    special_coeff.set( w_1*w_1  - ScalisMath.KIS2 * d2 ,\n                       - ScalisMath.KIS2 * uv ,\n                       - ScalisMath.KIS2 );\n    var clipped = {l1: 0, l2:0};\n    if(this.homotheticClippingSpecial(special_coeff, length, clipped))\n    {\n        var inv_local_min_weight = 1.0 / w_1;\n        special_coeff.x = 1.0 - ScalisMath.KIS2 * ( clipped.l1*(clipped.l1-2.0*uv) + d2 ) * inv_local_min_weight*inv_local_min_weight;\n        special_coeff.y = - ScalisMath.KIS2*(uv-clipped.l1) * inv_local_min_weight;\n\n        var F0F1F2 = new THREE.Vector3();\n        this.homotheticCompactPolynomial_segment_FGradF_i6_cste( (clipped.l2-clipped.l1) * inv_local_min_weight,\n                                                                                                special_coeff, F0F1F2);\n        res.v = F0F1F2.x;\n        F0F1F2.y *= inv_local_min_weight;\n        var vect = unit_dir.clone();\n        vect.multiplyScalar( F0F1F2.z + clipped.l1 * F0F1F2.y);\n        p_min_to_point.multiplyScalar(- F0F1F2.y);\n        p_min_to_point.addVectors(p_min_to_point,vect);\n        res.g =  p_min_to_point.multiplyScalar(6.0*ScalisMath.KIS2*inv_local_min_weight);\n    }else{\n        res.v = 0;\n        res.g.set(0,0,0);\n    }\n\n    return res;\n};\n\n/**\n *  @param {!THREE.Vector3} point the point of evaluation, as a THREE.Vector3\n *  @param {!Object} clipped Result if clipping occured, in l1 and l2, returned\n *                           values are between 0.0 and length/weight_min\n *  @return {boolean} true if clipping occured\n */\nScalisTriangle.prototype.ComputeTParam = function(point, clipped) {\n    var p_min_to_point = new THREE.Vector3();\n    p_min_to_point.subVectors( point, this.point_min );\n\n    var coord_main_dir = p_min_to_point.dot(this.main_dir);\n    var coord_normal   = p_min_to_point.dot(this.unit_normal);\n\n    //WARNING : Assume that the compact support is defined in the same way as HomotheticCompactPolynomial kernels\n    var dist_sqr = coord_main_dir*coord_main_dir + coord_normal*coord_normal;\n\n    var special_coeff = new THREE.Vector3();\n    special_coeff.set( this.weight_min*this.weight_min - ScalisMath.KIS2 * dist_sqr,\n                      -this.unit_delta_weight*this.weight_min - ScalisMath.KIS2 * coord_main_dir,\n                       this.unit_delta_weight*this.unit_delta_weight - ScalisMath.KIS2);\n\n    return this.homotheticClippingSpecial(special_coeff, this.coord_max, clipped);\n};\n\n/**\n *  Sub-function for optimized convolution value computation (Homothetic Compact Polynomial).*\n *  Function designed by Cedric Zanni, optimized for C++ using matlab.\n *  @param {number} l\n *  @param {!THREE.Vector3} w Some coefficient, as a THREE.Vector3\n *  @return {number} the value\n */\nScalisTriangle.prototype.homotheticCompactPolynomial_segment_F_i6_cste = function(l, w) {\n    var t7068 = w.z;\n    var t7078 = t7068 * l;\n    var t7069 = w.y;\n    var t7070 = w.x;\n    var t2 = t7069 * t7069;\n    var t7065 = t7068 * t7070 - t2;\n    var t7067 = 0.1e1 / t7068;\n    var t7077 = t7065 * t7067;\n    var t7064 = t7070 + (-0.2e1 * t7069 + t7078) * l;\n    var t7066 = t7078 - t7069;\n    var t6 = t7064 * t7064;\n    var t7076 = t7066 * t6;\n    var t7 = t7070 * t7070;\n    var t7075 = t7069 * t7;\n    return  (0.6e1 / 0.5e1 * (0.4e1 / 0.3e1 * (0.2e1 * t7065 * l + t7066 * t7064 + t7069 * t7070) * t7077 + t7076 + t7075) * t7077 + t7064 * t7076 + t7070 * t7075) * t7067 / 0.7e1;\n};\n\n// optimized function for segment of constant weight\n// computes value and grad\n/**\n *  Sub-function for optimized convolution for segment of constant weight,\n *  value and gradient computation (Homothetic Compact Polynomial).\n *  Function designed by Cedric Zanni, optimized for C++ using matlab.\n *  @param {number} l\n *  @param {!THREE.Vector3} res result in a THREE.Vector3\n *  @param {!THREE.Vector3} w a THREE.Vector3\n *\n */\nScalisTriangle.prototype.homotheticCompactPolynomial_segment_FGradF_i6_cste = function(l, w, res) {\n    var t7086 = w.z;\n    var t7095 = t7086 * l;\n    var t7087 = w.y;\n    var t7088 = w.x;\n    var t2 = t7087 * t7087;\n    var t7082 = t7086 * t7088 - t2;\n    var t7084 = 0.1e1 / t7086;\n    var t7094 = t7082 * t7084;\n    var t7081 = t7088 + (-0.2e1 * t7087 + t7095) * l;\n    var t7083 = t7095 - t7087;\n    var t7089 = t7081 * t7081;\n    var t7091 = t7088 * t7088;\n    var t7079 = 0.4e1 / 0.3e1 * (0.2e1 * t7082 * l + t7083 * t7081 + t7087 * t7088) * t7094 + t7083 * t7089 + t7087 * t7091;\n    var t7093 = t7079 * t7084 / 0.5e1;\n    var t7085 = t7088 * t7091;\n    var t7080 = t7081 * t7089;\n    res.x = (0.6e1 / 0.5e1 * t7079 * t7094 + t7083 * t7080 + t7087 * t7085) * t7084 / 0.7e1;\n    res.y = t7093;\n    res.z = (t7087 * t7093 + t7080 / 0.6e1 - t7085 / 0.6e1) * t7084;\n};\n\nmodule.exports = ScalisTriangle;\n","'use strict';\n\nconst THREE = require(\"three\");\nconst Types = require(\"../Types.js\");\n\n/**\n *  A superclass for Node and Primitive in the blobtree.\n *  @constructor\n */\nvar DistanceFunctor = function () {\n};\n\nDistanceFunctor.prototype.constructor = DistanceFunctor;\n\nDistanceFunctor.type = \"DistanceFunctor\";\nTypes.register(DistanceFunctor.type, DistanceFunctor);\n/**\n *  @return {string} Type of the element\n */\nDistanceFunctor.prototype.getType = function() {\n    return DistanceFunctor.type;\n};\n\n/**\n *  @abstract\n *  Return a Javscript Object respecting JSON convention.\n */\nDistanceFunctor.prototype.toJSON = function(){\n    return {\n        type:this.getType()\n    };\n};\n/**\n *  @abstract\n *  @param {Object} json Json description of the object\n */\nDistanceFunctor.prototype.fromJSON = function(json){\n    return Types.fromJSON(json);\n};\n\n/**\n *  @param {number} d The distance to be considered.\n *  @return {number} Scalar field value according to given distance d.\n */\nDistanceFunctor.prototype.value = function(d) {\n    throw \"Error : not implemented. Must be reimplemented in children classes.\";\n};\n\nDistanceFunctor.prototype.value = function(d) {\n    throw \"Error : not implemented. Must be reimplemented in children classes.\";\n};\n\n/**\n *  Perform a numerical approximation of the gradient according to epsilon.\n *  @param {number} d The distance to be considered.\n *  @param {number} epsilon The numerica step for this gradient computation. Default to 0.00001.\n */\nDistanceFunctor.prototype.numericalGradient = function(d,epsilon){\n    var eps = epsilon ? epsilon : 0.00001;\n    return (this.value(d+eps)-this.value(d-eps))/(2*eps);\n};\n\n/**\n *  Compute the gradient. Should be reimplemented in most cases.\n *  By default, this function return a numerical gradient with epsilon at 0.00001.\n *  @return {number} One dimensional gradient at d.\n *\n */\nDistanceFunctor.prototype.gradient = function(d){\n    return this.numericalGradient(d,0.00001);\n};\n\n/**\n *  @return {number} Distance above which all values will be 0. Should be reimplemented and default to infinity.\n *\n */\nDistanceFunctor.prototype.getSupport = function(d){\n    return Infinity;\n};\n\n\nmodule.exports = DistanceFunctor;\n\n\n","'use strict';\n\nconst THREE = require(\"three\");\nconst Types = require(\"../Types.js\");\nconst DistanceFunctor = require(\"./DistanceFunctor.js\");\n\n/**\n *  Specialised Distance Functor using a 6 degree polynomial function.\n *  This is the function similar to the one used in SCALIS primitives.\n *  @constructor\n */\nvar Poly6DistanceFunctor = function (scale) {\n    this.scale = scale || 1.0;\n};\n\nPoly6DistanceFunctor.prototype = Object.create(DistanceFunctor.prototype);\nPoly6DistanceFunctor.prototype.constructor = Poly6DistanceFunctor;\n\nPoly6DistanceFunctor.type = \"Poly6DistanceFunctor\";\nTypes.register(Poly6DistanceFunctor.type, Poly6DistanceFunctor);\n\n/**\n *  @return {string} Type of the element\n */\nPoly6DistanceFunctor.prototype.getType = function() {\n    return Poly6DistanceFunctor.type;\n};\n\n/**\n *  @return {Object} Json description of this functor.\n */\nPoly6DistanceFunctor.prototype.toJSON = function() {\n    var json = Blobtree.DistanceFunctor.prototype.toJSON.call(this,c);\n    json.scale = this.scale;\n    return json;\n};\n\n// This is the standard 6 degree polynomial function used for implicit modeling.\n// At 0, its value is 1 with a zero derivative.\n// at 1, its value is 0 with a zero derivative.\nPoly6DistanceFunctor.evalStandard = function(d) {\n    if(d<0.0){\n        return 1.0;\n    }\n    var aux = 1.0-d*d;\n\n    if(aux > 0.0)\n    {\n        return aux*aux*aux;\n    }else{\n        return 0.0;\n    }\n};\n// [Abstract]\nPoly6DistanceFunctor.prototype.value = function(d) {\n    var dp = d/(2*this.scale); // ensure the support fits the scale.\n    dp = dp + 0.5;\n    return Poly6DistanceFunctor.evalStandard(dp)/Poly6DistanceFunctor.evalStandard(0.5);\n};\n\n// [Abstract] Re-implementation is  optional, numerical computation can be used.\nPoly6DistanceFunctor.prototype.gradient = function(d){\n    var ds = d/(2*this.scale) + 0.5;\n    var res = (1-ds*ds);\n    res = -(6/(2*this.scale))*ds*res*res/Poly6DistanceFunctor.evalStandard(0.5);\n    return res;\n};\n\n// [Abstract]\nPoly6DistanceFunctor.prototype.getSupport = function(d){\n    return this.scale;\n};\n\nmodule.exports = Poly6DistanceFunctor;\n\n\n","'use strict';\n\nconst Node = require('../Node.js');\nconst Types = require(\"../Types.js\");\n\n/**\n *  This class implements an abstract Node class for Signed Distance Field.\n *  The considered primtive is at distance = 0.\n *  Convention is : negative value inside the surface, positive value outside.\n *  @constructor\n *  @extends {Node}\n */\nvar SDFNode = function ()\n{\n    Node.call(this);\n\n    // Default bounding box for a SDF is infinite.\n    this.aabb.set(\n        new THREE.Vector3( - Infinity, - Infinity, - Infinity ),\n        new THREE.Vector3( + Infinity, + Infinity, + Infinity )\n    );\n};\n\nSDFNode.prototype = Object.create(Node.prototype);\nSDFNode.prototype.constructor = SDFNode;\n\nSDFNode.type = \"SDFNode\";\nTypes.register(SDFNode.type, SDFNode);\n\nSDFNode.prototype.getType = function(){\n    return SDFNode.type;\n};\n\n// Abstract\nSDFNode.prototype.computeAABB = function() {\n    // Nothing to do, SDF have infinite bounding box\n};\n\n/**\n *  Return the bounding box of the node for a given maximum distance.\n *  Ie, the distance field is greater than d everywhere outside the returned box.\n *  @param {number} d Distance\n *  @abstract\n */\nSDFNode.prototype.computeDistanceAABB = function(d) {\n    throw \"computeDistanceAABB is an abstract function of SDFNode. Please reimplement it in children classes.\";\n};\n\n/**\n *  SDF Field are infinite, so Areas do not make sens except for the SDFRoot, which will\n *  usually apply a compact kernel to the distance field.\n *  @abstract\n */\nSDFNode.prototype.getAreas = function() {\n    throw \"No Areas for SDFNode, except for the SDFRootNode.\";\n};\n\n/**\n *  Since SDF Nodes are distance function, this function will return\n *  an accurate distance to the surface.\n *  @abstract\n */\nSDFNode.prototype.distanceTo = function(p) {\n    throw \"distanceTo should be reimplemented in every children classes of SDFNode.\";\n};\n\n// Abstract\nSDFNode.prototype.heuristicStepWithin = function() {\n    throw \"heuristicStepWithin may not make sens for all SDFNode, except for the SDFRootNode.\";\n};\n\nmodule.exports = SDFNode;\n\n\n","\"use strict\";\n\nconst THREE = require(\"three\");\nconst Types = require(\"../Types.js\");\nconst SDFNode = require(\"./SDFNode.js\");\nconst Material = require(\"../Material.js\");\n\n/**\n *  This class implements a SDF Root Node, which is basically a Signed Distance Field\n *  made of some noe combination, on which is applied a compact support function.\n *  For now SDF nodes do not have materials. A unique material is defined in the SDFRootNode.\n *\n *  @constructor\n *  @extends SDFNode\n *\n *  @param {DistanceFunctor} f The distance function to be applied to the distance field. It must\n *                            respect the Blobtree convention, which is : positive everywhere, with a finite support.\n *  @param {SDFNode} child The child containng the complete SDF. SDFRootNode can have only one child.\n */\nvar SDFRootNode = function (f, material, child) {\n\n    SDFNode.call(this);\n\n    this.f = f;\n\n    this.material = material ? material.clone() : new Material();\n\n    this.addChild(child);\n\n    // Tmp vars to speed up computation (no reallocations)\n    // TODO : should be pushed in the function static variables since there can be no SDFRoot below the SDFRoot.\n    this.tmp_res = {v:0, g:null};\n    this.tmp_g = new THREE.Vector3(0,0,0);\n};\n\nSDFRootNode.prototype = Object.create( SDFNode.prototype );\nSDFRootNode.prototype.constructor = SDFRootNode;\n\nSDFRootNode.type = \"SDFRootNode\";\nTypes.register(SDFRootNode.type, SDFRootNode);\n\nSDFRootNode.prototype.getType = function(){\n    return SDFRootNode.type;\n};\n\nSDFRootNode.prototype.addChild = function(c){\n    if(this.children.length === 0){\n        SDFNode.prototype.addChild.call(this,c);\n    }else{\n        throw \"Error : SDFRootNode can have only one child.\";\n    }\n};\n\nSDFRootNode.prototype.toJSON = function(){\n    var res = SDFNode.prototype.toJSON.call(this);\n    res.f = this.f.toJSON();\n\n    return res;\n};\nSDFRootNode.fromJSON = function(json){\n    var res = new SDFRootNode(Types.fromJSON(res.f), Types.fromJSON(json.children[0]));\n    return res;\n};\n\n// [Abstract] see Node for a complete description\nSDFRootNode.prototype.prepareForEval = function()\n{\n    if(!this.valid_aabb){\n        this.aabb = new THREE.Box3();  // Create empty BBox\n        for(var i=0; i<this.children.length; ++i){\n            var c = this.children[i];\n            c.prepareForEval();\n            this.aabb.union(\n                c.computeDistanceAABB(this.f.getSupport())\n            );     // new aabb is computed according to remaining children aabb\n        }\n\n        this.valid_aabb = true;\n    }\n};\n\n// [Abstract] see ScalisPrimitive.getArea\nSDFRootNode.prototype.getAreas = function() {\n    if(!this.valid_aabb) {\n        throw \"ERROR : Cannot get area of invalid node\";\n    }else{\n        return this.children[0].getAreas(this.f.getSupport());\n    }\n};\n\n// [Abstract] see Node for more details.\nSDFRootNode.prototype.value = function(p,res)\n{\n    var tmp = this.tmp_res;\n    tmp.g = res.g ? this.tmp_g : null;\n\n    // Init res\n    res.v = 0;\n    if(res.m)  {\n        res.m.copy(Material.defaultMaterial);\n    }if(res.g) {\n        // res.g.set(0,0,0); // Useless here\n    }else if (res.step !== undefined) {\n        // that, is the max distance\n        // we want a value that won't miss any 'min'\n        res.step = 1000000000;\n    }\n\n    if(this.aabb.containsPoint(p)){\n        this.children[0].value(p,tmp);\n\n        res.v = this.f.value(tmp.v);\n        if(res.g){\n            res.g.copy(tmp.g).multiplyScalar(this.f.gradient(res.v))\n        }\n        if(res.m){\n            res.m.copy(this.material);\n        }\n    }\n    else if (res.step !== undefined) {\n        // return distance to aabb such that next time we'll hit from within the aabbb\n        res.step = this.aabb.distanceToPoint(p) + 0.3;\n    }\n};\n\nmodule.exports = SDFRootNode;\n","'use strict';\n\nconst Element = require('../Element.js');\nconst Types = require(\"../Types.js\");\n\n/**\n *  This class implements an abstract primitve class for signed distance field.\n *  SDFPrimitive subclasses must define a scalar field being the distance to a geometry.\n *  @constructor\n *  @extends {Element}\n */\nvar SDFPrimitive = function ()\n{\n    Element.call(this);\n\n    // Default bounding box for a SDF is infinite.\n    this.aabb.set(\n        new THREE.Vector3( - Infinity, - Infinity, - Infinity ),\n        new THREE.Vector3( + Infinity, + Infinity, + Infinity )\n    );\n};\n\nSDFPrimitive.prototype = Object.create(Element.prototype);\nSDFPrimitive.prototype.constructor = SDFPrimitive;\n\nSDFPrimitive.type = \"SDFPrimitive\";\nTypes.register(SDFPrimitive.type, SDFPrimitive);\n\nSDFPrimitive.prototype.SDFPrimitive = function(){\n    return SDFPrimitive.type;\n};\n\n// Abstract\nSDFPrimitive.prototype.computeAABB = function() {\n    // Nothing to do, SDF have infinite bounding box\n};\n\n/**\n *  Return the bounding box of the node for a given maximum distance.\n *  Ie, the distance field is greater than d everywhere outside the returned box.\n *  @param {number} d Distance\n *  @abstract\n */\nSDFPrimitive.prototype.computeDistanceAABB = function(d) {\n    throw \"computeDistanceAABB is an abstract function of SDFPrimitive. Please reimplement it in children classes.\";\n};\n\n/**\n *  SDF Field are infinite, so Areas do not make sens.\n */\nSDFPrimitive.prototype.getAreas = function() {\n    throw \"No Areas for SDFPrimitive.\";\n};\n\n/**\n *  Since SDF Nodes are distance function, this function will return\n *  an accurate distance to the surface.\n *  @abstract\n */\nSDFPrimitive.prototype.distanceTo = (function(){\n    var res = {v:0};\n    return function(p) {\n        this.value(p,res);\n        return res.v;\n    };\n})();\n\n// Abstract\nSDFPrimitive.prototype.heuristicStepWithin = function() {\n    throw \"Not implemented\";\n};\n\nmodule.exports = SDFPrimitive;\n\n\n","\"use strict\";\n\nconst THREE = require(\"three\");\nconst Types = require(\"../Types.js\");\nconst SDFPrimitive = require(\"./SDFPrimitive.js\");\nconst AreaSphere = require(\"../areas/AreaSphere.js\");\n\n/**\n *  @constructor\n *  @extends SDFPrimitive\n *\n *  @param {THREE.Vector3} p Position (ie center) of the point\n *  @param {number} acc Accuracy factor for this primitive. Default is 1.0 which will lead to the side of the support.\n */\nvar SDFPoint = function(p, acc) {\n    SDFPrimitive.call(this);\n\n    this.p = p.clone();\n    this.acc = acc || 1.0;\n};\n\nSDFPoint.prototype = Object.create(SDFPrimitive.prototype);\nSDFPoint.prototype.constructor = SDFPoint;\n\nSDFPoint.type = \"SDFPoint\";\nTypes.register(SDFPoint.type, SDFPoint);\n\nSDFPoint.prototype.getType = function(){\n    return SDFPoint.type;\n};\n\nSDFPoint.prototype.toJSON = function() {\n    var res = SDFPrimitive.prototype.toJSON.call(this);\n    res.p = {\n        x:this.p.x,\n        y:this.p.y,\n        z:this.p.z\n    };\n    res.acc = this.acc;\n    return res;\n};\nSDFPoint.fromJSON = function(json){\n    return new SDFPoint(new THREE.Vector3(json.p.x,json.p.y, json.p.z), json.acc);\n};\n\n/**\n *  @param {number} acc The new accuracy factor\n */\nSDFPoint.prototype.setAccuracy = function(acc) {\n    this.acc = acc;\n    this.invalidAABB();\n};\n\n/**\n *  @return {number} Current accuracy factor\n */\nSDFPoint.prototype.getAccuracy = function() {\n    return this.acc;\n};\n\n/**\n *  @param {THREE.Vector3} p The new position (ie center)\n */\nSDFPoint.prototype.setPosition = function(p) {\n    this.p.copy(p);\n    this.invalidAABB();\n};\n\n/**\n *  @return {THREE.Vector3} Current position (ie center)\n */\nSDFPoint.prototype.getPosition = function() {\n    return this.p;\n};\n\n// [Abstract]\nSDFPoint.prototype.computeDistanceAABB = function(d) {\n    return new THREE.Box3(\n        this.p.clone().add(new THREE.Vector3(-d,-d,-d)),\n        this.p.clone().add(new THREE.Vector3(d,d,d))\n    );\n};\n// [Abstract]\nSDFPoint.prototype.prepareForEval = function() {\n    if(!this.valid_aabb)\n    {\n        this.valid_aabb = true;\n    }\n};\n\n// [Abstract] see ScalisPrimitive.getArea\nSDFPoint.prototype.getAreas = function(d) {\n    if(!this.valid_aabb) {\n        throw \"ERROR : Cannot get area of invalid primitive\";\n        return [];\n    }else{\n        return [{\n            aabb:this.computeDistanceAABB(d),\n            bv: new AreaSphere(\n                this.p,\n                d,\n                this.acc\n            ),\n            obj: this\n        }];\n    }\n};\n\n// [Abstract] see SDFPrimitive.value\nSDFPoint.prototype.value = (function(){\n    var v = new THREE.Vector3();\n\n    return function(p,res) {\n        if(!this.valid_aabb){\n            throw \"Error : PrepareForEval should have been called\";\n        }\n\n        v.subVectors(p,this.p);\n        var l = v.length();\n        res.v = l;\n        if(res.g)\n        {\n            res.g.copy(v).multiplyScalar(1/l);\n        }\n    };\n})();\n\nmodule.exports = SDFPoint;\n","\"use strict\";\n\nconst THREE = require(\"three\");\nconst Area = require(\"./Area.js\");\nconst Accuracies = require(\"../accuracies/Accuracies.js\");\n\n/**\n *  General representation of a \"Capsule\" area, ie, 2 sphere connected by a cone.\n *  You can find more on Capsule geometry here https://github.com/maximeq/three-js-capsule-geometry\n *\n *  @extends {Area}\n *\n *  @param {!THREE.Vector3} p1     First point of the shape\n *  @param {!THREE.Vector3} p2     Second point of the shape\n *  @param {number}  r1 radius at p1\n *  @param {number}  r2 radius at p2\n *  @param {number}  accFactor1 Apply an accuracy factor to the standard one, around p1. Default to 1.\n *  @param {number}  accFactor2 Apply an accuracy factor to the standard one, around p2. Default to 1.\n *\n * @constructor\n */\nvar AreaCapsule = function(p1, p2, r1, r2, accFactor1, accFactor2 )\n{\n    Area.call(this);\n\n    this.p1 = p1.clone();\n    this.p2 = p2.clone();\n    this.r1 = r1;\n    this.r2 = r2;\n\n    this.accFactor1 = accFactor1 || 1.0;\n    this.accFactor2 = accFactor2 || 1.0;\n\n    this.unit_dir = new THREE.Vector3().subVectors(p2,p1);\n    this.length = this.unit_dir.length();\n    this.unit_dir.normalize();\n\n    // tmp var for functions below\n    this.vector = new THREE.Vector3();\n    this.p1_to_p = this.vector; // basically the same as above + smart name\n    this.p1_to_p_sqrnorm = 0;\n    this.x_p_2D = 0;\n    this.y_p_2D = 0;\n    this.y_p_2DSq = 0;\n    this.ortho_vec_x = this.r1 - this.r2; // direction orthogonal to the \"line\" getting from one weight to the other. Precomputed\n    this.ortho_vec_y = this.length;\n    this.p_proj_x = 0;\n    this.p_proj_y = 0;\n\n    this.abs_diff_thick = Math.abs(this.ortho_vec_x);\n};\n\nAreaCapsule.prototype = Object.create(Area.prototype);\nAreaCapsule.prototype.constructor = AreaCapsule;\n\n/**\n *  Compute some of the tmp variables. Used to factorized other functions code.\n *  @param {!THREE.Vector3} p A point as a THREE.Vector3\n *\n *  @protected\n */\nAreaCapsule.prototype.proj_computation = function(p)\n{\n    this.p1_to_p = this.vector;\n    this.p1_to_p.subVectors(p, this.p1);\n    this.p1_to_p_sqrnorm = this.p1_to_p.lengthSq();\n    this.x_p_2D = this.p1_to_p.dot(this.unit_dir);\n    // pythagore inc.\n    this.y_p_2DSq = this.p1_to_p_sqrnorm - this.x_p_2D*this.x_p_2D;\n    this.y_p_2D = this.y_p_2DSq>0 ? Math.sqrt(this.y_p_2DSq) : 0; // because of rounded errors tmp can be <0 and this causes the next sqrt to return NaN...\n\n    var t = -this.y_p_2D/this.ortho_vec_y;\n    // P proj is the point at the intersection of:\n    //              - the local X axis (computation in the unit_dir basis)\n    //                  and\n    //              - the line defined by P and the vector orthogonal to the weight line\n    this.p_proj_x = this.x_p_2D + t*this.ortho_vec_x;\n    this.p_proj_y = 0.0;\n};\n\n/**\n *  [Abstract]\n *  @todo Check the Maths (Ask Cedric Zanni?)\n */\nAreaCapsule.prototype.sphereIntersect = function(sphere)\n{\n    this.proj_computation(sphere.center);\n\n    if(this.p_proj_x<0.0){\n        return (Math.sqrt(this.p1_to_p_sqrnorm)-sphere.radius < this.r1);\n    }else{\n        if(this.p_proj_x>this.length)\n        {\n            this.vector.subVectors(sphere.center, this.p2);\n            return (Math.sqrt(this.vector.lengthSq())-sphere.radius < this.r2);\n        }else{\n            var sub1 = this.x_p_2D-this.p_proj_x;\n            //var sub2 = this.y_p_2D-this.p_proj_y; //this.p_proj_y is set at 0 by definition\n            //var dist = Math.sqrt(sub1*sub1 +this.y_p_2DSq);//sub2*sub2);\n            var dist = sub1*sub1 +this.y_p_2DSq;//sub2*sub2);\n            var tt = this.p_proj_x/this.length;\n            var inter_w = this.r1*(1.0-tt) + tt*this.r2;\n            var tmp = sphere.radius + inter_w;\n            //return (dist-sphere.radius < inter_w);\n            return (dist<tmp*tmp);\n        }\n    }\n};\n\n/**\n *  Sea documentation in parent class Area\n */\nAreaCapsule.prototype.contains = function(p)\n{\n    this.proj_computation(p);\n    // P proj is the point at the intersection of:\n    //              - the X axis\n    //                  and\n    //              - the line defined by P and the vector orthogonal to the weight line\n    if(this.p_proj_x<0.0){\n        // Proj is before the line segment beginning defined by P0: spherical containment\n        return this.p1_to_p_sqrnorm < this.r1*this.r1;\n    }else{\n        if(this.p_proj_x>this.length)\n        {\n            // Proj is after the line segment beginning defined by P1: spherical containment\n            this.vector.subVectors(p, this.p2);\n            return this.vector.lengthSq() < this.r2*this.r2;\n        }else{\n            // Proj is in between the line segment P1-P0: Linear kind of containment\n            var sub1 = this.x_p_2D-this.p_proj_x;\n            var sub2 = this.y_p_2D-this.p_proj_y;\n            var dist2 = sub1*sub1+sub2*sub2;\n            var tt = this.p_proj_x/this.length;\n            var inter_w = this.r1*(1.0-tt) + tt*this.r2;\n            return dist2 < inter_w*inter_w;\n        }\n    }\n};\n\n/**\n *  Return the minimum accuracy needed in the intersection of the sphere and the area.\n *         This function is a generic function used in both getNiceAcc and getRawAcc.\n *\n *  @return {number} the accuracy needed in the intersection zone\n *\n *  @param {!{r:number,c:!THREE.Vector3}}  sphere  A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n *  @param {number}  factor  the ratio to determine the wanted accuracy.\n *\n *  @todo Check the Maths\n */\nAreaCapsule.prototype.getAcc = function(sphere, factor)\n{\n    this.proj_computation(sphere.center);\n\n    // Thales between two triangles that have the same angles gives us the dist of:\n    // side A = sphere.radius*this.abs_diff_thick/this.length;\n    // Then pythagore this shit up as A² + sphere.radius² = delta²\n    // i.e delta² = (sphere.radius*this.abs_diff_thick/this.length)² + sphere.radius²\n    // <=> delta = sphere.radius*Math.sqrt(1+(this.abs_diff_thick/this.length)²);\n\n    var tmp = this.abs_diff_thick/this.length;\n    var half_delta = sphere.radius*Math.sqrt(1+tmp*tmp)*0.5;\n\n    // we check only the direction where the weight is minimum since\n    // we will return minimum accuracy needed in the area.\n    var absc = this.p_proj_x;\n    absc += this.r1 > this.r2 ? half_delta : -half_delta;\n\n    if(absc<0.0){\n        return this.r1*this.accFactor1*factor;\n    }else if(absc>this.length)\n    {\n        return this.r2*this.accFactor2*factor;\n    }else{\n\n        var tt = absc/this.length;\n        var inter_w = this.r1*this.accFactor1*(1.0-tt) + tt*this.r2*this.accFactor2;\n        return inter_w*factor;\n    }\n};\n\n/**\n *  Convenience function, just call getAcc with Nice Accuracy parameters.\n *  @param {!{r:number,c:!THREE.Vector3}}  sphere A sphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n *  @return {number} The Nice accuracy needed in the intersection zone\n */\nAreaCapsule.prototype.getNiceAcc = function(sphere)\n{\n    return this.getAcc(sphere,Accuracies.nice);\n};\n/**\n *  Convenience function, just call getAcc with Curr Accuracy parameters.\n *  @param {!{r:number,c:!THREE.Vector3}}  sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n *  @return {number} The Curr accuracy needed in the intersection zone\n */\nAreaCapsule.prototype.getCurrAcc = function(sphere)\n{\n    return this.getAcc(sphere,Accuracies.curr);\n};\n/**\n *  Convenience function, just call getAcc with Raw Accuracy parameters.\n *  @param {!{r:number,c:!THREE.Vector3}}  sphere A aphere object, must define sphere.radius (radius) and sphere.center (center, as a THREE.Vector3)\n *  @return {number} The raw accuracy needed in the intersection zone\n */\nAreaCapsule.prototype.getRawAcc = function(sphere)\n{\n    return this.getAcc(sphere,Accuracies.raw);\n};\n\n/**\n *  Sea documentation in parent class Area\n */\nAreaCapsule.prototype.getMinAcc = function()\n{\n    return Accuracies.curr*Math.min(this.r1*this.accFactor1, this.r2*this.accFactor2);\n};\n/**\n *  Sea documentation in parent class Area\n */\nAreaCapsule.prototype.getMinRawAcc = function()\n{\n    return Accuracies.raw*Math.min(this.r1*this.accFactor1, this.r2*this.accFactor2);\n};\n\n/**\n *  Return the minimum accuracy required at some point on the given axis, according to Accuracies.curr\n *  The returned accuracy is the one you would need when stepping in the axis\n *  direction when you are on the axis at coordinate t.\n *  @param {string} axis x, y or z\n *  @param {number} t Coordinate on the axis\n *  @return {number} The step you can safely do in axis direction\n */\nAreaCapsule.prototype.getAxisProjectionMinStep = function(axis,t){\n    var step = Number.MAX_VALUE;\n    var p1 = this.p1[axis] < this.p2[axis] ? this.p1 : this.p2;\n    var p2, r1, r2;\n    if(p1 === this.p1){\n        p2 = this.p2;\n        r1 = this.r1*this.accFactor1;\n        r2 = this.r2*this.accFactor2;\n    }else{\n        p2 = this.p1;\n        r1 = this.r2;\n        r2 = this.r1*this.accFactor1;\n    }\n\n    var diff = t-p1[axis];\n    if(diff<-2*r1){\n        step = Math.min(step,Math.max(Math.abs(diff+2*r1),Accuracies.curr*r1));\n    }else if(diff<2*r1){\n        step = Math.min(step,Accuracies.curr*r1);\n    }// else the sphere is behind us\n    diff = t-p2[axis];\n    if(diff<-2*r2){\n        step = Math.min(step,Math.max(Math.abs(diff+2*r2),Accuracies.curr*r2));\n    }else if(diff<2*r2){\n        step = Math.min(step,Accuracies.curr*r2);\n    }// else the sphere is behind us\n\n    var tbis = t-p1[axis];\n    var axis_l = p2[axis]-p1[axis];\n    if(tbis>0 && tbis<axis_l && axis_l!==0){\n        // t is in p1p2\n        step = Math.min(step,Accuracies.curr*(r1 + (tbis/axis_l)*(r2 - r1)));\n    }\n\n    return step;\n};\n\nmodule.exports = AreaCapsule;\n\n\n","\"use strict\";\n\nconst THREE = require(\"three\");\nconst Types = require(\"../Types.js\");\nconst SDFPrimitive = require(\"./SDFPrimitive.js\");\nconst AreaCapsule = require(\"../areas/AreaCapsule.js\");\n\n/**\n *\n *  @constructor\n *  @extends SDFPrimitive\n *\n *  @param {THREE.Vector3} p1 Position of the first segment extremity\n *  @param {THREE.Vector3} p2 Position of the second segment extremity\n *  @param {number} acc Accuracy factor for this primitive. Default is 1.0 which will lead to the side of the support.\n */\nvar SDFSegment = function(p1, p2, acc) {\n    SDFPrimitive.call(this);\n\n    this.p1 = p1.clone();\n    this.p2 = p2.clone();\n    this.acc = acc || 1.0;\n\n    // Helper for evaluation\n    this.l = new THREE.Line3(this.p1, this.p2);\n};\n\nSDFSegment.prototype = Object.create(SDFPrimitive.prototype);\nSDFSegment.prototype.constructor = SDFSegment;\n\nSDFSegment.type = \"SDFSegment\";\nTypes.register(SDFSegment.type, SDFSegment);\n\nSDFSegment.prototype.getType = function(){\n    return SDFSegment.type;\n};\n\nSDFSegment.prototype.toJSON = function() {\n    var res = SDFPrimitive.prototype.toJSON.call(this);\n    res.p1 = {\n        x:this.p1.x,\n        y:this.p1.y,\n        z:this.p1.z\n    };\n    res.p2 = {\n        x:this.p2.x,\n        y:this.p2.y,\n        z:this.p2.z\n    };\n    res.acc = this.acc;\n    return res;\n};\nSDFSegment.fromJSON = function(json){\n    var v = ScalisVertex.fromJSON(json.v[0]);\n    return new SDFSegment(\n        new THREE.Vector3(json.p1.x,json.p1.y, json.p1.z),\n        new THREE.Vector3(json.p2.x,json.p2.y, json.p2.z),\n        json.acc\n    );\n};\n\n/**\n *  @param {number} acc The new accuracy factor\n */\nSDFSegment.prototype.setAccuracy = function(acc) {\n    this.acc = acc;\n    this.invalidAABB();\n};\n\n/**\n *  @return {number} Current accuracy factor\n */\nSDFSegment.prototype.getAccuracy = function() {\n    return this.acc;\n};\n\n/**\n *  @param {THREE.Vector3} p1 The new position of the first segment point.\n */\nSDFSegment.prototype.setPosition1 = function(p1) {\n    this.p1.copy(p1);\n    this.invalidAABB();\n};\n/**\n *  @param {THREE.Vector3} p2 The new position of the second segment point\n */\nSDFSegment.prototype.setPosition2 = function(p2) {\n    this.p2.copy(p2);\n    this.invalidAABB();\n};\n\n/**\n *  @return {THREE.Vector3} Current position of the first segment point\n */\nSDFSegment.prototype.getPosition1 = function() {\n    return this.p1;\n};\n/**\n *  @return {THREE.Vector3} Current position of the second segment point\n */\nSDFSegment.prototype.getPosition2 = function() {\n    return this.p2;\n};\n\n// [Abstract]\nSDFSegment.prototype.computeDistanceAABB = function(d) {\n    var b1 = new THREE.Box3(\n        this.p1.clone().add(new THREE.Vector3(-d,-d,-d)),\n        this.p1.clone().add(new THREE.Vector3(d,d,d))\n    );\n    var b2 = new THREE.Box3(\n        this.p2.clone().add(new THREE.Vector3(-d,-d,-d)),\n        this.p2.clone().add(new THREE.Vector3(d,d,d))\n    );\n    return b1.union(b2);\n};\n// [Abstract]\nSDFSegment.prototype.prepareForEval = function() {\n    if(!this.valid_aabb)\n    {\n        this.l.set(this.p1,this.p2);\n        this.valid_aabb = true;\n    }\n};\n\n// [Abstract] see ScalisPrimitive.getArea\nSDFSegment.prototype.getAreas = function(d) {\n    if(!this.valid_aabb) {\n        throw \"ERROR : Cannot get area of invalid primitive\";\n        return [];\n    }else{\n        return [{\n            aabb:this.computeDistanceAABB(d),\n            bv: new AreaCapsule(\n                this.p1,\n                this.p2,\n                d,\n                d,\n                this.acc,\n                this.acc\n            ),\n            obj: this\n        }];\n    }\n};\n\n// [Abstract] see SDFPrimitive.value\nSDFSegment.prototype.value = (function(){\n    var v = new THREE.Vector3();\n    var lc = new THREE.Vector3();\n    return function(p,res) {\n        this.l.closestPointToPoint(p,true,v);\n        res.v = lc.subVectors(p,v).length();\n        if(res.g){\n            res.g.copy(lc).divideScalar(res.v);\n        }\n    };\n})();\n\nmodule.exports = SDFSegment;\n","\"use strict\";\n\nconst THREE = require(\"three\");\nconst Types = require(\"../Types.js\");\nconst SDFPrimitive = require(\"./SDFPrimitive.js\");\nconst AreaSphere = require(\"../areas/AreaSphere.js\");\n\n/**\n *  @constructor\n *  @extends SDFPrimitive\n *\n *  @param {THREE.Vector3} p Position (ie center) of the sphere\n *  @param {number} r Radius of the sphere\n */\nvar SDFSphere = function(p, r) {\n    SDFPrimitive.call(this);\n\n    this.p = p.clone();\n    this.r = r;\n};\n\nSDFSphere.prototype = Object.create(SDFPrimitive.prototype);\nSDFSphere.prototype.constructor = SDFSphere;\n\nSDFSphere.type = \"SDFSphere\";\nTypes.register(SDFSphere.type, SDFSphere);\n\nSDFSphere.prototype.getType = function(){\n    return SDFSphere.type;\n};\n\nSDFSphere.prototype.toJSON = function() {\n    var res = SDFPrimitive.prototype.toJSON.call(this);\n    res.p = {\n        x:this.p.x,\n        y:this.p.y,\n        z:this.p.z\n    };\n    res.r = this.r;\n    return res;\n};\nSDFSphere.fromJSON = function(json){\n    return new SDFSphere(new THREE.Vector3(json.p.x,json.p.y, json.p.z), json.r);\n};\n\n/**\n *  @param {number} r The new radius\n */\nSDFSphere.prototype.setRadius = function(r) {\n    this.r = r;\n    this.invalidAABB();\n};\n\n/**\n *  @return {number} Current radius\n */\nSDFSphere.prototype.getRadius = function() {\n    return this.r;\n};\n\n/**\n *  @param {THREE.Vector3} p The new position (ie center)\n */\nSDFSphere.prototype.setPosition = function(p) {\n    this.p.copy(p);\n    this.invalidAABB();\n};\n\n/**\n *  @return {THREE.Vector3} Current position (ie center)\n */\nSDFSphere.prototype.getPosition = function() {\n    return this.p;\n};\n\n// [Abstract]\nSDFSphere.prototype.computeDistanceAABB = function(d) {\n    return new THREE.Box3(\n        this.p.clone().add(new THREE.Vector3(-this.r-d,-this.r-d,-this.r-d)),\n        this.p.clone().add(new THREE.Vector3(this.r+d,this.r+d,this.r+d))\n    );\n};\n// [Abstract]\nSDFSphere.prototype.prepareForEval = function() {\n    if(!this.valid_aabb)\n    {\n        this.valid_aabb = true;\n    }\n};\n\n// [Abstract] see ScalisPrimitive.getArea\nSDFSphere.prototype.getAreas = function(d) {\n    if(!this.valid_aabb) {\n        throw \"ERROR : Cannot get area of invalid primitive\";\n        return [];\n    }else{\n        return [{\n            aabb:this.computeDistanceAABB(d),\n            bv: new AreaSphere(\n                this.p,\n                this.r+d,\n                this.r/(this.r+d) // Adjust accuray factor according to the radius and not only to the required d\n            ),\n            obj: this\n        }];\n    }\n};\n\n// [Abstract] see SDFPrimitive.value\nSDFSphere.prototype.value = (function(){\n    var v = new THREE.Vector3();\n\n    return function(p,res) {\n        if(!this.valid_aabb){\n            throw \"Error : PrepareForEval should have been called\";\n        }\n\n        v.subVectors(p,this.p);\n        var l = v.length();\n        res.v = l - this.r;\n        if(res.g)\n        {\n            res.g.copy(v).multiplyScalar(1/l);\n        }\n    };\n})();\n\nmodule.exports = SDFSphere;\n","\"use strict\";\n\nconst THREE = require(\"three\");\nconst Types = require(\"../Types.js\");\nconst SDFPrimitive = require(\"./SDFPrimitive.js\");\nconst AreaCapsule = require(\"../areas/AreaCapsule.js\");\n\n/**\n *  This primitive implements a distance field to an extanded \"capsule geometry\", which is actually a weighted segment.\n *  You can find more on Capsule geometry here https://github.com/maximeq/three-js-capsule-geometry\n *\n *  @constructor\n *  @extends SDFPrimitive\n *\n *  @param {THREE.Vector3} p1 Position of the first segment extremity\n *  @param {THREE.Vector3} p2 Position of the second segment extremity\n *  @param {number} r1 Radius of the sphere centered in p1\n *  @param {number} r2 Radius of the sphere centered in p2\n */\nvar SDFCapsule = function(p1, p2, r1, r2) {\n    SDFPrimitive.call(this);\n\n    this.p1 = p1.clone();\n    this.p2 = p2.clone();\n    this.r1 = r1;\n    this.r2 = r2;\n\n    // Helper for evaluation\n    this.r1 = this.r1;\n    this.rdiff = this.r2 - this.r1;\n    this.unit_dir = new THREE.Vector3().subVectors(this.p2, this.p1);\n    this.lengthSq = this.unit_dir.lengthSq();\n    this.length = this.unit_dir.length();\n    this.unit_dir.normalize();\n};\n\nSDFCapsule.prototype = Object.create(SDFPrimitive.prototype);\nSDFCapsule.prototype.constructor = SDFCapsule;\n\nSDFCapsule.type = \"SDFCapsule\";\nTypes.register(SDFCapsule.type, SDFCapsule);\n\nSDFCapsule.prototype.getType = function(){\n    return SDFCapsule.type;\n};\n\nSDFCapsule.prototype.toJSON = function() {\n    var res = SDFPrimitive.prototype.toJSON.call(this);\n    res.p1 = {\n        x:this.p1.x,\n        y:this.p1.y,\n        z:this.p1.z\n    };\n    res.r1 = this.r1;\n    res.p2 = {\n        x:this.p2.x,\n        y:this.p2.y,\n        z:this.p2.z\n    };\n    res.r2 = this.r2;\n    return res;\n};\nSDFCapsule.fromJSON = function(json){\n    var v = ScalisVertex.fromJSON(json.v[0]);\n    return new SDFCapsule(\n        new THREE.Vector3(json.p1.x,json.p1.y, json.p1.z),\n        new THREE.Vector3(json.p2.x,json.p2.y, json.p2.z),\n        json.r1,\n        json.r2\n    );\n};\n\n/**\n *  @param {number} r1 The new radius at p1\n */\nSDFCapsule.prototype.setRadius1 = function(r1) {\n    this.r1 = r1;\n    this.invalidAABB();\n};\n/**\n *  @param {number} r2 The new radius at p2\n */\nSDFCapsule.prototype.setRadius2 = function(r1) {\n    this.r1 = r1;\n    this.invalidAABB();\n};\n\n/**\n *  @return {number} Current radius at p1\n */\nSDFCapsule.prototype.getRadius1 = function() {\n    return this.r1;\n};\n/**\n *  @return {number} Current radius at p2\n */\nSDFCapsule.prototype.getRadius2 = function() {\n    return this.r2;\n};\n\n/**\n *  @param {THREE.Vector3} p1 The new position of the first segment point.\n */\nSDFCapsule.prototype.setPosition1 = function(p1) {\n    this.p1.copy(p1);\n    this.invalidAABB();\n};\n/**\n *  @param {THREE.Vector3} p2 The new position of the second segment point\n */\nSDFCapsule.prototype.setPosition2 = function(p2) {\n    this.p2.copy(p2);\n    this.invalidAABB();\n};\n\n/**\n *  @return {THREE.Vector3} Current position of the first segment point\n */\nSDFCapsule.prototype.getPosition1 = function() {\n    return this.p1;\n};\n/**\n *  @return {THREE.Vector3} Current position of the second segment point\n */\nSDFCapsule.prototype.getPosition2 = function() {\n    return this.p2;\n};\n\n// [Abstract]\nSDFCapsule.prototype.computeDistanceAABB = function(d) {\n    var b1 = new THREE.Box3(\n        this.p1.clone().add(new THREE.Vector3(-this.r1-d,-this.r1-d,-this.r1-d)),\n        this.p1.clone().add(new THREE.Vector3(this.r1+d,this.r1+d,this.r1+d))\n    );\n    var b2 = new THREE.Box3(\n        this.p2.clone().add(new THREE.Vector3(-this.r2-d,-this.r2-d,-this.r2-d)),\n        this.p2.clone().add(new THREE.Vector3(this.r2+d,this.r2+d,this.r2+d))\n    );\n    return b1.union(b2);\n};\n// [Abstract]\nSDFCapsule.prototype.prepareForEval = function() {\n    if(!this.valid_aabb)\n    {\n        this.valid_aabb = true;\n    }\n};\n\n// [Abstract] see ScalisPrimitive.getArea\nSDFCapsule.prototype.getAreas = function(d) {\n    if(!this.valid_aabb) {\n        throw \"ERROR : Cannot get area of invalid primitive\";\n        return [];\n    }else{\n        return [{\n            aabb:this.computeDistanceAABB(d),\n            bv: new AreaCapsule(\n                this.p1,\n                this.p2,\n                this.r1+d,\n                this.r2+d,\n                this.r1/(this.r1+d), // Adjust accuray factor according to the radius and not only to the required d\n                this.r2/(this.r2+d)\n            ),\n            obj: this\n        }];\n    }\n};\n\n// [Abstract] see SDFPrimitive.value\nSDFCapsule.prototype.value = (function(){\n    var v = new THREE.Vector3();\n    var proj = new THREE.Vector3();\n\n    return function(p,res) {\n        v.subVectors(p,this.p1);\n        var p1p_sqrl = v.lengthSq();\n        var p1p_l = Math.sqrt(p1p_sqrl);\n\n        // In unit_dir basis, vector (this.r1-this.r2, this.length) is normal to the \"weight line\"\n        // We need a projection in this direction up to the segment line to know in which case we fall.\n\n        var x_p_2D = v.dot(this.unit_dir);\n        // pythagore inc.\n        var y_p_2D = Math.sqrt(\n            Math.max( // Necessary because of rounded errors, pyth result can be <0 and this causes sqrt to return NaN...\n                0.0, p1p_sqrl - x_p_2D*x_p_2D // =  y_p_2D² by pythagore\n            )\n        );\n        var t = -y_p_2D/this.length;\n\n        var proj_x = x_p_2D + t*(this.r1 - this.r2);\n        // var proj_y = 0.0; // by construction\n\n        // Easy way to compute the distance now that we ave the projection on the segment\n        var a = THREE.Math.clamp(proj_x/this.length,0,1.0);\n        proj.copy(this.p1).lerp(this.p2,a); // compute the actual 3D projection\n        var l = v.subVectors(p,proj).length();\n        res.v = l - (a*this.r2+(1.0-a)*this.r1);\n        if(res.g){\n            res.g.copy(v).divideScalar(l);\n        }\n    };\n})();\n\nmodule.exports = SDFCapsule;\n","'use strict';\n\nvar Tables = {};\n\n// edgevmap[i][0] = first vertex index of the ith edge of a cube\n// edgevmap[i][0] = second vertex index of the ith edge of a cube\nTables.EdgeVMap = [\n    [0,4],\n    [1,5],\n    [2,6],\n    [3,7],\n\n    [0,2],\n    [1,3],\n    [4,6],\n    [5,7],\n\n    [0,1],\n    [2,3],\n    [4,5],\n    [6,7]\n];\n\nTables.VertexTopo = [\n    [0,0,0], //0 (MC = 0)\n    [0,0,1], //1 (MC = 4)\n    [0,1,0], //2 (MC = 3)\n    [0,1,1], //3 (MC = 7)\n    [1,0,0], //4 (MC = 1)\n    [1,0,1], //5 (MC = 5)\n    [1,1,0], //6 (MC = 2)\n    [1,1,1]  //7 (MC = 6)\n];\n\nmodule.exports = Tables;","\"use strict\";\n\nconst { Box2 } = require(\"three\");\nconst THREE = require(\"three\");\nconst Material = require(\"../blobtree/Material.js\");\nconst Convergence = require(\"../utils/Convergence.js\");\n\nconst Tables = require(\"./MCTables.js\");\n\n/**\n *  Axis Aligned Bounding Box in 2D carrying accuracy data\n *  @constructor\n *  @extends THREE.Box2\n *  @param {number=} min_x Minimum x coordinate of the box\n *  @param {number=} min_y Minimum y coordinate of the box\n *  @param {number=} max_x Maximum x coordinate of the box\n *  @param {number=} max_y Maximum y coordinate of the box\n *  @param {number=} nice_acc Nice accuracy in this box\n *  @param {number=} raw_acc Raw accuracy in this box\n */\n\nclass Box2Acc extends Box2 {\n    constructor(min, max, nice_acc, raw_acc) {\n        super(min, max);\n\n        if (nice_acc === undefined || nice_acc === null) {\n            var s = Math.max(this.max.x - this.min.x, this.max.y - this.min.y);\n            this.nice_acc = s <= 0 ? 10000000 : s;\n        } else {\n            this.nice_acc = nice_acc;\n        }\n        if (raw_acc === undefined || raw_acc === null) {\n            this.raw_acc = this.nice_acc;\n        } else {\n            this.raw_acc = raw_acc;\n        }\n    }\n\n    union(box) {\n        super.union(box);\n        // Union of 2 boxes get the min acc for both\n        this.raw_acc = Math.min(box.raw_acc, this.raw_acc);\n        this.nice_acc = Math.min(box.nice_acc, this.nice_acc);\n    }\n\n    getRawAcc () {\n        return this.raw_acc;\n    };\n\n    getNiceAcc () {\n        return this.nice_acc;\n    };\n\n    setRawAcc (raw_acc) {\n        this.raw_acc = Math.max(0, raw_acc);\n    };\n\n    setNiceAcc (nice_acc) {\n        this.nice_acc = Math.max(0, nice_acc);\n    };\n\n    toString () {\n        return (\n            \"(\" +\n            this.min.x.toFixed(2) +\n            \", \" +\n            this.min.y.toFixed(2) +\n            \") -> (\" +\n            this.max.x.toFixed(2) +\n            \", \" +\n            this.max.y.toFixed(2) +\n            \") \"\n        );\n    };\n\n    /**\n     *  @param {number} min_x\n     *  @param {number} min_y\n     *  @param {number} max_x\n     *  @param {number} max_y\n     *  @param {number=} nice_acc\n     *  @param {number=} raw_acc\n     */\n    set (min_x, min_y, max_x, max_y, nice_acc, raw_acc) {\n        this.min.set(min_x, min_y);\n        this.max.set(max_x, max_y);\n        if (nice_acc !== undefined) {\n            this.nice_acc = nice_acc;\n        }\n        if (raw_acc !== undefined) {\n            this.raw_acc = raw_acc;\n        }\n    };\n\n    /**\n     *  Get corner with the minimum coordinates\n     *  @return {THREE.Vector3}\n     */\n    getMinCorner () {\n        return this.min;\n    };\n}\n\n/**\n *  Class for a dual marching cube using 2 sliding arrays.\n *  @param {RootNode} blobtree A blobtree to polygonize.\n *  @param {Object} params Parameters and option for this polygonizer.\n *  @param {String} params.zResolution Defines how the stepping in z occurs. Options are :\n *                                     \"adaptive\" (default) steps are computed according to local minimum accuracy.\n *                                     \"uniform\" steps are uniform along z, according to the global minimum accuracy.\n *  @param {number} params.detailRatio The blobtree defines some needed accuracies for polygonizing.\n *                                     However, if you want more details, you can set this to less than 1.\n *                                     Note that this is limited to 0.01, which will already increase your model complexity by a 10 000 factor.\n *  @param {Function} params.progress Progress callback, taling a percentage as parameter.\n *  @param {Object} params.convergence Add newton convergence steps to position each vertex.\n *  @param {number} params.convergence.ratio A ratio of a the marching cube grid size defining the wanted geometrical accuracy. Must be lower than 1, default is 0.01\n *  @param {number} params.convergence.step The maximum number of newton steps, default is 10.\n *                                            The newton process will stop either when the threshold of ratio*cube_size is matched, or the number of steps allowed has been reached.\n *  @param {number} params.dichotomy NOT YET IMPLEMENTED Add dichotomy steps to position each vertex. Usually using convergence is better, except if the implicit\n *                                   field is such that congerging is not possible (for example, null gradients on large areas)\n *  @constructor\n */\n\nvar SlidingMarchingCubes = function(blobtree, params) {\n    var params = params || {};\n\n    this.blobtree = blobtree;\n\n    this.uniformZ = params.zResolution === \"uniform\" ? true : false;\n\n    this.detail_ratio = params.detailRatio\n        ? Math.max(0.01, params.detailRatio)\n        : 1.0;\n\n    if (params.convergence) {\n        this.convergence = params.convergence;\n        this.convergence.ratio = this.convergence.ratio || 0.01;\n        this.convergence.step = this.convergence.step || 10;\n    } else {\n        this.convergence = null;\n    }\n\n    this.progress = params.progress\n        ? params.progress\n        : function(percent) {\n              //console.log(percent);\n          };\n\n    /** @type {Int32Array} */\n    this.reso = new Int32Array(3);\n    this.steps = {\n        x: null,\n        y: null,\n        z: null\n    };\n    /** @type {!{x:number,y:number,z:number}} */\n    this.curr_steps = {\n        x: 0,\n        y: 0,\n        z: 0\n    };\n    // = this.curr_steps.x*this.curr_steps.y*this.curr_steps.z\n    this.curr_step_vol = 0;\n\n    /**\n     *  Sliding values array\n     *  @type {!Array.<Float32Array>}\n     */\n    this.values_xy = [null, null];\n    /**\n     *  Sliding values array\n     *  @type {!Array.<Int32Array>}\n     */\n    this.vertices_xy = [null, null];\n    this.areas = [];\n    this.min_acc = 1;\n\n    // Processing vars\n    this.values = new Array(8);\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.mask = 0;\n    this.edge_cross = [\n        false, // Tables.EdgeVMap[0], x=1\n        false,\n        false,\n        false,\n        false, // edge 2 : Tables.EdgeVMap[4], y=1\n        false,\n        false,\n        false,\n        false, // edge 3 : Tables.EdgeVMap[8], z=1\n        false,\n        false,\n        false\n    ];\n\n    this.vertex = new THREE.Vector3(0, 0, 0); // vertex associated to the cell if any\n    this.vertex_n = new THREE.Vector3(0, 0, 0); // vertex normal\n    this.vertex_m = new Material(); // vertex material\n\n    // Vars and tmp vars for extension checks\n    this.extended = false;\n    this.dis_o_aabb = new THREE.Box3();\n    this.ext_p = new THREE.Vector3();\n\n    /**\n     *  Resulting mesh data\n     */\n    this.geometry = null;\n};\n\n/**\n *  Initialize the internal Geometry structure.\n *  @private\n */\nSlidingMarchingCubes.prototype.initGeometry = function() {\n    this.geometry = {\n        position: [],\n        normal: [],\n        color: [],\n        metalness: [],\n        roughness: [],\n        nVertices: 0,\n        faces: [],\n        nFaces: 0,\n        addVertex: function(data) {\n            this.position.push(data.p.x, data.p.y, data.p.z);\n            this.normal.push(data.n.x, data.n.y, data.n.z);\n            this.color.push(data.c.r, data.c.g, data.c.b);\n            this.roughness.push(data.r);\n            this.metalness.push(data.m);\n            this.nVertices++;\n        },\n        addFace: function(a, b, c) {\n            this.faces.push(a, b, c);\n            this.nFaces++;\n        }\n    };\n};\n\n/**\n *  Build the resulting BufferGeometry from current values in this.geometry.\n *  used in compute function.\n *  @private\n */\nSlidingMarchingCubes.prototype.buildResultingBufferGeometry = function() {\n    var res = new THREE.BufferGeometry();\n    res.setAttribute(\n        \"position\",\n        new THREE.BufferAttribute(new Float32Array(this.geometry.position), 3)\n    );\n    res.setAttribute(\n        \"normal\",\n        new THREE.BufferAttribute(new Float32Array(this.geometry.normal), 3)\n    );\n    res.setAttribute(\n        \"color\",\n        new THREE.BufferAttribute(new Float32Array(this.geometry.color), 3)\n    );\n    res.setAttribute(\n        \"roughness\",\n        new THREE.BufferAttribute(new Float32Array(this.geometry.roughness), 1)\n    );\n    res.setAttribute(\n        \"metalness\",\n        new THREE.BufferAttribute(new Float32Array(this.geometry.metalness), 1)\n    );\n\n    res.setIndex(\n        new THREE.BufferAttribute(\n            this.geometry.nVertices > 65535\n                ? new Uint32Array(this.geometry.faces)\n                : new Uint16Array(this.geometry.faces),\n            1\n        )\n    );\n\n    return res;\n};\n\n/**\n *  Set values in this.values_xy[1] to 0\n *  @private\n */\nSlidingMarchingCubes.prototype.setFrontToZero = function() {\n    // init to 0, can be omptim later\n    for (var i = 0; i < this.values_xy[1].length; ++i) {\n        this.values_xy[1][i] = 0;\n    }\n};\n\n/**\n *  Set values in this.values_xy[1] to -1.\n *  -1 is a marker to state the value has not been computed nor interpolated\n *  @private\n */\nSlidingMarchingCubes.prototype.setFrontToMinus = function() {\n    // init to 0, can be omptim later\n    for (var i = 0; i < this.values_xy[1].length; ++i) {\n        this.values_xy[1][i] = -1;\n    }\n};\n\n/**\n *  Set values in this.values_xy[1] to 0 wherever it is -1.\n *  @private\n */\nSlidingMarchingCubes.prototype.setFrontToZeroIfMinus = function() {\n    // init to 0, can be omptim later\n    for (var i = 0; i < this.values_xy[1].length; ++i) {\n        if (this.values_xy[1][i] === -1) {\n            this.values_xy[1][i] = 0;\n        }\n    }\n};\n\n/**\n *  Perform bilinear interpolation in a given 2D box to set values in front array\n *\n *  @param {number} cx Coordinate x of bottom left corner of the front array\n *  @param {number} cy Coordinate x of bottom left corner of the front array\n *  @param {number} cz Coordinate x of bottom left corner of the front array\n *\n *  @param {number} x0 Lower x box osition in the array\n *  @param {number} x1 Upper x box position in the array\n *  @param {number} y0 Lower y box position in the array\n *  @param {number} y1 Upper y box position in the array\n *\n *  @private\n */\nSlidingMarchingCubes.prototype.interpolateInBox = function(\n    cx,\n    cy,\n    cz,\n    x0,\n    x1,\n    y0,\n    y1\n) {\n    var varr = this.values_xy[1];\n\n    var nx = x1 - x0;\n    var ny = y1 - y0;\n\n    /*\n    this.computeFrontValAtBoxCorners(cx,cy,cz, new THREE.Vector2(x0,y0), new THREE.Vector2(x1,y1));\n    var mask = this.computeBoxMask(new THREE.Vector2(x0,y0), new THREE.Vector2(x1,y1));\n    if(!(mask === 0xf || mask === 0x0)){\n        throw \"Error bad mask when interpolating\";\n    }\n    */\n\n    if (nx > 1) {\n        // must interpolate\n        var line = y0 * this.reso[0];\n        var val0 = varr[line + x0];\n        var v_step = (varr[line + x1] - val0) / nx;\n        for (var i = 1; i < nx; ++i) {\n            if (varr[line + x0 + i] === -1) {\n                varr[line + x0 + i] = val0 + i * v_step;\n                //this.computeFrontValAt(cx,cy,cz,x0+i,y0);\n            }\n        }\n    }\n\n    if (ny > 1) {\n        // compute upper line\n        var line = y1 * this.reso[0];\n        var val0 = varr[line + x0];\n        var v_step = (varr[line + x1] - val0) / nx;\n        for (var i = 1; i < nx; ++i) {\n            if (varr[line + x0 + i] === -1) {\n                varr[line + x0 + i] = val0 + i * v_step;\n                //this.computeFrontValAt(cx,cy,cz,x0+i,y1);\n            }\n        }\n\n        for (var i = 0; i <= nx; ++i) {\n            val0 = varr[y0 * this.reso[0] + x0 + i];\n            v_step = (varr[y1 * this.reso[0] + x0 + i] - val0) / ny;\n            for (var k = 1; k < ny; ++k) {\n                if (varr[(y0 + k) * this.reso[0] + x0 + i] === -1) {\n                    varr[(y0 + k) * this.reso[0] + x0 + i] = val0 + k * v_step;\n                    //if(i===0 || i==nx){\n                    //    this.computeFrontValAt(cx,cy,cz,x0+i,(y0+k));\n                    //}\n                }\n            }\n        }\n    }\n};\n\n/**\n *  Compute blobtree value at a given position in the front sliding array.\n *\n *  @param {number} cx Coordinate x of bottom left corner of the front array\n *  @param {number} cy Coordinate x of bottom left corner of the front array\n *  @param {number} cz Coordinate x of bottom left corner of the front array\n *\n *  @param {number} x X position in the array\n *  @param {number} y Y position in the array\n *\n *  @private\n */\nSlidingMarchingCubes.prototype.computeFrontValAt = function(cx, cy, cz, x, y) {\n    this.computeFrontValAtClosure(cx, cy, cz, x, y);\n};\n/**\n *  Function using closure to have static variable. Wrapped in computeFrontValAt\n *  for profiling purpose.\n */\nSlidingMarchingCubes.prototype.computeFrontValAtClosure = (function() {\n    var eval_res = { v: 0 };\n    var p = new THREE.Vector3();\n    return function(cx, cy, cz, x, y) {\n        var index = y * this.reso[0] + x;\n        eval_res.v = this.blobtree.getNeutralValue();\n        if (this.values_xy[1][index] === -1) {\n            p.set(cx + x * this.min_acc, cy + y * this.min_acc, cz);\n            this.blobtree.value(p, eval_res);\n            this.values_xy[1][index] = eval_res.v;\n        }\n    };\n})();\n\n/**\n *  Compute corner values in the front buffer in 2D box defined by min,max\n *  @param {number} cx X coordinate of the front buffer corner\n *  @param {number} cy Y coordinate of the front buffer corner\n *  @param {number} cz Z coordinate of the front buffer corner\n *  @param {!THREE.Vector2} min 2D box min\n *  @param {!THREE.Vector2} max 2D box max\n */\nSlidingMarchingCubes.prototype.computeFrontValAtBoxCorners = function(\n    cx,\n    cy,\n    cz,\n    min,\n    max\n) {\n    this.computeFrontValAt(cx, cy, cz, min.x, min.y);\n    this.computeFrontValAt(cx, cy, cz, min.x, max.y);\n    this.computeFrontValAt(cx, cy, cz, max.x, min.y);\n    this.computeFrontValAt(cx, cy, cz, max.x, max.y);\n};\n\n/**\n *  Compute all values in the front buffer in 2D box defined by min,max\n *  @param {number} cx X coordinate of the front buffer corner\n *  @param {number} cy Y coordinate of the front buffer corner\n *  @param {number} cz Z coordinate of the front buffer corner\n *  @param {!THREE.Vector2} min 2D box min\n *  @param {!THREE.Vector2} max 2D box max\n */\nSlidingMarchingCubes.prototype.computeFrontValInBox = function(\n    cx,\n    cy,\n    cz,\n    min,\n    max\n) {\n    for (var xx = min.x; xx <= max.x; ++xx) {\n        for (var yy = min.y; yy <= max.y; ++yy) {\n            this.computeFrontValAt(cx, cy, cz, xx, yy);\n        }\n    }\n};\n\n/**\n *  Set all values in 2D box min,max at 0.\n *  @param {!THREE.Vector2} min 2D box min\n *  @param {!THREE.Vector2} max 2D box max\n */\nSlidingMarchingCubes.prototype.setFrontValZeroInBox = function(min, max) {\n    for (var ix = min.x; ix <= max.x; ++ix) {\n        for (var iy = min.y; iy <= max.y; ++iy) {\n            this.values_xy[1][iy * this.reso[0] + ix] = 0;\n        }\n    }\n};\n\n/**\n *  Compute 2D mask of a given 2D box. Mask is an hex integer unique for each\n *  combination of iso value crossing (like in 3D marching cubes, but in 2D).\n *  @param {!THREE.Vector2} min 2D box min\n *  @param {!THREE.Vector2} max 2D box max\n *  @return {number} The mask\n */\nSlidingMarchingCubes.prototype.computeBoxMask = function(min, max) {\n    var mask = 0;\n    mask |=\n        this.values_xy[1][min.y * this.reso[0] + min.x] >\n        this.blobtree.getIsoValue()\n            ? 1 << 0\n            : 0;\n    mask |=\n        this.values_xy[1][min.y * this.reso[0] + max.x] >\n        this.blobtree.getIsoValue()\n            ? 1 << 1\n            : 0;\n    mask |=\n        this.values_xy[1][max.y * this.reso[0] + max.x] >\n        this.blobtree.getIsoValue()\n            ? 1 << 2\n            : 0;\n    mask |=\n        this.values_xy[1][max.y * this.reso[0] + min.x] >\n        this.blobtree.getIsoValue()\n            ? 1 << 3\n            : 0;\n    return mask;\n};\n\n/**\n *  Return 0 if and only if all coners value of 2D box min,max are 0\n *  @param {!THREE.Vector2} min 2D box min\n *  @param {!THREE.Vector2} max 2D box max\n *  @return {number}\n */\nSlidingMarchingCubes.prototype.checkZeroBox = function(min, max) {\n    return (\n        this.values_xy[1][min.y * this.reso[0] + min.x] +\n        this.values_xy[1][min.y * this.reso[0] + max.x] +\n        this.values_xy[1][max.y * this.reso[0] + max.x] +\n        this.values_xy[1][max.y * this.reso[0] + min.x]\n    );\n};\n\n/**\n *  Recursive function computing values in the given 2D box (which is a subbox\n *  of the whole front buffer), by cuting in 2 at each step. This function is\n *  \"smart\", since computed boxes are buid with their scalar field accuracy.\n *  Depending on the accuracy, scalar field values may be computed from the\n *  blobtree or interpolated (linear).\n *  @param {number} cx X coordinate of the front buffer corner\n *  @param {number} cy Y coordinate of the front buffer corner\n *  @param {number} cz Z coordinate of the front buffer corner\n *  @param {!Array.<!Box2Acc>} boxes2D 2D boxes intersecting box. Used to compute accuracy for split boxes.\n *  @param {!Box2Acc} box The 2D box in which we compute values\n */\nSlidingMarchingCubes.prototype.recursiveBoxComputation = function(\n    cx,\n    cy,\n    cz,\n    box,\n    boxes2D\n) {\n    // split the current box in 2 boxes in the largest dimension\n\n    var new_boxes = null;\n    var diff = new THREE.Vector2(\n        Math.round(box.max.x - box.min.x),\n        Math.round(box.max.y - box.min.y)\n    );\n\n    if (diff.x > 1 && diff.x >= diff.y) {\n        // cut in x\n        var x_cut = box.min.x + Math.floor(diff.x / 2);\n        new_boxes = [\n            new Box2Acc(\n                box.min,\n                new THREE.Vector2(x_cut, box.max.y),\n                10000,\n                10000\n            ),\n            new Box2Acc(\n                new THREE.Vector2(x_cut, box.min.y),\n                box.max,\n                10000,\n                10000\n            )\n        ];\n        this.computeFrontValAt(cx, cy, cz, x_cut, box.min.y);\n        this.computeFrontValAt(cx, cy, cz, x_cut, box.max.y);\n        //this.computeFrontValAt(cx,cy,cz, x_cut+1, box.min.y);\n        //this.computeFrontValAt(cx,cy,cz, x_cut+1, box.max.y);\n    } else {\n        // cut in y\n        if (diff.y > 1) {\n            var y_cut = box.min.y + Math.floor(diff.y / 2);\n            new_boxes = [\n                new Box2Acc(\n                    box.min,\n                    new THREE.Vector2(box.max.x, y_cut),\n                    10000,\n                    10000\n                ),\n                new Box2Acc(\n                    new THREE.Vector2(box.min.x, y_cut),\n                    box.max,\n                    10000,\n                    10000\n                )\n            ];\n            this.computeFrontValAt(cx, cy, cz, box.min.x, y_cut);\n            this.computeFrontValAt(cx, cy, cz, box.max.x, y_cut);\n            //this.computeFrontValAt(cx,cy,cz, box.min.x, y_cut+1);\n            //this.computeFrontValAt(cx,cy,cz, box.max.x, y_cut+1);\n        } else {\n            // the box is 1 in size, so we stop\n            return;\n        }\n    }\n    /*\n    if(new_boxes[0].intersectsBox(new_boxes[1])){\n        console.log(\"Fucking shit\");\n    }\n    */\n\n    // Compute accuracies for each box\n    var boxes2D_rec = [[], []];\n    for (var i = 0; i < boxes2D.length; ++i) {\n        for (var k = 0; k < new_boxes.length; ++k) {\n            if (new_boxes[k].intersectsBox(boxes2D[i])) {\n                new_boxes[k].setRawAcc(\n                    Math.min(new_boxes[k].getRawAcc(), boxes2D[i].getRawAcc())\n                );\n                new_boxes[k].setNiceAcc(\n                    Math.min(new_boxes[k].getNiceAcc(), boxes2D[i].getNiceAcc())\n                );\n                boxes2D_rec[k].push(boxes2D[i]);\n            }\n        }\n    }\n\n    for (var k = 0; k < new_boxes.length; ++k) {\n        var b = new_boxes[k];\n\n        var bsize = b.getSize(new THREE.Vector3());\n\n        if (boxes2D_rec[k].length === 0) {\n            this.setFrontValZeroInBox(b.min, b.max);\n        } else {\n            if (bsize.x <= b.getRawAcc() && bsize.y <= b.getRawAcc()) {\n                // We reach the raw level\n                var mask = this.computeBoxMask(b.min, b.max);\n                if (mask === 0xf || mask === 0x0) {\n                    // all points are inside, since we reached raw, we can interpolate\n                    // Note when all values are very close to 0, it's useless to interpolate, setting 0 can do.\n                    this.interpolateInBox(\n                        cx,\n                        cy,\n                        cz,\n                        b.min.x,\n                        b.max.x,\n                        b.min.y,\n                        b.max.y\n                    );\n\n                    // OR just compute all values.\n                    // this.computeFrontValInBox(cx,cy,cz,b.min,b.max);\n                } else {\n                    //Surface is crossed, must go down to the nice\n                    if (\n                        bsize.x <= b.getNiceAcc() &&\n                        bsize.y <= b.getNiceAcc()\n                    ) {\n                        // We are under nice acc, just interpolate\n                        this.interpolateInBox(\n                            cx,\n                            cy,\n                            cz,\n                            b.min.x,\n                            b.max.x,\n                            b.min.y,\n                            b.max.y\n                        );\n\n                        // OR just compute all values.\n                        // this.computeFrontValInBox(cx,cy,cz,b.min,b.max);\n                    } else {\n                        this.recursiveBoxComputation(\n                            cx,\n                            cy,\n                            cz,\n                            b,\n                            boxes2D_rec[k]\n                        );\n                        //console.log(\"going down in \" + b.toString());\n                    }\n                }\n            } else {\n                // we did not reach the raw level, so we must cut again\n                this.recursiveBoxComputation(cx, cy, cz, b, boxes2D_rec[k]);\n            }\n        }\n    }\n};\n\n/**\n *  Compute all values in the front buffer.\n *  @param {number} cx X coordinate of the front buffer corner\n *  @param {number} cy Y coordinate of the front buffer corner\n *  @param {number} cz Z coordinate of the front buffer corner\n */\nSlidingMarchingCubes.prototype.computeFrontValues = function(cx, cy, cz) {\n    this.setFrontToMinus();\n\n    var areas = this.blobtree.getAreas();\n    var bigbox = new Box2Acc();\n    bigbox.makeEmpty();\n    var boxes2D = [];\n    for (var i = 0; i < areas.length; ++i) {\n        var raw_acc = Math.round(\n            (areas[i].bv.getMinRawAcc() * this.detail_ratio) / this.min_acc\n        );\n        var nice_acc = Math.round(\n            (areas[i].bv.getMinAcc() * this.detail_ratio) / this.min_acc\n        );\n        var x_min = Math.max(\n            0,\n            Math.floor((areas[i].aabb.min.x - cx) / this.min_acc)\n        );\n        var y_min = Math.max(\n            0,\n            Math.floor((areas[i].aabb.min.y - cy) / this.min_acc)\n        );\n        var x_max = Math.min(\n            this.reso[0] - 1,\n            Math.ceil((areas[i].aabb.max.x - cx) / this.min_acc)\n        );\n        var y_max = Math.min(\n            this.reso[1] - 1,\n            Math.ceil((areas[i].aabb.max.y - cy) / this.min_acc)\n        );\n        boxes2D.push(\n            new Box2Acc(\n                new THREE.Vector2(x_min, y_min),\n                new THREE.Vector2(x_max, y_max),\n                nice_acc,\n                raw_acc\n            )\n        );\n        bigbox.union(boxes2D[boxes2D.length - 1]);\n    }\n\n    bigbox.intersect(\n        new Box2Acc(\n            new THREE.Vector2(0, 0),\n            new THREE.Vector2(this.reso[0], this.reso[1]),\n            bigbox.getNiceAcc(),\n            bigbox.getRawAcc()\n        )\n    );\n\n    this.computeFrontValAtBoxCorners(cx, cy, cz, bigbox.min, bigbox.max);\n    this.recursiveBoxComputation(cx, cy, cz, bigbox, boxes2D);\n\n    this.setFrontToZeroIfMinus();\n};\n\n/**\n *   get the min accuracy needed for this zone\n *   @param {THREE.Box3} bbox the zone for which we want the minAcc\n *   @return {number} the min acc for this zone\n */\nSlidingMarchingCubes.prototype.getMinAcc = function(bbox) {\n    var areas = this.blobtree.getAreas();\n    var minAcc = Number.MAX_VALUE;\n\n    for (var i = 0; i < areas.length; i++) {\n        var area = areas[i];\n        if (area.aabb.intersectsBox(bbox)) {\n            if (area.bv) {\n                // it's a new area, we can get the min acc\n                var areaMinAcc = area.bv.getMinAcc();\n                if (areaMinAcc < minAcc) {\n                    minAcc = areaMinAcc;\n                }\n            }\n        }\n    }\n    return minAcc * this.detail_ratio;\n};\n\n/**\n *   get the max accuracy needed for this zone\n *   @param {THREE.Box3} bbox the zone for which we want the minAcc\n *   @return {number} the max acc for this zone\n */\nSlidingMarchingCubes.prototype.getMaxAcc = function(bbox) {\n    var areas = this.blobtree.getAreas();\n    var maxAcc = 0;\n\n    for (var i = 0; i < areas.length; i++) {\n        var area = areas[i];\n        if (area.aabb.intersectsBox(bbox)) {\n            if (area.bv) {\n                // it's a new area, we can get the min acc\n                var areaMaxAcc = area.bv.getMinAcc();\n                if (areaMaxAcc > maxAcc) {\n                    maxAcc = areaMaxAcc;\n                }\n            }\n        }\n    }\n    return maxAcc * this.detail_ratio;\n};\n\n/**\n *  Note : returned mesh data will be accurate only if extened AABB difference\n *  with o_aabb is small. compared to o_aabb size.\n *  @param {THREE.Box3} o_aabb The aabb where to compute the surface, if null, the blobtree AABB will be used\n *  @param {boolean=} extended True if we want the agorithm to extend the computation zone\n *                            to ensure overlap with a mesh resulting from a computation\n *                            in a neighbouring aabb (Especially usefull for parallelism).\n */\nSlidingMarchingCubes.prototype.compute = function(o_aabb, extended) {\n    this.initGeometry();\n\n    var timer_begin = new Date();\n\n    this.blobtree.prepareForEval();\n    var aabb = null;\n    if (o_aabb) {\n        aabb = o_aabb.clone();\n    } else {\n        aabb = this.blobtree.getAABB();\n    }\n\n    this.extended = extended !== undefined ? extended : false;\n\n    if (this.extended) {\n        var adims = aabb.getSize(new THREE.Vector3());\n        var minAcc = Math.min(\n            Math.min(this.getMinAcc(aabb), adims[0]),\n            Math.min(adims[1], adims[2])\n        );\n        var acc_box = aabb.clone();\n        var final_bbox = aabb.clone();\n        var axis = [\"x\", \"y\", \"z\"];\n        for (var k = 0; k < axis.length; ++k) {\n            acc_box.max[axis[k]] = aabb.min[axis[k]] + minAcc;\n            var slice_max = this.getMaxAcc(acc_box);\n            if (slice_max !== 0) {\n                final_bbox.min[axis[k]] = final_bbox.min[axis[k]] - slice_max;\n            }\n            acc_box.max[axis[k]] = aabb.max[axis[k]] - minAcc;\n            slice_max = this.getMaxAcc(acc_box);\n            if (slice_max !== 0) {\n                final_bbox.max[axis[k]] = final_bbox.max[axis[k]] + slice_max;\n            }\n        }\n        aabb.copy(final_bbox);\n    }\n\n    var aabb_trim = [];\n    var aabb_trim_parents = [];\n    if (o_aabb) {\n        this.blobtree.externalTrim(aabb, aabb_trim, aabb_trim_parents);\n        this.blobtree.prepareForEval();\n    }\n\n    this.areas = this.blobtree.getAreas();\n\n    // if no areas, blobtree is empty so stop and send an empty mesh.\n    if (this.areas.length === 0) {\n        this.progress(100);\n        return new THREE.BufferGeometry();\n    }\n\n    this.min_acc = this.areas.length !== 0 ? this.areas[0].bv.getMinAcc() : 1;\n    for (var i = 0; i < this.areas.length; ++i) {\n        if (this.areas[i].bv.getMinAcc() < this.min_acc) {\n            this.min_acc = this.areas[i].bv.getMinAcc();\n        }\n    }\n    this.min_acc = this.min_acc * this.detail_ratio;\n\n    var corner = aabb.min;\n    var dims = aabb.getSize(new THREE.Vector3());\n\n    this.steps.z = new Float32Array(Math.ceil(dims.z / this.min_acc) + 2);\n    var z = corner.z;\n    this.steps.z[0] = corner.z;\n    var index = 1;\n    var areas = this.blobtree.getAreas();\n    while (this.steps.z[index - 1] < corner.z + dims.z) {\n        var min_step = dims.z;\n        // If uniformZ is true, we do not adapt z stepping to local slice accuracy.\n        if (this.uniformZ) {\n            min_step = this.min_acc;\n        } else {\n            // find minimum accuracy needed in this slice.\n            for (var i = 0; i < areas.length; ++i) {\n                min_step = Math.min(\n                    min_step,\n                    areas[i].bv.getAxisProjectionMinStep(\n                        \"z\",\n                        this.steps.z[index - 1]\n                    ) * this.detail_ratio\n                );\n            }\n        }\n        this.steps.z[index] = this.steps.z[index - 1] + min_step;\n        index++;\n    }\n    this.reso[2] = index;\n\n    this.reso[0] = Math.ceil(dims.x / this.min_acc) + 2;\n    this.reso[1] = Math.ceil(dims.y / this.min_acc) + 2;\n\n    // If necessary, set this.dis_o_aabb\n    // Reminder : dis_o_aabb is the discret o_aabb, ie indices for which we are in the o_aabb.\n    if (this.extended) {\n        var i = 0;\n        this.dis_o_aabb.set(\n            new THREE.Vector3(-1, -1, -1),\n            new THREE.Vector3(-1, -1, -1)\n        );\n        while (i < this.reso[2] && this.dis_o_aabb.min.z === -1) {\n            if (this.steps.z[i] >= o_aabb.min.z) {\n                this.dis_o_aabb.min.z = i;\n            }\n            i++;\n        }\n        if (i > this.reso[2] - 1) {\n            this.dis_o_aabb.min.z = this.reso[2] - 1;\n        } // should never happen\n\n        i = this.reso[2] - 1;\n        while (i >= 0 && this.dis_o_aabb.max.z === -1) {\n            if (this.steps.z[i] < o_aabb.max.z) {\n                this.dis_o_aabb.max.z = i;\n            }\n            i--;\n        }\n        if (i < 0) {\n            this.dis_o_aabb.max.z = 0;\n        } // should never happen\n\n        this.dis_o_aabb.min.x = Math.round(\n            (o_aabb.min.x - aabb.min.x) / this.min_acc\n        );\n        this.dis_o_aabb.min.y = Math.round(\n            (o_aabb.min.y - aabb.min.y) / this.min_acc\n        );\n        this.dis_o_aabb.max.x =\n            this.reso[0] -\n            2 -\n            Math.round((aabb.max.x - o_aabb.max.x) / this.min_acc);\n        this.dis_o_aabb.max.y =\n            this.reso[1] -\n            2 -\n            Math.round((aabb.max.y - o_aabb.max.y) / this.min_acc);\n    }\n    // Back values\n    this.values_xy[0] = new Float32Array(this.reso[0] * this.reso[1]);\n    // Front values\n    this.values_xy[1] = new Float32Array(this.reso[0] * this.reso[1]);\n\n    this.vertices_xy[0] = new Int32Array(this.reso[0] * this.reso[1]);\n    this.vertices_xy[1] = new Int32Array(this.reso[0] * this.reso[1]);\n\n    // Aabb for trimming the blobtree\n    var trim_aabb = new THREE.Box3();\n    this.computeFrontValues(corner.x, corner.y, corner.z);\n\n    var percent = 0;\n\n    for (var iz = 0; iz < this.reso[2] - 1; ++iz) {\n        // Switch the 2 arrays, and fill the one in front\n        var switcher = this.values_xy[0];\n        this.values_xy[0] = this.values_xy[1];\n        this.values_xy[1] = switcher;\n        switcher = this.vertices_xy[0];\n        this.vertices_xy[0] = this.vertices_xy[1];\n        this.vertices_xy[1] = switcher;\n\n        var z1 = this.steps.z[iz + 1];\n        trim_aabb.set(\n            new THREE.Vector3(corner.x, corner.y, z1 - this.min_acc / 64),\n            new THREE.Vector3(\n                corner.x + this.reso[0] * this.min_acc,\n                corner.y + this.reso[1] * this.min_acc,\n                z1 + this.min_acc / 64\n            )\n        );\n        this.blobtree.internalTrim(trim_aabb);\n        this.blobtree.prepareForEval();\n        this.computeFrontValues(corner.x, corner.y, z1);\n        this.blobtree.internalUntrim(trim_aabb);\n        this.blobtree.prepareForEval();\n\n        this.z = this.steps.z[iz];\n\n        this.curr_steps.z = this.steps.z[iz + 1] - this.steps.z[iz];\n        this.curr_steps.x = this.min_acc;\n        this.curr_steps.y = this.min_acc;\n        this.curr_step_vol =\n            this.curr_steps.x * this.curr_steps.y * this.curr_steps.z;\n\n        for (var iy = 0; iy < this.reso[1] - 1; ++iy) {\n            for (var ix = 0; ix < this.reso[0] - 1; ++ix) {\n                this.y = corner.y + iy * this.min_acc;\n                this.fetchAndTriangulate(ix, iy, iz, corner);\n            }\n        }\n\n        if (Math.round((100 * iz) / this.reso[2]) > percent) {\n            percent = Math.round((100 * iz) / this.reso[2]);\n            this.progress(percent);\n        }\n    }\n\n    if (o_aabb) {\n        this.blobtree.untrim(aabb_trim, aabb_trim_parents);\n        this.blobtree.prepareForEval();\n    }\n\n    var timer_end = new Date();\n    console.log(\n        \"Sliding Marching Cubes computed in \" + (timer_end - timer_begin) + \"ms\"\n    );\n\n    // Clear memory, in case this object is kept alive\n    this.values_xy[0] = null;\n    this.values_xy[1] = null;\n    this.vertices_xy[0] = null;\n    this.vertices_xy[1] = null;\n\n    this.progress(100);\n\n    return this.buildResultingBufferGeometry();\n};\n\n/**\n *  Check values for cube at x, y. Ie get values front front and back arrays,\n *  compute marching cube mask, build the resulting vertex and faces if necessary.\n *  @param {number} x\n *  @param {number} y\n *  @param {THREE.Vector3} corner Bottom left corner of front array.\n */\nSlidingMarchingCubes.prototype.fetchAndTriangulate = function(x, y, z, corner) {\n    var idx_y_0 = y * this.reso[0] + x;\n    var idx_y_1 = (y + 1) * this.reso[0] + x;\n    this.values[0] = this.values_xy[0][idx_y_0]; //v_000;\n    this.values[1] = this.values_xy[1][idx_y_0]; //v_001;\n    this.values[2] = this.values_xy[0][idx_y_1]; //v_010;\n    this.values[3] = this.values_xy[1][idx_y_1]; //v_011;\n    this.values[4] = this.values_xy[0][idx_y_0 + 1]; //v_100;\n    this.values[5] = this.values_xy[1][idx_y_0 + 1]; //v_101;\n    this.values[6] = this.values_xy[0][idx_y_1 + 1]; //v_110;\n    this.values[7] = this.values_xy[1][idx_y_1 + 1]; //v_111;\n\n    this.computeMask();\n    if (this.mask !== 0x0) {\n        if (this.mask !== 0xff) {\n            this.x = corner.x + x * this.min_acc;\n            this.computeVertex();\n            this.geometry.addVertex({\n                p: this.vertex,\n                n: this.vertex_n,\n                c: this.vertex_m.getColor(),\n                r: this.vertex_m.getRoughness(),\n                m: this.vertex_m.getMetalness()\n            });\n            this.vertices_xy[1][idx_y_0] = this.geometry.nVertices - 1;\n            this.triangulate(x, y, z);\n        }\n    }\n};\n\n/**\n *  Push 2 faces in direct order (right handed).\n *  @param {number} v1 Index of vertex 1 in this.geometry\n *  @param {number} v2 Index of vertex 2 in this.geometry\n *  @param {number} v3 Index of vertex 3 in this.geometry\n *  @param {number} v4 Index of vertex 4 in this.geometry\n */\nSlidingMarchingCubes.prototype.pushDirectFaces = function(v1, v2, v3, v4) {\n    this.geometry.addFace(v1, v2, v3);\n    this.geometry.addFace(v3, v4, v1);\n};\n/**\n *  Push 2 faces in undirect order (left handed).\n *  @param {number} v1 Index of vertex 1 in this.geometry\n *  @param {number} v2 Index of vertex 2 in this.geometry\n *  @param {number} v3 Index of vertex 3 in this.geometry\n *  @param {number} v4 Index of vertex 4 in this.geometry\n */\nSlidingMarchingCubes.prototype.pushUndirectFaces = function(v1, v2, v3, v4) {\n    this.geometry.addFace(v3, v2, v1);\n    this.geometry.addFace(v1, v4, v3);\n};\n\n/**\n *  Compute and add faces depending on current cell crossing mask\n *  @param {number} x Current cell x coordinate in the grid (integer)\n *  @param {number} y Current cell y coordinate in the grid (integer)\n *  @param {number} z Current cell z coordinate in the grid (integer)\n */\nSlidingMarchingCubes.prototype.triangulate = function(x, y, z) {\n    var idx_y_0 = y * this.reso[0] + x;\n    if (this.edge_cross[0] && y !== 0 && z !== 0) {\n        // x edge is crossed\n        // Check orientation\n        var v1 = this.vertices_xy[1][idx_y_0];\n        var v2 = this.vertices_xy[1][(y - 1) * this.reso[0] + x];\n        var v3 = this.vertices_xy[0][(y - 1) * this.reso[0] + x];\n        var v4 = this.vertices_xy[0][idx_y_0];\n        if (this.mask & 0x1) {\n            this.pushDirectFaces(v1, v2, v3, v4);\n        } else {\n            this.pushUndirectFaces(v1, v2, v3, v4);\n        }\n    }\n    if (this.edge_cross[4] && x !== 0 && z !== 0) {\n        // y edge is crossed\n        // Check orientation\n        var v1 = this.vertices_xy[1][idx_y_0];\n        var v2 = this.vertices_xy[0][idx_y_0];\n        var v3 = this.vertices_xy[0][idx_y_0 - 1];\n        var v4 = this.vertices_xy[1][idx_y_0 - 1];\n        if (this.mask & 0x1) {\n            this.pushDirectFaces(v1, v2, v3, v4);\n        } else {\n            this.pushUndirectFaces(v1, v2, v3, v4);\n        }\n    }\n    if (this.edge_cross[8] && x !== 0 && y !== 0) {\n        // z edge is crossed\n        // Check orientation\n        var v1 = this.vertices_xy[1][idx_y_0];\n        var v2 = this.vertices_xy[1][idx_y_0 - 1];\n        var v3 = this.vertices_xy[1][(y - 1) * this.reso[0] + x - 1];\n        var v4 = this.vertices_xy[1][(y - 1) * this.reso[0] + x];\n        if (this.mask & 0x1) {\n            this.pushDirectFaces(v1, v2, v3, v4);\n        } else {\n            this.pushUndirectFaces(v1, v2, v3, v4);\n        }\n    }\n};\n\n/**\n *  Compute the vertex in the current cube.\n *  Use this.x, this.y, this.z\n */\nSlidingMarchingCubes.prototype.computeVertex = (function() {\n    // Function static variable\n    var eval_res = {\n        v: null,\n        g: new THREE.Vector3(0, 0, 0),\n        m: new Material()\n    };\n    var conv_res = new THREE.Vector3();\n\n    return function() {\n        eval_res.v = this.blobtree.getNeutralValue();\n\n        // Optimization note :\n        //      Here I dont use tables but performances may be improved\n        //      by using tables. See marching cube and surface net for examples\n\n        // Average edge intersection\n        var e_count = 0;\n\n        this.vertex.set(0, 0, 0);\n\n        //For every edge of the cube...\n        for (var i = 0; i < 12; ++i) {\n            // --> the following code does not seem to work. Tables.EdgeCross may be broken\n            //Use edge mask to check if it is crossed\n            // if(!(edge_mask & (1<<i))) {\n            //     continue;\n            // }\n\n            //Now find the point of intersection\n            var e0 = Tables.EdgeVMap[i][0]; //Unpack vertices\n            var e1 = Tables.EdgeVMap[i][1];\n            var p0 = Tables.VertexTopo[e0];\n            var p1 = Tables.VertexTopo[e1];\n            var g0 = this.values[e0]; //Unpack grid values\n            var g1 = this.values[e1];\n\n            // replace the mask check with that. Slower.\n            this.edge_cross[i] =\n                g0 > this.blobtree.getIsoValue() !==\n                g1 > this.blobtree.getIsoValue();\n            if (!this.edge_cross[i]) {\n                continue;\n            }\n            //If it did, increment number of edge crossings\n            ++e_count;\n\n            var d = g1 - g0;\n            var t = 0; //Compute point of intersection\n            if (Math.abs(d) > 1e-6) {\n                t = (this.blobtree.getIsoValue() - g0) / d;\n            } else {\n                continue;\n            }\n\n            this.vertex.x += (1.0 - t) * p0[0] + t * p1[0];\n            this.vertex.y += (1.0 - t) * p0[1] + t * p1[1];\n            this.vertex.z += (1.0 - t) * p0[2] + t * p1[2];\n        }\n\n        this.vertex.x = this.x + (this.curr_steps.x * this.vertex.x) / e_count;\n        this.vertex.y = this.y + (this.curr_steps.y * this.vertex.y) / e_count;\n        this.vertex.z = this.z + (this.curr_steps.z * this.vertex.z) / e_count;\n\n        // now make some convergence step\n        // Note : it cost 15 to 20% performance lost\n        //        and the result does not seem 15 et 20% better...\n        if (this.convergence) {\n            Convergence.safeNewton3D(\n                this.blobtree, // Scalar Field to eval\n                this.vertex, // 3D point where we start, must comply to THREE.Vector3 API\n                this.blobtree.getIsoValue(), // iso value we are looking for\n                this.min_acc * this.convergence.ratio, // Geometrical limit to stop\n                this.convergence.step, // limit of number of step\n                this.min_acc, // Bounding volume inside which we look for the iso, getting out will make the process stop.\n                conv_res // the resulting point\n            );\n            this.vertex.copy(conv_res);\n        }\n\n        this.blobtree.value(this.vertex, eval_res);\n\n        eval_res.g.normalize();\n        this.vertex_n.copy(eval_res.g).multiplyScalar(-1);\n        this.vertex_m.copy(eval_res.m);\n    };\n})();\n\n/**\n *  Compute mask of the current cube.\n *  Use this.values, set this.mask\n */\nSlidingMarchingCubes.prototype.computeMask = function() {\n    this.mask = 0;\n\n    //For each this, compute cube mask\n    for (var i = 0; i < 8; ++i) {\n        var s = this.values[i];\n        this.mask |= s > this.blobtree.getIsoValue() ? 1 << i : 0;\n    }\n};\n\nmodule.exports = SlidingMarchingCubes;\n","\"use strict\";\n\nconst THREE = require(\"three\");\nconst Types = require(\"./Types.js\");\nconst Node = require(\"./Node.js\");\nconst Convergence = require(\"../utils/Convergence.js\");\nconst Material = require(\"./Material.js\");\n\n/**\n *  This class implement a Min node.\n *  It will return the maximum value of the field of each primitive.\n *  Return 0 in region were no primitive is present.\n *  @constructor\n *  @extends Node\n *\n *  @param {Array.<Node>} children The children to add to this node. Just a convenient parameter, you can do it manually using addChild.\n */\nvar MaxNode = function (children) {\n\n    Node.call(this);\n\n    if(children){\n        var self = this;\n        children.forEach(function(c){\n            self.addChild(c);\n        });\n    }\n\n    // temp vars to speed up evaluation by avoiding allocations\n    this.tmp_res = {v:0,g:null,m:null};\n    this.tmp_g = new THREE.Vector3();\n    this.tmp_m = new Material();\n\n};\n\nMaxNode.prototype = Object.create( Node.prototype );\nMaxNode.prototype.constructor = MaxNode;\n\nMaxNode.type = \"MaxNode\";\nTypes.register(MaxNode.type, MaxNode);\n\nMaxNode.prototype.getType = function(){\n    return MaxNode.type;\n};\n\nMaxNode.fromJSON = function(json){\n    var res = new MaxNode();\n    for(var i=0; i<json.children.length; ++i){\n        res.addChild(Types.fromJSON(json.children[i]));\n    }\n    return res;\n};\n\n// [Abstract] see Node for a complete description\nMaxNode.prototype.prepareForEval = function()\n{\n    if(!this.valid_aabb){\n        this.aabb = new THREE.Box3();  // Create empty BBox\n        for(var i=0; i<this.children.length; ++i){\n            var c = this.children[i];\n            c.prepareForEval();\n            this.aabb.union(c.getAABB());     // new aabb is computed according to remaining children aabb\n        }\n\n        this.valid_aabb = true;\n    }\n};\n\n// [Abstract] see Node for more details.\nMaxNode.prototype.value = function(p,res)\n{\n    // TODO : check that all bounding box of all children and subchildrens are valid\n    //        This enable not to do it in prim and limit the number of assert call (and string built)\n\n    var l = this.children.length;\n    var tmp = this.tmp_res;\n    tmp.g = res.g ? this.tmp_g : null;\n    tmp.m = res.m ? this.tmp_m : null;\n\n    // Init res\n    res.v = 0;\n    if(res.m)  {\n        res.m.copy(Material.defaultMaterial);\n    }if(res.g) {\n        res.g.set(0,0,0);\n    }else if (res.step !== undefined) {\n        // that, is the max distance\n        // we want a value that loose any 'min'\n        res.step = 1000000000;\n    }\n\n    if(this.aabb.containsPoint(p) && l !== 0){\n        res.v = Number.MAX_VALUE;\n        for(var i=0; i<l; ++i)\n        {\n            this.children[i].value(p,tmp);\n            if(tmp.v > res.v){\n                res.v = tmp.v;\n                if(res.g) {\n                    res.g.copy(tmp.g);\n                }\n                if(res.m){\n                    res.m.copy(tmp.m);\n                }\n                // within primitive potential\n                if (res.step || res.stepOrtho){\n                    throw \"Not implemented\";\n                }\n            }\n            res.v = Math.max(res.v,tmp.v);\n        }\n    }\n    else if (res.steo || res.stepOrtho) {\n        throw \"Not implemented\";\n    }\n\n};\n\nmodule.exports = MaxNode;\n","const mergeBufferGeometries = require(\"three/examples/jsm/utils/BufferGeometryUtils\").mergeBufferGeometries\n\n// Does not work yet, so just suppose that Blobtree is defined externally\n// const Blobtree = require('three-js-blobtree\");\n\nconst RootNode = require(\"../blobtree/RootNode\");\nconst RicciNode = require(\"../blobtree/RicciNode\");\nconst MaxNode = require(\"../blobtree/MaxNode\");\nconst ScalisPoint = require(\"../blobtree/scalis/ScalisPoint\");\nconst ScalisSegment = require(\"../blobtree/scalis/ScalisSegment\");\nconst ScalisTriangle = require(\"../blobtree/scalis/ScalisTriangle\");\n\nconst SlidingMarchingCubes = require(\"./SlidingMarchingCubes\");\n\n/**\n *  This class will polygonize nodes independantly when they blend with a MaxNode or a RicciNode\n *  (for RicciNode, only if the coefficient of at least \"ricciThreshold\", threshold being a parameter).\n *  It will create a mesh made of several shells but intersections will be better looking than with some\n *  global polygonizers like MarchingCubes.\n *\n *  @param {Object} params Parameters and option for this polygonizer.\n *      @param {Object} params.subPolygonizer Parameters for the subpolygonizer to use.\n *                                            Must contain all parameters for the given subPolygonizer (like detailRatio, etc...)\n *      @param {Boolean} params.uniformRes If true, uniform resolution will be used on all primitives, according to the minimum accuracy in the blobtree.\n *          @param {Function} params.subPolygonizer.class The class of the subpolygonizer (default to SlidingMarchingCubes)\n *  @param {Function} params.progress Progress callback, taking a percentage as parameter.\n *  @param {Number} params.ricciThreshold The RicciNode coefficient above which it will be considered like a MaxNode.\n */\nvar SplitMaxPolygonizer = function(blobtree, params) {\n\n    var params = params || {};\n\n    this.blobtree = blobtree;\n\n    this.uniformRes = params.uniformRes || false;\n    this.min_acc = null;\n    this.minAccs = [];\n\n    this.subPolygonizer = params.subPolygonizer  ? params.subPolygonizer : {\n        class:SlidingMarchingCubes,\n        detailRatio:1.0\n    };\n\n    this.ricciThreshold = params.ricciThreshold || 64;\n\n    this.progress = params.progress ? params.progress : function(percent){\n        //console.log(percent);\n    };\n\n    // Now we need to parse the blobtree and split it according to the different ways of\n    // generating each groups.\n    // Since we do not wantto alterate the original blobtree, for now we will use cloning.\n    // (to be changed if it is too slow)\n    this.subtrees = []; // Blobtrees created for primitives which must be generated with SMC\n        this.progCoeff = []; // progress coefficient, mainly depends on the total number of primitives in the node.\n        this.totalCoeff = 0;\n\n    this.setBlobtree(blobtree);\n};\n\nSplitMaxPolygonizer.prototype.constructor = SplitMaxPolygonizer;\n\nSplitMaxPolygonizer.prototype.setBlobtree = function(blobtree){\n\n    this.blobtree = blobtree;\n    this.blobtree.prepareForEval();\n\n    var getBlobtreeMinAcc = function(btree){\n        var areas = btree.getAreas();\n        var min_acc = areas.length !== 0 ? areas[0].bv.getMinAcc() : null;\n        for(var i=0; i<areas.length; ++i){\n            if(areas[i].bv.getMinAcc()<min_acc){\n                min_acc = areas[i].bv.getMinAcc();\n            }\n        }\n        return min_acc;\n    };\n    this.min_acc = getBlobtreeMinAcc(this.blobtree);\n\n    this.subtrees = [];\n        this.progCoeff = [];\n        this.totalCoeff = 0;\n\n    var self = this;\n    var addToSubtrees = function(n){\n        var subtree = null;\n        if(n instanceof RootNode){\n            subtree = n.clone();\n        }else{\n            subtree = new RootNode();\n            subtree.addChild(n.clone());\n        }\n        self.subtrees.push(subtree);\n        subtree.prepareForEval();\n        self.minAccs.push(getBlobtreeMinAcc(subtree));\n        self.progCoeff.push(\n            subtree.count(ScalisPoint) + subtree.count(ScalisSegment) + subtree.count(ScalisTriangle)\n        );\n        self.totalCoeff += self.progCoeff[self.progCoeff.length-1];\n    };\n\n    var recurse = function(n){\n        if(n instanceof RicciNode){\n            if(n.getRicciN() < self.ricciThreshold){\n                // This node must be copied and generated using SMC\n                if(n.children.length !== 0){\n                    addToSubtrees(n);\n                }\n            }else{\n                for(var i=0; i<n.children.length; ++i){\n                    recurse(n.children[i]);\n                }\n            }\n        }else if(n instanceof MaxNode){\n            for(var i=0; i<n.children.length; ++i){\n                recurse(n.children[i]);\n            }\n        }else if(n instanceof ScalisPoint){\n            addToSubtrees(n);\n        }else if(n instanceof ScalisSegment){\n            addToSubtrees(n);\n        }else if(n instanceof ScalisTriangle){\n            addToSubtrees(n);\n        }else{\n            addToSubtrees(n);\n        }\n    };\n\n    recurse(this.blobtree);\n}\n\nSplitMaxPolygonizer.prototype.compute = function() {\n\n    if(!this.blobtree.isValidAABB()){\n        this.setBlobtree(this.blobtree);\n    }\n\n    var self = this;\n    this.progress(0);\n    var prog = 0;\n    var geometries = [];\n    for(var i=0; i<this.subtrees.length; ++i){\n\n        var prev_detailRatio = this.subPolygonizer.detailRatio || 1.0;\n        if(this.uniformRes && this.min_acc){\n            this.subPolygonizer.detailRatio = prev_detailRatio*this.min_acc/this.minAccs[i];\n        }\n\n        this.subPolygonizer.progress = function(percent){\n            self.progress(100*(prog + (percent/100)*self.progCoeff[i])/self.totalCoeff)\n        };\n        var polygonizer = new this.subPolygonizer.class(\n            this.subtrees[i],\n            this.subPolygonizer\n        );\n        geometries.push(polygonizer.compute());\n\n        this.subPolygonizer.detailRatio = prev_detailRatio;\n\n        prog += this.progCoeff[i];\n    }\n\n    var res = mergeBufferGeometries(geometries);\n\n    this.progress(100);\n\n    return res;\n};\n\nmodule.exports = SplitMaxPolygonizer;\n","\nconst THREE = require(\"three\");\n\nconst Material = require(\"../blobtree/Material.js\");\nconst Tables = require(\"./MCTables.js\");\nconst Convergence = require(\"../utils/Convergence.js\");\n\nconst SlidingMarchingCubes = require(\"./SlidingMarchingCubes\");\n\n\n\n/**\n *  A special SlidingMarchingCubes with a different function\n *  to compute vertex normal in a cell.\n *  In this polygnizer, we suppose the blobtree used for marching\n *  is not the complete blobtree and we want to use the normal from\n *  the complete blobtree.\n *  @param {RootNode} params.metaBlobtree The blobtree from which normals will be computed.\n *                    Usually a blobtree containing blobtree.\n */\nvar SplitSMC = function(blobtree, params){\n    SlidingMarchingCubes.call(this, blobtree, params);\n\n    if(params.metaBlobtree){\n        this.metaBlobtree = params.metaBlobtree;\n        this.metaBlobtree.prepareForEval();\n    }else{\n        throw \"Error : SplitSMC needs a meta blobtree in params (from which normals will be computed).\";\n    }\n};\n\nSplitSMC.prototype = Object.create(SlidingMarchingCubes.prototype);\nSplitSMC.prototype.constructor = SplitSMC;\n\n/**\n *  Compute the vertex in the current cube.\n *  Use this.x, this.y, this.z\n */\nSplitSMC.prototype.computeVertex = (function() {\n    // Function static variable\n    var eval_res = {v:null, g:new THREE.Vector3(0,0,0), m:new Material()};\n    var conv_res = new THREE.Vector3();\n\n    return function()\n    {\n        eval_res.v = this.blobtree.getNeutralValue();\n\n        // Optimization note :\n        //      Here I dont use tables but performances may be improved\n        //      by using tables. See marching cube and surface net for examples\n\n        // Average edge intersection\n        var e_count = 0;\n\n        this.vertex.set(0,0,0);\n\n        //For every edge of the cube...\n        for(var i=0; i<12; ++i)\n        {\n\n            // --> the following code does not seem to work. Tables.EdgeCross may be broken\n            //Use edge mask to check if it is crossed\n            // if(!(edge_mask & (1<<i))) {\n            //     continue;\n            // }\n\n            //Now find the point of intersection\n            var e0 = Tables.EdgeVMap[i][0];       //Unpack vertices\n            var e1 = Tables.EdgeVMap[i][1];\n            var p0 = Tables.VertexTopo[e0];\n            var p1 = Tables.VertexTopo[e1];\n            var g0 = this.values[e0];                //Unpack grid values\n            var g1 = this.values[e1];\n\n            // replace the mask check with that. Slower.\n            this.edge_cross[i] = ((g0>this.blobtree.getIsoValue()) !== (g1>this.blobtree.getIsoValue()));\n            if( !this.edge_cross[i] ){\n                continue;\n            }\n            //If it did, increment number of edge crossings\n            ++e_count;\n\n            var d = (g1-g0);\n            var t  = 0;  //Compute point of intersection\n            if(Math.abs(d) > 1e-6) {\n                t = (this.blobtree.getIsoValue()-g0) / d;\n            } else {\n                continue;\n            }\n\n            this.vertex.x += (1.0-t)*p0[0] + t * p1[0];\n            this.vertex.y += (1.0-t)*p0[1] + t * p1[1];\n            this.vertex.z += (1.0-t)*p0[2] + t * p1[2];\n        }\n\n        this.vertex.x = this.x + this.curr_steps.x*this.vertex.x/e_count;\n        this.vertex.y = this.y + this.curr_steps.y*this.vertex.y/e_count;\n        this.vertex.z = this.z + this.curr_steps.z*this.vertex.z/e_count;\n\n        // now make some convergence step\n        // Note : it cost 15 to 20% performance lost\n        //        and the result does not seem 15 et 20% better...\n        if(this.convergence){\n            Convergence.safeNewton3D(\n                this.blobtree,      // Scalar Field to eval\n                this.vertex,                  // 3D point where we start, must comply to THREE.Vector3 API\n                this.blobtree.getIsoValue(),               // iso value we are looking for\n                this.min_acc*this.convergence.ratio ,               // Geometrical limit to stop\n                this.convergence.step,                           // limit of number of step\n                this.min_acc,                     // Bounding volume inside which we look for the iso, getting out will make the process stop.\n                conv_res                          // the resulting point\n            );\n            this.vertex.copy(conv_res);\n        }\n\n        this.metaBlobtree.value(this.vertex, eval_res);\n\n        eval_res.g.normalize();\n        this.vertex_n.copy(eval_res.g).multiplyScalar(-1);\n        this.vertex_m.copy(eval_res.m);\n    };\n})();\n\nmodule.exports = SplitSMC;\n","import Types from \"./blobtree/Types.js\";\nimport Element from \"./blobtree/Element.js\";\nimport Node from \"./blobtree/Node.js\";\nimport RootNode from \"./blobtree/RootNode.js\";\nimport RicciNode from \"./blobtree/RicciNode.js\";\nimport DifferenceNode from \"./blobtree/DifferenceNode.js\";\nimport MinNode from \"./blobtree/MinNode.js\";\nimport MaxNode from \"./blobtree/MinNode.js\";\nimport Primitive from \"./blobtree/Primitive.js\";\nimport ScalisMath from \"./blobtree/scalis/ScalisMath.js\";\nimport ScalisPrimitive from \"./blobtree/scalis/ScalisPrimitive.js\";\nimport ScalisPoint from \"./blobtree/scalis/ScalisPoint.js\";\nimport ScalisSegment from \"./blobtree/scalis/ScalisSegment.js\";\nimport ScalisTriangle from \"./blobtree/scalis/ScalisTriangle.js\";\nimport ScalisVertex from \"./blobtree/scalis/ScalisVertex.js\";\nimport DistanceFunctor from \"./blobtree/sdf/DistanceFunctor.js\";\nimport Poly6DistanceFunctor from \"./blobtree/sdf/Poly6DistanceFunctor.js\";\nimport SDFRootNode from \"./blobtree/sdf/SDFRootNode.js\";\nimport SDFPrimitive from \"./blobtree/sdf/SDFPrimitive.js\";\nimport SDFPoint from \"./blobtree/sdf/SDFPoint.js\";\nimport SDFSegment from \"./blobtree/sdf/SDFSegment.js\";\nimport SDFSphere from \"./blobtree/sdf/SDFSphere.js\";\nimport SDFCapsule from \"./blobtree/sdf/SDFCapsule.js\";\nimport Material from \"./blobtree/Material.js\";\nimport Accuracies from \"./blobtree/accuracies/Accuracies.js\";\nimport Area from \"./blobtree/areas/Area.js\";\nimport AreaScalisSeg from \"./blobtree/areas/AreaScalisSeg.js\";\nimport AreaScalisTri from \"./blobtree/areas/AreaScalisTri.js\";\nimport AreaSphere from \"./blobtree/areas/AreaSphere.js\";\nimport AreaCapsule from \"./blobtree/areas/AreaCapsule.js\";\nimport SlidingMarchingCubes from \"./polygonizers/SlidingMarchingCubes.js\";\nimport SplitMaxPolygonizer from \"./polygonizers/SplitMaxPolygonizer.js\";\nimport SplitSMC from \"./polygonizers/SplitSMC.js\";\n\nconst version = \"1.0.0\";\n\nexport {\n    version,\n    Types,\n    Element,\n    Node,\n    RootNode,\n    RicciNode,\n    DifferenceNode,\n    MinNode,\n    MaxNode,\n    Primitive,\n    ScalisMath,\n    ScalisPrimitive,\n    ScalisPoint,\n    ScalisSegment,\n    ScalisTriangle,\n    ScalisVertex,\n    DistanceFunctor,\n    Poly6DistanceFunctor,\n    SDFRootNode,\n    SDFPrimitive,\n    SDFPoint,\n    SDFSegment,\n    SDFSphere,\n    SDFCapsule,\n    Material,\n    Accuracies,\n    Area,\n    AreaScalisSeg,\n    AreaScalisTri,\n    AreaSphere,\n    AreaCapsule,\n    SlidingMarchingCubes,\n    SplitMaxPolygonizer,\n    SplitSMC,\n};\n","import { checkDependancy, checkThreeRevision } from \"three-js-checker\";\nimport * as Blobtree from \"./export\";\nimport {BufferGeometryUtils} from \"three/examples/jsm/utils/BufferGeometryUtils\";\n\nconst PACKAGE_NAME = \"three-js-blobtree\";\n\ncheckThreeRevision(PACKAGE_NAME, 130);\ncheckDependancy(PACKAGE_NAME, \"BufferGeometryUtils\", BufferGeometryUtils);\ncheckDependancy(PACKAGE_NAME, \"Blobtree\", Blobtree);\n\nexport * from \"./export\";\n"],"names":["Types","THREE","require$$0","require$$1","Element","Node","Convergence","Material","require$$2","require$$4","RicciNode","require$$3","RootNode","Primitive","ScalisMath","ScalisPrimitive","ScalisVertex","Area","Accuracies","AreaSphere","require$$5","require$$6","ScalisPoint","AreaScalisSeg","ScalisSegment","TriangleUtils","AreaScalisTri","require$$8","ScalisTriangle","DistanceFunctor","SDFNode","SDFPrimitive","AreaCapsule","Tables","SlidingMarchingCubes","MaxNode","require$$7","BufferGeometryUtils","Blobtree"],"mappings":"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AC;IAC9B,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC9B,IAAI,IAAI,GAAG,GAAG,KAAK,GAAG,KAAK,CAAC;IAC5B,IAAI,QAAQ,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,KAAK,IAAI,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,CAAC,CAAC,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,KAAK,KAAK,GAAG,KAAK,IAAI,EAAE,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,KAAK,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,EAAE,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,GAAG,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG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"}